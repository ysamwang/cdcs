library(cdcs)
p <- 10
n <- 100
rec <- rep(0, 1000)
for(i in 1:1000){
cat(i)
cat("\n")
dat <- rDAG(p, n, maxInDegree = 4, lowEdge = .1, highEdge = .5, dist = "lognorm")
rec[i] <- fullTest(dat$Y, 1:p, K = 4, bs = 200)
}
hist(rec)
mean(rec < .05)
mean(rec < .1)
fullTest <- function(Y, ord, K = 4, bs = 200){
n <- dim(Y)[1]
p <- dim(Y)[2]
.fullTestHelper <- function(i){
out <- singleTestcpp(X = Y[, ord[1:(i-1)], drop = F], Y = Y[, ord[i], drop = F], K = K, bs = bs)
out$nullDist <- out$nullDist * sqrt(n / (n - i + 1))
}
out <- lapply(2:p, .fullTestHelper)
nullDist <- do.call("cbind", lapply(out, function(x){x$nullDist}))
testStats <- do.call("cbind", lapply(out, function(x){x$test}))
pVal <- mean(apply(nullDist, MAR = 1, max) > max(testStats))
return(pVal)
}
library(cdcs)
p <- 10
n <- 100
rec <- rep(0, 1000)
for(i in 1:1000){
cat(i)
cat("\n")
dat <- rDAG(p, n, maxInDegree = 4, lowEdge = .1, highEdge = .5, dist = "lognorm")
rec[i] <- fullTest(dat$Y, 1:p, K = 4, bs = 200)
}
hist(rec)
mean(rec < .05)
mean(rec < .1)
fullTest <- function(Y, ord, K = 4, bs = 200){
n <- dim(Y)[1]
p <- dim(Y)[2]
.fullTestHelper <- function(i){
out <- singleTestcpp(X = Y[, ord[1:(i-1)], drop = F], Y = Y[, ord[i], drop = F], K = K, bs = bs)
# out$nullDist <- out$nullDist * sqrt(n / (n - i + 1))
}
out <- lapply(2:p, .fullTestHelper)
nullDist <- do.call("cbind", lapply(out, function(x){x$nullDist}))
testStats <- do.call("cbind", lapply(out, function(x){x$test}))
pVal <- mean(apply(nullDist, MAR = 1, max) > max(testStats))
return(pVal)
}
library(cdcs)
p <- 10
n <- 100
rec <- rep(0, 1000)
for(i in 1:1000){
cat(i)
cat("\n")
dat <- rDAG(p, n, maxInDegree = 4, lowEdge = .1, highEdge = .5, dist = "lognorm")
rec[i] <- fullTest(dat$Y, 1:p, K = 4, bs = 200)
}
hist(rec)
mean(rec < .05)
mean(rec < .1)
fullTest <- function(Y, ord, K = 4, bs = 200){
n <- dim(Y)[1]
p <- dim(Y)[2]
.fullTestHelper <- function(i){
out <- singleTestcpp(X = Y[, ord[1:(i-1)], drop = F], Y = Y[, ord[i], drop = F], K = K, bs = bs)
out$nullDist <- out$nullDist * sqrt(n / (n - i + 1))
return(out)
}
out <- lapply(2:p, .fullTestHelper)
nullDist <- do.call("cbind", lapply(out, function(x){x$nullDist}))
testStats <- do.call("cbind", lapply(out, function(x){x$test}))
pVal <- mean(apply(nullDist, MAR = 1, max) > max(testStats))
return(pVal)
}
library(cdcs)
p <- 10
n <- 100
rec <- rep(0, 1000)
for(i in 1:1000){
cat(i)
cat("\n")
dat <- rDAG(p, n, maxInDegree = 4, lowEdge = .1, highEdge = .5, dist = "lognorm")
rec[i] <- fullTest(dat$Y, 1:p, K = 4, bs = 200)
}
hist(rec)
mean(rec < .05)
mean(rec < .1)
fullTest <- function(Y, ord, K = 4, bs = 200){
n <- dim(Y)[1]
p <- dim(Y)[2]
.fullTestHelper <- function(i){
out <- singleTestcpp(X = Y[, ord[1:(i-1)], drop = F], Y = Y[, ord[i], drop = F], K = K, bs = bs)
out$nullDist <- out$nullDist * sqrt(n / (n - i + 1))
return(out)
}
out <- lapply(2:p, .fullTestHelper)
nullDist <- do.call("cbind", lapply(out, function(x){x$nullDist}))
testStats <- do.call("cbind", lapply(out, function(x){x$test}))
pVal <- mean(apply(nullDist, MAR = 1, max) > max(testStats))
return(pVal)
}
fullTestNonAdj <- function(Y, ord, K = 4, bs = 200){
n <- dim(Y)[1]
p <- dim(Y)[2]
.fullTestHelper <- function(i){
out <- singleTestcpp(X = Y[, ord[1:(i-1)], drop = F], Y = Y[, ord[i], drop = F], K = K, bs = bs)
# out$nullDist <- out$nullDist * sqrt(n / (n - i + 1))
return(out)
}
out <- lapply(2:p, .fullTestHelper)
nullDist <- do.call("cbind", lapply(out, function(x){x$nullDist}))
testStats <- do.call("cbind", lapply(out, function(x){x$test}))
pVal <- mean(apply(nullDist, MAR = 1, max) > max(testStats))
return(pVal)
}
library(cdcs)
p <- 10
n <- 100
rec <- matrix(0, 1000, 2)
for(i in 1:1000){
cat(i)
cat("\n")
dat <- rDAG(p, n, maxInDegree = 4, lowEdge = .1, highEdge = .5, dist = "lognorm")
rec[i, 1] <- fullTest(dat$Y, 1:p, K = 4, bs = 200)
rec[i, 2] <- fullTestNonAdj(dat$Y, 1:p, K = 4, bs = 200)
}
hist(rec)
colMeans(rec < .05)
colMeans(rec < .1)
fullTest <- function(Y, ord, K = 4, bs = 200){
n <- dim(Y)[1]
p <- dim(Y)[2]
.fullTestHelper <- function(i){
out <- singleTestcpp(X = Y[, ord[1:(i-1)], drop = F], Y = Y[, ord[i], drop = F], K = K, bs = bs)
out$nullDist <- out$nullDist * sqrt(n / (n - i + 1))
return(out)
}
out <- lapply(2:p, .fullTestHelper)
nullDist <- do.call("cbind", lapply(out, function(x){x$nullDist}))
testStats <- do.call("cbind", lapply(out, function(x){x$test}))
pVal <- mean(apply(nullDist, MAR = 1, max) > max(testStats))
return(pVal)
}
fullTestNonAdj <- function(Y, ord, K = 4, bs = 200){
n <- dim(Y)[1]
p <- dim(Y)[2]
.fullTestHelper <- function(i){
out <- singleTestcpp(X = Y[, ord[1:(i-1)], drop = F], Y = Y[, ord[i], drop = F], K = K, bs = bs)
# out$nullDist <- out$nullDist * sqrt(n / (n - i + 1))
return(out)
}
out <- lapply(2:p, .fullTestHelper)
nullDist <- do.call("cbind", lapply(out, function(x){x$nullDist}))
testStats <- do.call("cbind", lapply(out, function(x){x$test}))
pVal <- mean(apply(nullDist, MAR = 1, max) > max(testStats))
return(pVal)
}
library(cdcs)
p <- 10
n <- 50
rec <- matrix(0, 1000, 2)
for(i in 1:1000){
cat(i)
cat("\n")
dat <- rDAG(p, n, maxInDegree = 4, lowEdge = .1, highEdge = .5, dist = "lognorm")
rec[i, 1] <- fullTest(dat$Y, 1:p, K = 4, bs = 200)
rec[i, 2] <- fullTestNonAdj(dat$Y, 1:p, K = 4, bs = 200)
}
hist(rec)
colMeans(rec < .05)
colMeans(rec < .1)
fullTest <- function(Y, ord, K = 4, bs = 200){
n <- dim(Y)[1]
p <- dim(Y)[2]
.fullTestHelper <- function(i){
out <- singleTestcpp(X = Y[, ord[1:(i-1)], drop = F], Y = Y[, ord[i], drop = F], K = K, bs = bs)
out$nullDist <- out$nullDist * sqrt(n / (n - i + 1))
return(out)
}
out <- lapply(2:p, .fullTestHelper)
nullDist <- do.call("cbind", lapply(out, function(x){x$nullDist}))
testStats <- do.call("cbind", lapply(out, function(x){x$test}))
pVal <- mean(apply(nullDist, MAR = 1, max) > max(testStats))
return(pVal)
}
fullTestNonAdj <- function(Y, ord, K = 4, bs = 200){
n <- dim(Y)[1]
p <- dim(Y)[2]
.fullTestHelper <- function(i){
out <- singleTestcpp(X = Y[, ord[1:(i-1)], drop = F], Y = Y[, ord[i], drop = F], K = K, bs = bs)
# out$nullDist <- out$nullDist * sqrt(n / (n - i + 1))
return(out)
}
out <- lapply(2:p, .fullTestHelper)
nullDist <- do.call("cbind", lapply(out, function(x){x$nullDist}))
testStats <- do.call("cbind", lapply(out, function(x){x$test}))
pVal <- mean(apply(nullDist, MAR = 1, max) > max(testStats))
return(pVal)
}
library(cdcs)
p <- 10
n <- 25
rec <- matrix(0, 1000, 2)
for(i in 1:1000){
cat(i)
cat("\n")
dat <- rDAG(p, n, maxInDegree = 4, lowEdge = .1, highEdge = .5, dist = "lognorm")
rec[i, 1] <- fullTest(dat$Y, 1:p, K = 4, bs = 200)
rec[i, 2] <- fullTestNonAdj(dat$Y, 1:p, K = 4, bs = 200)
}
hist(rec)
colMeans(rec < .05)
colMeans(rec < .1)
fullTest <- function(Y, ord, K = 4, bs = 200){
n <- dim(Y)[1]
p <- dim(Y)[2]
.fullTestHelper <- function(i){
out <- singleTestcpp(X = Y[, ord[1:(i-1)], drop = F], Y = Y[, ord[i], drop = F], K = K, bs = bs)
out$nullDist <- out$nullDist * sqrt(n / (n - i + 1))
return(out)
}
out <- lapply(2:p, .fullTestHelper)
nullDist <- do.call("cbind", lapply(out, function(x){x$nullDist}))
testStats <- do.call("cbind", lapply(out, function(x){x$test}))
pVal <- mean(apply(nullDist, MAR = 1, max) > max(testStats))
return(pVal)
}
fullTestNonAdj <- function(Y, ord, K = 4, bs = 200){
n <- dim(Y)[1]
p <- dim(Y)[2]
.fullTestHelper <- function(i){
out <- singleTestcpp(X = Y[, ord[1:(i-1)], drop = F], Y = Y[, ord[i], drop = F], K = K, bs = bs)
# out$nullDist <- out$nullDist * sqrt(n / (n - i + 1))
return(out)
}
out <- lapply(2:p, .fullTestHelper)
nullDist <- do.call("cbind", lapply(out, function(x){x$nullDist}))
testStats <- do.call("cbind", lapply(out, function(x){x$test}))
pVal <- mean(apply(nullDist, MAR = 1, max) > max(testStats))
return(pVal)
}
library(cdcs)
p <- 10
n <- 15
rec <- matrix(0, 1000, 2)
for(i in 1:1000){
cat(i)
cat("\n")
dat <- rDAG(p, n, maxInDegree = 4, lowEdge = .1, highEdge = .5, dist = "lognorm")
rec[i, 1] <- fullTest(dat$Y, 1:p, K = 4, bs = 200)
rec[i, 2] <- fullTestNonAdj(dat$Y, 1:p, K = 4, bs = 200)
}
hist(rec)
colMeans(rec < .05)
colMeans(rec < .1)
fullTest <- function(Y, ord, K = 4, bs = 200){
n <- dim(Y)[1]
p <- dim(Y)[2]
.fullTestHelper <- function(i){
out <- singleTestcpp(X = Y[, ord[1:(i-1)], drop = F], Y = Y[, ord[i], drop = F], K = K, bs = bs)
out$nullDist <- out$nullDist * sqrt(n / (n - i + 1))
return(out)
}
out <- lapply(2:p, .fullTestHelper)
nullDist <- do.call("cbind", lapply(out, function(x){x$nullDist}))
testStats <- do.call("cbind", lapply(out, function(x){x$test}))
pVal <- mean(apply(nullDist, MAR = 1, max) > max(testStats))
return(pVal)
}
fullTestNonAdj <- function(Y, ord, K = 4, bs = 200){
n <- dim(Y)[1]
p <- dim(Y)[2]
.fullTestHelper <- function(i){
out <- singleTestcpp(X = Y[, ord[1:(i-1)], drop = F], Y = Y[, ord[i], drop = F], K = K, bs = bs)
# out$nullDist <- out$nullDist * sqrt(n / (n - i + 1))
return(out)
}
out <- lapply(2:p, .fullTestHelper)
nullDist <- do.call("cbind", lapply(out, function(x){x$nullDist}))
testStats <- do.call("cbind", lapply(out, function(x){x$test}))
pVal <- mean(apply(nullDist, MAR = 1, max) > max(testStats))
return(pVal)
}
library(cdcs)
p <- 10
n <- 50
rec <- matrix(0, 1000, 2)
for(i in 1:1000){
cat(i)
cat("\n")
dat <- rDAG(p, n, maxInDegree = 4, lowEdge = .1, highEdge = .5, dist = "lognorm")
rec[i, 1] <- fullTest(dat$Y, 1:p, K = 4, bs = 200)
rec[i, 2] <- fullTestNonAdj(dat$Y, 1:p, K = 4, bs = 200)
}
hist(rec)
colMeans(rec < .05)
colMeans(rec < .1)
p <- 100
n <- 200
rec <- matrix(0, 1000, 2)
for(i in 1:1000){
cat(i)
cat("\n")
dat <- rDAG(p, n, maxInDegree = 4, lowEdge = .1, highEdge = .5, dist = "lognorm")
rec[i, 1] <- fullTest(dat$Y, 1:p, K = 4, bs = 200)
rec[i, 2] <- fullTestNonAdj(dat$Y, 1:p, K = 4, bs = 200)
}
hist(rec)
colMeans(rec < .05)
colMeans(rec < .1)
fullTest <- function(Y, ord, K = 4, bs = 200){
n <- dim(Y)[1]
p <- dim(Y)[2]
.fullTestHelper <- function(i){
out <- singleTestcpp(X = Y[, ord[1:(i-1)], drop = F], Y = Y[, ord[i], drop = F], K = K, bs = bs)
out$nullDist <- out$nullDist * sqrt(n / (n - i + 1))
return(out)
}
out <- lapply(2:p, .fullTestHelper)
nullDist <- do.call("cbind", lapply(out, function(x){x$nullDist}))
testStats <- do.call("cbind", lapply(out, function(x){x$test}))
pVal <- mean(apply(nullDist, MAR = 1, max) > max(testStats))
return(pVal)
}
fullTestNonAdj <- function(Y, ord, K = 4, bs = 200){
n <- dim(Y)[1]
p <- dim(Y)[2]
.fullTestHelper <- function(i){
out <- singleTestcpp(X = Y[, ord[1:(i-1)], drop = F], Y = Y[, ord[i], drop = F], K = K, bs = bs)
# out$nullDist <- out$nullDist * sqrt(n / (n - i + 1))
return(out)
}
out <- lapply(2:p, .fullTestHelper)
nullDist <- do.call("cbind", lapply(out, function(x){x$nullDist}))
testStats <- do.call("cbind", lapply(out, function(x){x$test}))
pVal <- mean(apply(nullDist, MAR = 1, max) > max(testStats))
return(pVal)
}
library(cdcs)
p <- 75
n <- 150
rec <- matrix(0, 1000, 2)
for(i in 1:1000){
cat(i)
cat("\n")
dat <- rDAG(p, n, maxInDegree = 4, lowEdge = .1, highEdge = .5, dist = "lognorm")
rec[i, 1] <- fullTest(dat$Y, 1:p, K = 4, bs = 200)
rec[i, 2] <- fullTestNonAdj(dat$Y, 1:p, K = 4, bs = 200)
}
hist(rec)
colMeans(rec < .05)
colMeans(rec < .1)
fullTest <- function(Y, ord, K = 4, bs = 200){
n <- dim(Y)[1]
p <- dim(Y)[2]
.fullTestHelper <- function(i){
out <- singleTestcpp(X = Y[, ord[1:(i-1)], drop = F], Y = Y[, ord[i], drop = F], K = K, bs = bs)
out$nullDist <- out$nullDist * sqrt(n / (n - i + 1))
return(out)
}
out <- lapply(2:p, .fullTestHelper)
nullDist <- do.call("cbind", lapply(out, function(x){x$nullDist}))
testStats <- do.call("cbind", lapply(out, function(x){x$test}))
pVal <- mean(apply(nullDist, MAR = 1, max) > max(testStats))
return(pVal)
}
fullTestNonAdj <- function(Y, ord, K = 4, bs = 200){
n <- dim(Y)[1]
p <- dim(Y)[2]
.fullTestHelper <- function(i){
out <- singleTestcpp(X = Y[, ord[1:(i-1)], drop = F], Y = Y[, ord[i], drop = F], K = K, bs = bs)
# out$nullDist <- out$nullDist * sqrt(n / (n - i + 1))
return(out)
}
out <- lapply(2:p, .fullTestHelper)
nullDist <- do.call("cbind", lapply(out, function(x){x$nullDist}))
testStats <- do.call("cbind", lapply(out, function(x){x$test}))
pVal <- mean(apply(nullDist, MAR = 1, max) > max(testStats))
return(pVal)
}
library(cdcs)
p <- 20
n <- 100
rec <- matrix(0, 1000, 4)
for(i in 1:1000){
cat(i)
cat("\n")
dat <- rDAG(p, n, maxInDegree = 4, lowEdge = .1, highEdge = .5, dist = "lognorm")
rec[i, 1] <- fullTest(dat$Y, 1:p, K = 4, bs = 200)
rec[i, 2] <- fullTestNonAdj(dat$Y, 1:p, K = 4, bs = 200)
rec[i, 3] <- fullTest(dat$Y, c(1:(p/2), p, (p/2 + 1):(p-1)), K = 4, bs = 200)
rec[i, 4] <- fullTestNonAdj(dat$Y, c(1:(p/2), p, (p/2 + 1):(p-1)), K = 4, bs = 200)
}
hist(rec)
colMeans(rec < .05)
colMeans(rec < .1)
dat <- rDAG(p, n, maxInDegree = 2, lowEdge = .4, highEdge = .8, dist = "lognorm")
apply(dat$Y, MAR = 2, var)
dat <- rDAG(p, n, maxInDegree = 2, lowEdge = .4, highEdge = .8, dist = "lognorm")
apply(dat$Y, MAR = 2, var)
library(cdcs)
p <- 20
n <- 200
rec <- matrix(0, 1000, 4)
for(i in 1:1000){
cat(i)
cat("\n")
dat <- rDAG(p, n, maxInDegree = 2, lowEdge = .4, highEdge = .8, dist = "lognorm")
rec[i, 1] <- fullTest(dat$Y, 1:p, K = 4, bs = 200)
rec[i, 2] <- fullTestNonAdj(dat$Y, 1:p, K = 4, bs = 200)
rec[i, 3] <- fullTest(dat$Y, c(1:(p/2), p, (p/2 + 1):(p-1)), K = 4, bs = 200)
rec[i, 4] <- fullTestNonAdj(dat$Y, c(1:(p/2), p, (p/2 + 1):(p-1)), K = 4, bs = 200)
}
hist(rec)
colMeans(rec < .05)
colMeans(rec < .1)
library(cdcs)
p <- 20
n <- 500
rec <- matrix(0, 1000, 4)
for(i in 1:1000){
cat(i)
cat("\n")
dat <- rDAG(p, n, maxInDegree = 2, lowEdge = .4, highEdge = .8, dist = "lognorm")
rec[i, 1] <- fullTest(dat$Y, 1:p, K = 4, bs = 200)
rec[i, 2] <- fullTestNonAdj(dat$Y, 1:p, K = 4, bs = 200)
rec[i, 3] <- fullTest(dat$Y, c(1:(p/2), p, (p/2 + 1):(p-1)), K = 4, bs = 200)
rec[i, 4] <- fullTestNonAdj(dat$Y, c(1:(p/2), p, (p/2 + 1):(p-1)), K = 4, bs = 200)
}
hist(rec)
colMeans(rec < .05)
colMeans(rec < .1)
hist(rec[, 1])
hist(rec[, 2])
hist(rec[, 3])
hist(rec[, 4])
p <- 20
n <- 500
dat <- rDAG(p, n, maxInDegree = p, lowEdge = .2, highEdge = .5, dist = "lognorm")
apply(dat$Y, MAR = 2, var)
p <- 50
dat <- rDAG(p, n, maxInDegree = p, lowEdge = .2, highEdge = .5, dist = "lognorm")
apply(dat$Y, MAR = 2, var)
dat <- rDAG(p, n, maxInDegree = p, lowEdge = 0, highEdge = .3, dist = "lognorm")
apply(dat$Y, MAR = 2, var)
dat <- rDAG(p, n, maxInDegree = p, lowEdge = 0, highEdge = .3, dist = "lognorm")
apply(dat$Y, MAR = 2, var)
library(cdcs)
p <- 50
n <- 500
rec <- matrix(0, 1000, 4)
for(i in 1:1000){
cat(i)
cat("\n")
dat <- rDAG(p, n, maxInDegree = p, lowEdge = 0, highEdge = .3, dist = "lognorm")
rec[i, 1] <- fullTest(dat$Y, 1:p, K = 4, bs = 200)
rec[i, 2] <- fullTestNonAdj(dat$Y, 1:p, K = 4, bs = 200)
rec[i, 3] <- fullTest(dat$Y, c(1:(p/2), p, (p/2 + 1):(p-1)), K = 4, bs = 200)
rec[i, 4] <- fullTestNonAdj(dat$Y, c(1:(p/2), p, (p/2 + 1):(p-1)), K = 4, bs = 200)
}
apply(dat$Y, MAR = 2, var)
hist(rec[, 1])
hist(rec[, 2])
hist(rec[, 3])
hist(rec[, 4])
colMeans(rec < .05)
colMeans(rec < .1)
library(cdcs)
p <- 20
n <- 500
rec <- matrix(0, 1000, 4)
for(i in 1:1000){
cat(i)
cat("\n")
dat <- rDAG(p, n, maxInDegree = p, lowEdge = 0, highEdge = .3, dist = "lognorm")
rec[i, 1] <- fullTest(dat$Y, 1:p, K = 4, bs = 200)
rec[i, 2] <- fullTestNonAdj(dat$Y, 1:p, K = 4, bs = 200)
rec[i, 3] <- fullTest(dat$Y, c(1:(p/2), p, p-1, (p/2 + 1):(p-2)), K = 4, bs = 200)
rec[i, 4] <- fullTestNonAdj(dat$Y, c(1:(p/2), p, p-1, (p/2 + 1):(p-2)), K = 4, bs = 200)
}
apply(dat$Y, MAR = 2, var)
hist(rec[, 1])
hist(rec[, 2])
hist(rec[, 3])
hist(rec[, 4])
colMeans(rec < .05)
colMeans(rec < .1)
dat <- rDAG(p, n, maxInDegree = p, lowEdge = 0, highEdge = .3, dist = "lognorm")
fullTest(dat$Y, 1:p, K = 4, bs = 200, dfAdj = T)
fullTest <- function(Y, ord, K = 4, bs = 200, dfAdj = T){
n <- dim(Y)[1]
p <- dim(Y)[2]
.fullTestHelper <- function(i){
out <- singleTestcpp(X = Y[, ord[1:(i-1)], drop = F], Y = Y[, ord[i], drop = F], K = K, bs = bs)
if(dfAdj){out$nullDist <- out$nullDist * sqrt(n / (n - i + 1))}
return(out)
}
out <- lapply(2:p, .fullTestHelper)
nullDist <- do.call("cbind", lapply(out, function(x){x$nullDist}))
testStats <- do.call("cbind", lapply(out, function(x){x$test}))
pVal <- mean(apply(nullDist, MAR = 1, max) > max(testStats))
return(pVal)
}
fullTest(dat$Y, 1:p, K = 4, bs = 200, dfAdj = T)
singleTestcpp(X = dat$Y[, 1:5, drop = F], Y = Y[, 6, drop = F], K = 4, bs = 200, dfAdj = T)
singleTestcpp1(X = dat$Y[, 1:5, drop = F], Y = Y[, 6, drop = F], K = 4, bs = 200, dfAdj = T)
cdcs::singleTestcpp1(X = dat$Y[, 1:5, drop = F], Y = Y[, 6, drop = F], K = 4, bs = 200, dfAdj = T)
