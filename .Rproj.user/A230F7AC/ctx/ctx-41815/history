print(outc)
print(tab)
}
if( length(unique(adj)) != length(adj) ){
print("Err! (Dupe in Adj)")
print(adj)
print(outc)
print(tab)
}
return(matrix(c(mod$coeff[ii] - mult * mod$stderr[ii], mod$coeff[ii] + mult * mod$stderr[ii]), 1, 2))
}
adj_Set
sapply(adj_Set, helper1)
alpha <- .05
sapply(adj_Set, helper1)
n <- dim(Y)[1]
sapply(adj_Set, helper1)
ci <- t(sapply(adj_Set, helper1))
intervals::interval_union(intervals::Intervals(ci))
sum(intervals::size(ci_final))
ci_final
Y
names(Y)
colnames(Y)
out <- cdcs::ci_modSelect(fama2019, 10, 12, effectType = "total", alpha = .05, scale(Y, scale = F))
out
p <- 6
n <- 1000
parent_prob <- 1/2
K <- 4
Mtrue <- 10
funcType <- "fourier"
basis <- "bspline"
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = funcType, M = Mtrue, h = h, dist = distro,
lowScale = 1/(sqrt(3) * 4), highScale = 1/(sqrt(3) * 4), noParentMult = 4)
distro <- "gamma"
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = funcType, M = Mtrue, h = h, dist = distro,
lowScale = 1/(sqrt(3) * 4), highScale = 1/(sqrt(3) * 4), noParentMult = 4)
Y <- out$Y
Y
hist(Y[,3])
# rec <- matrix(0, length(m.list), 5)
rec <- matrix(0, length(m.list) * 2, 6)
G1 <- G2 <- array(0, dim = c(n, 2 * K, p) )
for(u in 1:p){
if(basis == "poly"){
basisForU <- cdcs::getHermite(Y[, u], m.list[j])
} else if (basis == "bspline"){
basisForU <- splines::bs(Y[, u], df = m.list[j])
}
for(k in 1:K){
G1[, 2 * k - 1, u] <- scale(lm(pmax(0, Y[, u])^k ~ basisForU)$res)
G1[, 2 * k, u] <- scale(lm(pmin(0, Y[, u])^k ~ basisForU)$res)
G2[, 2 * k - 1, u] <- scale(lm(sin(Y[, u] * k / 2) ~ basisForU)$res)
G2[, 2 * k, u] <- scale(lm(cos(Y[, u] * k / 2) ~ basisForU)$res)
}
}
m.list =c(1,2,3)
G1 <- G2 <- array(0, dim = c(n, 2 * K, p) )
for(u in 1:p){
if(basis == "poly"){
basisForU <- cdcs::getHermite(Y[, u], m.list[j])
} else if (basis == "bspline"){
basisForU <- splines::bs(Y[, u], df = m.list[j])
}
for(k in 1:K){
G1[, 2 * k - 1, u] <- scale(lm(pmax(0, Y[, u])^k ~ basisForU)$res)
G1[, 2 * k, u] <- scale(lm(pmin(0, Y[, u])^k ~ basisForU)$res)
G2[, 2 * k - 1, u] <- scale(lm(sin(Y[, u] * k / 2) ~ basisForU)$res)
G2[, 2 * k, u] <- scale(lm(cos(Y[, u] * k / 2) ~ basisForU)$res)
}
}
j <- 1
G1 <- G2 <- array(0, dim = c(n, 2 * K, p) )
for(u in 1:p){
if(basis == "poly"){
basisForU <- cdcs::getHermite(Y[, u], m.list[j])
} else if (basis == "bspline"){
basisForU <- splines::bs(Y[, u], df = m.list[j])
}
for(k in 1:K){
G1[, 2 * k - 1, u] <- scale(lm(pmax(0, Y[, u])^k ~ basisForU)$res)
G1[, 2 * k, u] <- scale(lm(pmin(0, Y[, u])^k ~ basisForU)$res)
G2[, 2 * k - 1, u] <- scale(lm(sin(Y[, u] * k / 2) ~ basisForU)$res)
G2[, 2 * k, u] <- scale(lm(cos(Y[, u] * k / 2) ~ basisForU)$res)
}
}
m.list <- c(5, 10, 15)
G1 <- G2 <- array(0, dim = c(n, 2 * K, p) )
for(u in 1:p){
if(basis == "poly"){
basisForU <- cdcs::getHermite(Y[, u], m.list[j])
} else if (basis == "bspline"){
basisForU <- splines::bs(Y[, u], df = m.list[j])
}
for(k in 1:K){
G1[, 2 * k - 1, u] <- scale(lm(pmax(0, Y[, u])^k ~ basisForU)$res)
G1[, 2 * k, u] <- scale(lm(pmin(0, Y[, u])^k ~ basisForU)$res)
G2[, 2 * k - 1, u] <- scale(lm(sin(Y[, u] * k / 2) ~ basisForU)$res)
G2[, 2 * k, u] <- scale(lm(cos(Y[, u] * k / 2) ~ basisForU)$res)
}
}
time.rec <- system.time(out <- cdcs::brandAndBound_anm(Y, G1, bs =bs, withinAgg = 2,
aggType = 2, alpha = .1, pValueAgg = "tippet",
intercept = 1, verbose = F, basis = basis,
M = m.list[j]))[3]
bs <- 400
time.rec <- system.time(out <- cdcs::brandAndBound_anm(Y, G1, bs =bs, withinAgg = 2,
aggType = 2, alpha = .1, pValueAgg = "tippet",
intercept = 1, verbose = F, basis = basis,
M = m.list[j]))[3]
out
m.list
j <- 3
if(basis == "poly"){
basisForU <- cdcs::getHermite(Y[, u], m.list[j])
} else if (basis == "bspline"){
basisForU <- splines::bs(Y[, u], df = m.list[j])
}
for(k in 1:K){
G1[, 2 * k - 1, u] <- scale(lm(pmax(0, Y[, u])^k ~ basisForU)$res)
G1[, 2 * k, u] <- scale(lm(pmin(0, Y[, u])^k ~ basisForU)$res)
G2[, 2 * k - 1, u] <- scale(lm(sin(Y[, u] * k / 2) ~ basisForU)$res)
G2[, 2 * k, u] <- scale(lm(cos(Y[, u] * k / 2) ~ basisForU)$res)
}
}
if(basis == "poly"){
basisForU <- cdcs::getHermite(Y[, u], m.list[j])
} else if (basis == "bspline"){
basisForU <- splines::bs(Y[, u], df = m.list[j])
}
for(k in 1:K){
G1[, 2 * k - 1, u] <- scale(lm(pmax(0, Y[, u])^k ~ basisForU)$res)
G1[, 2 * k, u] <- scale(lm(pmin(0, Y[, u])^k ~ basisForU)$res)
G2[, 2 * k - 1, u] <- scale(lm(sin(Y[, u] * k / 2) ~ basisForU)$res)
G2[, 2 * k, u] <- scale(lm(cos(Y[, u] * k / 2) ~ basisForU)$res)
}
}
for(u in 1:p){
if(basis == "poly"){
basisForU <- cdcs::getHermite(Y[, u], m.list[j])
} else if (basis == "bspline"){
basisForU <- splines::bs(Y[, u], df = m.list[j])
}
for(k in 1:K){
G1[, 2 * k - 1, u] <- scale(lm(pmax(0, Y[, u])^k ~ basisForU)$res)
G1[, 2 * k, u] <- scale(lm(pmin(0, Y[, u])^k ~ basisForU)$res)
G2[, 2 * k - 1, u] <- scale(lm(sin(Y[, u] * k / 2) ~ basisForU)$res)
G2[, 2 * k, u] <- scale(lm(cos(Y[, u] * k / 2) ~ basisForU)$res)
}
}
time.rec <- system.time(out <- cdcs::brandAndBound_anm(Y, G1, bs =bs, withinAgg = 2,
aggType = 2, alpha = .1, pValueAgg = "tippet",
intercept = 1, verbose = F, basis = basis,
M = m.list[j]))[3]
out
dim(out)
489/ factorial(6)
time.rec <- system.time(out <- cdcs::brandAndBound_anm(Y, G2, bs =bs, withinAgg = 2,
aggType = 1, alpha = .1, pValueAgg = "tippet",
intercept = 1, verbose = F, basis = basis,
M = m.list[j]))[3]
out[1, ]
dim(out)
G2[ , 1 , 1]
hist(G2[ , 1 , 1])
sample.size <- 300
rep.runs <- 15
n.list <- c(2000)
d.list <- c("laplace")
func.list <- c("poly", "fourier", "GP")
basis.list <- c("poly", "bspline")
k.list <- c(2, 5, 10, 15)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list, k.list)
runInd <- 1
outTab <- data.frame(k = param.grid[runInd, 5],
read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl/nl_exp_",runInd, ".csv", sep = ""))[,-1])
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl/nl_exp_",runInd, ".csv", sep = ""))){
temp <- data.frame(k = param.grid[runInd, 5],
read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl/nl_exp_",runInd, ".csv", sep = ""))[,-1])
outTab <- rbind(outTab, temp)
} else {
missing <- c(missing, runInd)
}
}
missing
resTab <- aggregate(cbind(size, cover, ancest, time) ~ testFunc + distro + m + k+ basis + funcType, dat = outTab, FUN = mean)
resTab$size <- resTab$size / factorial(6)
resTab$cover <- round(resTab$cover, 3)
resTab$size <- round(resTab$size, 2)
resTab[which(resTab$cover > .8), ]
resTab
resTab[which(resTab$cover > .8), ]
resTab[which(resTab$cover > .8), ]
resTab[which(resTab$testFunc == "G2" & resTab$basis == "bspline"& resTab$funcType == "fourier"), ]
resTab[which(resTab$testFunc == "G2" & resTab$basis == "bspline"& resTab$funcType == "fourier" & resTab$m == 30), ]
resTab[which(resTab$testFunc == "G1" & resTab$basis == "bspline"& resTab$funcType == "fourier" & resTab$m == 30), ]
resTab[which(resTab$testFunc == "G1" & resTab$basis == "bspline"& resTab$funcType == "poly" & resTab$m == 30), ]
resTab[which(resTab$testFunc == "G2" & resTab$basis == "bspline"& resTab$funcType == "poly" & resTab$m == 30), ]
resTab[which(resTab$testFunc == "G2" & resTab$basis == "poly"& resTab$funcType == "poly" & resTab$m == 30), ]
resTab[which(resTab$testFunc == "G2" & resTab$basis == "poly"& resTab$funcType == "poly"), ]
resTab[which(resTab$testFunc == "G2" & resTab$basis == "bspline"& resTab$funcType == "poly"), ]
resTab[which(resTab$testFunc == "G1" & resTab$basis == "bspline"& resTab$funcType == "poly"), ]
runInd <- 1
outTab <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))[,-1]
outTab
runInd <- 1
outTab <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))[,-1]
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))){
if(runInd > 40){
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))
} else {
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))[,-1]
}
outTab <- rbind(outTab, temp)
} else {
missing <- c(missing, runInd)
}
}
sample.size <- 500
rep.runs <- 25
n.list <- c(500, 1000, 2500, 5000)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
### Param grid Size 480
runInd <- 1
outTab <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))[,-1]
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))){
if(runInd > 40){
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))
} else {
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))[,-1]
}
outTab <- rbind(outTab, temp)
} else {
missing <- c(missing, runInd)
}
}
sample.size <- 500
rep.runs <- 25
n.list <- c(500, 1000, 2500, 5000)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
sample.size <- 500
rep.runs <- 25
n.list <- c(500, 1000, 2500, 5000)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
### Param grid Size 480
runInd <- 1
outTab <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))[,-1]
missing <- c()
nrow(param.grid)
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))){
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))[,-1]
outTab <- rbind(outTab, temp)
} else {
missing <- c(missing, runInd)
}
}
missing
outTab
names(outTab)
resTab <- aggregate(cbind(size, cover, pointEst) ~ distro + n, data = outTab)
resTab <- aggregate(cbind(size, cover, pointEst) ~ distro + n, FUN = mean, data = outTab)
resTab
unique(outTab$n)
unique(outTab$p)
resTab <- aggregate(cbind(size, cover, pointEst) ~ distro + n, FUN = mean, data = outTab)
resTab$size <- resTab$size / factorial(10)
resTab
resTabTrig <- aggregate(cbind(size, cover, pointEst) ~ distro + n, FUN = mean, data = outTab)
resTabTrig$size <- resTab$size / factorial(10)
sample.size <- 500
rep.runs <- 25
n.list <- c(500, 1000, 2500, 5000)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
### Param grid Size 400
# ### Param grid Size 400
p <- 10
runInd <- 1
outTab <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))[,-1]
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))){
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))[,-1]N
runInd <- 1
outTab <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))[,-1]
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))){
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))[,-1]N
runInd <- 1
outTab <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))[,-1]
sample.size <- 500
rep.runs <- 25
n.list <- c(500, 1000, 2500, 5000)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
runInd <- 1
outTab <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))[,-1]
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))){
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))[,-1]N
runInd <- 1
outTab <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))[,-1]
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))){
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))[,-1]N
runInd <- 1
outTab <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))[,-1]
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))){
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))[,-1]
outTab <- rbind(outTab, temp)
} else {
missing <- c(missing, runInd)
}
}
resTab <- aggregate(cbind(size, cover, ancest, pointEst, time) ~ n + distro, dat = outTab, FUN = mean)
resTab[,3] <- resTab[,3] / factorial(10)
resTab
resTab
resTabTrig
sample.size <- 500
rep.runs <- 25
n.list <- c(500, 1000, 2500, 5000)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
### Param grid Size 480
runInd <- 1
outTabTrig <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))[,-1]
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))){
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))[,-1]
outTabTrig <- rbind(outTab, temp)
} else {
missing <- c(missing, runInd)
}
}
resTabTrig <- aggregate(cbind(size, cover, pointEst) ~ n + distro,
FUN = mean, data = outTabTrig)
resTabTrig$size <- resTab$size / factorial(10)
resTabTrig
sample.size <- 500
rep.runs <- 25
n.list <- c(500, 1000, 2500, 5000)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
### Param grid Size 480
runInd <- 1
outTabTrig <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))[,-1]
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))){
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))[,-1]
outTabTrig <- rbind(outTab, temp)
} else {
missing <- c(missing, runInd)
}
}
resTabTrig <- aggregate(cbind(size, cover, pointEst) ~ n + distro,
FUN = mean, data = outTabTrig)
resTabTrig$size <- resTabTrig$size / factorial(10)
sample.size <- 500
rep.runs <- 25
n.list <- c(500, 1000, 2500, 5000)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
### Param grid Size 400
# ### Param grid Size 400
p <- 10
runInd <- 1
outTab <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))[,-1]
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))){
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))[,-1]
outTab <- rbind(outTab, temp)
} else {
missing <- c(missing, runInd)
}
}
#
resTab <- aggregate(cbind(size, cover, ancest, pointEst, time) ~ n + distro, dat = outTab, FUN = mean)
resTab$size <- resTab$size / factorial(10)
resTab
resTab
resTabTrig
resTab
resTabTrig
sample.size <- 500
rep.runs <- 25
n.list <- c(500, 1000, 2500, 5000)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
### Param grid Size 480
runInd <- 1
outTabTrig <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))[,-1]
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))){
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))[,-1]
outTabTrig <- rbind(outTab, temp)
} else {
missing <- c(missing, runInd)
}
}
resTabTrig <- aggregate(cbind(size, cover, pointEst) ~ n + distro,
FUN = mean, data = outTabTrig)
resTabTrig$size <- resTabTrig$size / factorial(10)
sample.size <- 500
rep.runs <- 25
n.list <- c(500, 1000, 2500, 5000)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
### Param grid Size 400
# ### Param grid Size 400
p <- 10
runInd <- 1
outTab <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))[,-1]
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))){
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))[,-1]
outTab <- rbind(outTab, temp)
} else {
missing <- c(missing, runInd)
}
}
#
resTab <- aggregate(cbind(size, cover, ancest, pointEst, time) ~ n + distro, dat = outTab, FUN = mean)
resTab$size <- resTab$size / factorial(10)
resTab
sample.size <- 500
rep.runs <- 25
n.list <- c(500, 1000, 2500, 5000)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
### Param grid Size 400
# ### Param grid Size 400
p <- 10
runInd <- 1
outTab <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))[,-1]
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))){
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))[,-1]
outTab <- rbind(outTab, temp)
} else {
missing <- c(missing, runInd)
}
}
sample.size <- 500
rep.runs <- 25
n.list <- c(500, 1000, 2500, 5000)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
### Param grid Size 400
# ### Param grid Size 400
p <- 10
runInd <- 1
outTab <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))[,-1]
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))){
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_",runInd, ".csv", sep = ""))[,-1]
outTab <- rbind(outTab, temp)
} else {
missing <- c(missing, runInd)
}
}
resTab <- aggregate(cbind(size, cover, ancest, pointEst, time) ~ n + distro, dat = outTab, FUN = mean)
resTab$size <- resTab$size / factorial(10)
sample.size <- 500
rep.runs <- 25
n.list <- c(500, 1000, 2500, 5000)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
### Param grid Size 480
runInd <- 1
outTabTrig <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))[,-1]
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))){
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_",runInd, ".csv", sep = ""))[,-1]
outTabTrig <- rbind(outTab, temp)
} else {
missing <- c(missing, runInd)
}
}
resTabTrig <- aggregate(cbind(size, cover, pointEst) ~ n + distro,
FUN = mean, data = outTabTrig)
resTabTrig$size <- resTabTrig$size / factorial(10)
resTabTrig
resTab
resTab
resTabTrig
