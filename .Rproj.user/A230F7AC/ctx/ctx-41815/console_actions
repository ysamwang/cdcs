{
    "type": [
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2
    ],
    "data": [
        "\nR version 4.3.2 (2023-10-31) -- \"Eye Holes\"\nCopyright (C) 2023 The R Foundation for Statistical Computing\nPlatform: x86_64-pc-linux-gnu (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "runInd <- 1",
        "> ",
        "outTab <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "> ",
        "outTab",
        "    p   n distro    size cover     ancest     time pointEst\n1  10 500   unif 3573600     1 0.00000000 3864.035        0\n2  10 500   unif 1893028     0 0.00000000 2190.608        0\n3  10 500   unif 2747536     1 0.00000000 2645.688        0\n4  10 500   unif 1285296     1 0.00000000 1273.009        0\n5  10 500   unif 2901316     1 0.00000000 3185.772        0\n6  10 500   unif 2563440     1 0.00000000 2688.753        1\n7  10 500   unif 1632268     0 0.00000000 1792.574        0\n8  10 500   unif 2355856     1 0.00000000",
        " 2640.744        0\n9  10 500   unif 2121504     1 0.00000000 2284.661        1\n10 10 500   unif 3401520     1 0.00000000 3543.046        0\n11 10 500   unif 2442450     1 0.00000000 2432.196        1\n12 10 500   unif  802066     1 0.02222222 1296.469        0\n13 10 500   unif 2152622     1 0.00000000 2363.222        1\n14 10 500   unif 3375504     1 0.00000000 3586.070        0\n15 10 500   unif 2916860     1 0.00000000 3202.263        0\n16 10 500   unif 1110768     1 0.00000000 1548.436        0\n17 10 500   unif",
        "  777544     1 0.00000000 1241.852        0\n18 10 500   unif 3118272     1 0.00000000 3199.400        0\n19 10 500   unif 2115780     1 0.00000000 2838.308        0\n20 10 500   unif 3169224     0 0.00000000 3312.638        0\n21 10 500   unif 2950800     1 0.00000000 3013.596        0\n22 10 500   unif 3126240     1 0.00000000 3452.726        1\n23 10 500   unif 1604160     1 0.02222222 2120.363        0\n24 10 500   unif 1139638     1 0.00000000 1821.924        0\n25 10 500   unif 2081320     0 0.00000000 2525.827",
        "        0\n",
        "> ",
        "runInd <- 1",
        "> ",
        "outTab <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "> ",
        "missing <- c()",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "  if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "    if(runInd > 40){",
        "+ ",
        "      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))",
        "+ ",
        "    } else {",
        "+ ",
        "      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "+ ",
        "    }",
        "+ ",
        "",
        "+ ",
        "    outTab <- rbind(outTab, temp)",
        "+ ",
        "  } else {",
        "+ ",
        "    missing <- c(missing, runInd)",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "}",
        "Error: object 'param.grid' not found\n",
        "> ",
        "sample.size <- 500",
        "> ",
        "rep.runs <- 25",
        "> ",
        "n.list <- c(500, 1000, 2500, 5000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\", \"mixed\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "### Param grid Size 480",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "runInd <- 1",
        "> ",
        "outTab <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "> ",
        "missing <- c()",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "  if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "    if(runInd > 40){",
        "+ ",
        "      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))",
        "+ ",
        "    } else {",
        "+ ",
        "      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "+ ",
        "    }",
        "+ ",
        "",
        "+ ",
        "    outTab <- rbind(outTab, temp)",
        "+ ",
        "  } else {",
        "+ ",
        "    missing <- c(missing, runInd)",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "}",
        "Error in rbind(deparse.level, ...) : \n  numbers of columns of arguments do not match\n",
        "> ",
        "sample.size <- 500",
        "> ",
        "rep.runs <- 25",
        "> ",
        "n.list <- c(500, 1000, 2500, 5000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\", \"mixed\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "sample.size <- 500",
        "> ",
        "rep.runs <- 25",
        "> ",
        "n.list <- c(500, 1000, 2500, 5000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\", \"mixed\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "### Param grid Size 480",
        "> ",
        "runInd <- 1",
        "> ",
        "outTab <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "> ",
        "missing <- c()",
        "> ",
        "nrow(param.grid)",
        "[1] 480\n",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "  if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "+ ",
        "      outTab <- rbind(outTab, temp)",
        "+ ",
        "  } else {",
        "+ ",
        "    missing <- c(missing, runInd)",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "}",
        "> ",
        "missing",
        "NULL\n",
        "> ",
        "outTab",
        "     p    n distro    size cover\n1   10  500   unif 3573600     1\n2   10  500   unif 1893028     0\n3   10  500   unif 2747536     1\n4   10  500   unif 1285296     1\n5   10  500   unif 2901316     1\n6   10  500   unif 2563440     1\n7   10  500   unif 1632268     0\n8   10  500   unif 2355856     1\n9   10  500   unif 2121504     1\n10  10  500   unif 3401520     1\n11  10  500   unif 2442450     1\n12  10  500   unif  802066     1\n13  10  500   unif 2152622     1\n14  10  500   unif 3375504     1\n15  10  500   unif",
        " 2916860     1\n16  10  500   unif 1110768     1\n17  10  500   unif  777544     1\n18  10  500   unif 3118272     1\n19  10  500   unif 2115780     1\n20  10  500   unif 3169224     0\n21  10  500   unif 2950800     1\n22  10  500   unif 3126240     1\n23  10  500   unif 1604160     1\n24  10  500   unif 1139638     1\n25  10  500   unif 2081320     0\n26  10 1000   unif  461000     1\n27  10 1000   unif  379886     1\n28  10 1000   unif  820200     1\n29  10 1000   unif  985709     1\n30  10 1000   unif 2332668     1\n31 ",
        " 10 1000   unif 1611552     1\n32  10 1000   unif 1751232     1\n33  10 1000   unif  693000     1\n34  10 1000   unif 1902936     1\n35  10 1000   unif  231500     1\n36  10 1000   unif  629856     1\n37  10 1000   unif  435180     1\n38  10 1000   unif  292508     1\n39  10 1000   unif 1101804     1\n40  10 1000   unif 1801912     1\n41  10 1000   unif  455072     1\n42  10 1000   unif  779346     1\n43  10 1000   unif 2150768     1\n44  10 1000   unif 1980288     1\n45  10 1000   unif 1567344     1\n46  10 1000   unif 2155056",
        "     1\n47  10 1000   unif  270828     1\n48  10 1000   unif  954606     1\n49  10 1000   unif  640948     1\n50  10 1000   unif 1725516     1\n51  10 2500   unif 1489964     1\n52  10 2500   unif   78756     1\n53  10 2500   unif  428284     1\n54  10 2500   unif   15692     1\n55  10 2500   unif  382496     1\n56  10 2500   unif  121000     1\n57  10 2500   unif  142516     0\n58  10 2500   unif   87676     0\n59  10 2500   unif  178095     1\n60  10 2500   unif 2266308     1\n61  10 2500   unif  143450     0\n62  10 2500",
        "   unif  254493     1\n63  10 2500   unif  255450     0\n64  10 2500   unif   93430     1\n65  10 2500   unif  195120     1\n66  10 2500   unif  947580     1\n67  10 2500   unif  205938     1\n68  10 2500   unif  292934     1\n69  10 2500   unif  408684     1\n70  10 2500   unif  496584     1\n71  10 2500   unif 1624476     1\n72  10 2500   unif  162228     0\n73  10 2500   unif  340748     1\n74  10 2500   unif 2523628     1\n75  10 2500   unif  189445     1\n76  10 5000   unif   23970     1\n77  10 5000   unif   19800     1",
        "\n78  10 5000   unif  478904     0\n79  10 5000   unif   34692     1\n80  10 5000   unif   99591     1\n81  10 5000   unif  220960     1\n82  10 5000   unif  403086     1\n83  10 5000   unif    5018     1\n84  10 5000   unif  757554     1\n85  10 5000   unif  157459     1\n86  10 5000   unif  328514     1\n87  10 5000   unif   13025     1\n88  10 5000   unif  964094     0\n89  10 5000   unif  262920     1\n90  10 5000   unif  319168     1\n91  10 5000   unif  136268     1\n92  10 5000   unif  319594     1\n93  10 5000   unif",
        "   14492     1\n94  10 5000   unif  220520     1\n95  10 5000   unif  296058     1\n96  10 5000   unif  107950     1\n97  10 5000   unif  102104     1\n98  10 5000   unif    3846     1\n99  10 5000   unif  167004     1\n100 10 5000   unif  257040     1\n101 10  500   unif 2350968     1\n102 10  500   unif  219957     1\n103 10  500   unif 1157024     1\n104 10  500   unif 1814400     1\n105 10  500   unif 1802464     1\n106 10  500   unif 3553920     1\n107 10  500   unif 1119946     1\n108 10  500   unif 3384000     1\n109",
        " 10  500   unif 3558240     1\n110 10  500   unif  830752     1\n111 10  500   unif 1408774     1\n112 10  500   unif 2594256     1\n113 10  500   unif 1565662     1\n114 10  500   unif  751956     1\n115 10  500   unif 3123648     1\n116 10  500   unif 2117496     1\n117 10  500   unif 1830988     1\n118 10  500   unif 3500640     1\n119 10  500   unif 2858712     1\n120 10  500   unif 2285208     1\n121 10  500   unif 2751072     1\n122 10  500   unif 2226864     1\n123 10  500   unif 3013056     1\n124 10  500   unif 1663372",
        "     1\n125 10  500   unif 2290864     1\n        ancest     time pointEst\n1   0.00000000 3864.035        0\n2   0.00000000 2190.608        0\n3   0.00000000 2645.688        0\n4   0.00000000 1273.009        0\n5   0.00000000 3185.772        0\n6   0.00000000 2688.753        1\n7   0.00000000 1792.574        0\n8   0.00000000 2640.744        0\n9   0.00000000 2284.661        1\n10  0.00000000 3543.046        0\n11  0.00000000 2432.196        1\n12  0.02222222 1296.469        0\n13  0.00000000 2363.222        1\n14  0.00000000",
        " 3586.070        0\n15  0.00000000 3202.263        0\n16  0.00000000 1548.436        0\n17  0.00000000 1241.852        0\n18  0.00000000 3199.400        0\n19  0.00000000 2838.308        0\n20  0.00000000 3312.638        0\n21  0.00000000 3013.596        0\n22  0.00000000 3452.726        1\n23  0.02222222 2120.363        0\n24  0.00000000 1821.924        0\n25  0.00000000 2525.827        0\n26  0.00000000 1252.698        0\n27  0.00000000  723.651        0\n28  0.00000000 1268.413        0\n29  0.00000000 1406.703        0",
        "\n30  0.00000000 3115.225        0\n31  0.00000000 2548.914        0\n32  0.00000000 2327.058        0\n33  0.00000000 1232.789        0\n34  0.00000000 2476.215        1\n35  0.06666667  434.155        0\n36  0.02222222 1204.394        0\n37  0.04444444  963.538        0\n38  0.06666667  625.641        0\n39  0.02222222 1749.225        0\n40  0.00000000 2814.922        0\n41  0.00000000  838.845        0\n42  0.04444444 1417.882        0\n43  0.00000000 2410.499        0\n44  0.00000000 2615.846        0\n45  0.02222222 2299.903",
        "        0\n46  0.00000000 2449.967        1\n47  0.06666667  890.985        0\n48  0.02222222 1474.777        1\n49  0.02222222 1842.927        0\n50  0.00000000 2108.356        0\n51  0.00000000 3318.825        0\n52  0.13333333  649.374        0\n53  0.02222222 1262.496        1\n54  0.17777778  556.780        0\n55  0.02222222 1217.480        0\n56  0.02222222  493.095        0\n57  0.06666667  804.926        0\n58  0.11111111  638.233        0\n59  0.11111111  730.594        1\n60  0.00000000 3616.155        0\n61  0.04444444",
        "  675.071        0\n62  0.04444444 1114.564        0\n63  0.04444444 1038.720        0\n64  0.15555556  757.950        0\n65  0.08888889  769.910        0\n66  0.04444444 2181.705        0\n67  0.04444444  752.125        0\n68  0.02222222 1089.708        0\n69  0.04444444 1472.835        0\n70  0.02222222 1493.092        0\n71  0.02222222 3389.306        1\n72  0.06666667 1293.028        0\n73  0.02222222 1953.669        0\n74  0.00000000 4050.207        0\n75  0.08888889  744.886        0\n76  0.15555556  953.929        1",
        "\n77  0.22222222 1032.446        0\n78  0.04444444 2018.303        0\n79  0.15555556  726.425        0\n80  0.06666667 1250.360        1\n81  0.13333333 1291.781        0\n82  0.06666667 1357.097        0\n83  0.33333333 1009.007        1\n84  0.04444444 2172.319        0\n85  0.11111111 1243.568        0\n86  0.04444444 1100.360        0\n87  0.24444444  958.533        0\n88  0.02222222 2708.366        1\n89  0.11111111 1614.498        0\n90  0.04444444 2085.385        0\n91  0.13333333  925.378        0\n92  0.04444444 1264.546",
        "        1\n93  0.22222222  635.688        0\n94  0.08888889 1271.051        0\n95  0.06666667 1363.033        0\n96  0.06666667  988.973        0\n97  0.11111111 1252.835        1\n98  0.42222222  828.651        0\n99  0.08888889 1328.976        0\n100 0.08888889 1341.079        1\n101 0.00000000 3764.406        0\n102 0.02222222  556.370        0\n103 0.00000000 2178.274        0\n104 0.02222222 3149.078        0\n105 0.00000000 2918.111        1\n106 0.00000000 4940.011        1\n107 0.00000000 1328.731        0\n108 0.00000000",
        " 5304.766        0\n109 0.00000000 4372.998        0\n110 0.00000000 1079.655        0\n111 0.00000000 1446.394        0\n112 0.00000000 2617.535        0\n113 0.02222222 2918.277        0\n114 0.00000000 1899.360        0\n115 0.00000000 4803.200        0\n116 0.00000000 3592.144        0\n117 0.00000000 2366.975        0\n118 0.00000000 3418.574        0\n119 0.00000000 4351.066        0\n120 0.00000000 3403.371        0\n121 0.00000000 3018.215        1\n122 0.00000000 3439.898        0\n123 0.00000000 4058.669        0",
        "\n124 0.00000000 2760.285        0\n125 0.00000000 2312.508        1\n [ reached 'max' / getOption(\"max.print\") -- omitted 11875 rows ]\n",
        "> ",
        "names(outTab)",
        "[1] \"p\"        \"n\"       \n[3] \"distro\"   \"size\"    \n[5] \"cover\"    \"ancest\"  \n[7] \"time\"     \"pointEst\"\n",
        "> ",
        "resTab <- aggregate(cbind(size, cover, pointEst) ~ distro + n, data = outTab)",
        "Error in aggregate.formula(cbind(size, cover, pointEst) ~ distro + n,  : \n  argument \"FUN\" is missing, with no default\n",
        "> ",
        "resTab <- aggregate(cbind(size, cover, pointEst) ~ distro + n, FUN = mean, data = outTab)",
        "> ",
        "resTab",
        "    distro    n        size\n1    gamma  500   71301.380\n2  laplace  500 2069446.854\n3  lognorm  500   22971.065\n4    mixed  500   80999.024\n5     unif  500 2179438.544\n6  weibull  500   30929.865\n7    gamma 1000   25535.501\n8  laplace 1000 1280046.072\n9  lognorm 1000    8169.223\n10   mixed 1000   30870.527\n11    unif 1000 1265658.832\n12 weibull 1000   10160.419\n13   gamma 2500    7835.508\n14 laplace 2500  361036.288\n15 lognorm 2500    2125.878\n16   mixed 2500   10679.073\n17    unif 2500  528719.558\n18 weibull",
        " 2500    2387.193\n19   gamma 5000    4644.196\n20 laplace 5000  134235.852\n21 lognorm 5000    1368.503\n22   mixed 5000    7394.006\n23    unif 5000  225570.409\n24 weibull 5000    2096.186\n       cover  pointEst\n1  0.9220000 0.1500000\n2  0.9060000 0.1200000\n3  0.9333333 0.1777778\n4  0.9220000 0.1640000\n5  0.8920000 0.1500000\n6  0.9236948 0.2148594\n7  0.9315895 0.1790744\n8  0.9020000 0.1300000\n9  0.9188641 0.2393509\n10 0.9373737 0.1717172\n11 0.9100000 0.1920000\n12 0.9392713 0.2064777\n13 0.9061224 0.2061224\n14 0.9220000",
        " 0.2000000\n15 0.9462810 0.2500000\n16 0.9191919 0.1979798\n17 0.8980000 0.1920000\n18 0.9166667 0.2418699\n19 0.9244898 0.2469388\n20 0.9118236 0.1763527\n21 0.9342916 0.2731006\n22 0.9506173 0.2283951\n23 0.8837675 0.2545090\n24 0.9142857 0.2306122\n",
        "> ",
        "unique(outTab$n)",
        "[1]  500 1000 2500 5000\n",
        "> ",
        "unique(outTab$p)",
        "[1] 10\n",
        "> ",
        "resTab <- aggregate(cbind(size, cover, pointEst) ~ distro + n, FUN = mean, data = outTab)",
        "> ",
        "resTab$size <- resTab$size / factorial(10)",
        "> ",
        "resTab",
        "    distro    n         size     cover  pointEst\n1    gamma  500 0.0196487489 0.9220000 0.1500000\n2  laplace  500 0.5702840757 0.9060000 0.1200000\n3  lognorm  500 0.0063302096 0.9333333 0.1777778\n4    mixed  500 0.0223211596 0.9220000 0.1640000\n5     unif  500 0.6005948369 0.8920000 0.1500000\n6  weibull  500 0.0085234418 0.9236948 0.2148594\n7    gamma 1000 0.0070368995 0.9315895 0.1790744\n8  laplace 1000 0.3527463823 0.9020000 0.1300000\n9  lognorm 1000 0.0022512189 0.9188641 0.2393509\n10   mixed 1000 0.0085070897",
        " 0.9373737 0.1717172\n11    unif 1000 0.3487816446 0.9100000 0.1920000\n12 weibull 1000 0.0027999391 0.9392713 0.2064777\n13   gamma 2500 0.0021592560 0.9061224 0.2061224\n14 laplace 2500 0.0994919224 0.9220000 0.2000000\n15 lognorm 2500 0.0005858350 0.9462810 0.2500000\n16   mixed 2500 0.0029428662 0.9191919 0.1979798\n17    unif 2500 0.1457009364 0.8980000 0.1920000\n18 weibull 2500 0.0006578464 0.9166667 0.2418699\n19   gamma 5000 0.0012798159 0.9244898 0.2469388\n20 laplace 5000 0.0369918022 0.9118236 0.1763527\n21",
        " lognorm 5000 0.0003771228 0.9342916 0.2731006\n22   mixed 5000 0.0020375899 0.9506173 0.2283951\n23    unif 5000 0.0621611576 0.8837675 0.2545090\n24 weibull 5000 0.0005776526 0.9142857 0.2306122\n",
        "> ",
        "resTabTrig <- aggregate(cbind(size, cover, pointEst) ~ distro + n, FUN = mean, data = outTab)",
        "> ",
        "resTabTrig$size <- resTab$size / factorial(10)",
        "> ",
        "sample.size <- 500",
        "> ",
        "rep.runs <- 25",
        "> ",
        "n.list <- c(500, 1000, 2500, 5000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\", \"mixed\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "### Param grid Size 400",
        "> ",
        "# ### Param grid Size 400",
        "> ",
        "p <- 10",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "runInd <- 1",
        "> ",
        "outTab <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "> ",
        "missing <- c()",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "    if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]N",
        "Error: unexpected symbol in:\n\"    if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))){\n      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]N\"\n",
        "Error in exists(cacheKey, where = .rs.WorkingDataEnv, inherits = FALSE) : \n  invalid first argument\n",
        "Error in assign(cacheKey, frame, .rs.CachedDataEnv) : \n  attempt to use zero-length variable name\n",
        "> ",
        "runInd <- 1",
        "> ",
        "outTab <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "> ",
        "missing <- c()",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "    if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]N",
        "Error: unexpected symbol in:\n\"    if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))){\n      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]N\"\n",
        "Error in exists(cacheKey, where = .rs.WorkingDataEnv, inherits = FALSE) : \n  invalid first argument\n",
        "Error in assign(cacheKey, frame, .rs.CachedDataEnv) : \n  attempt to use zero-length variable name\n",
        "> ",
        "runInd <- 1",
        "> ",
        "outTab <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "Error in exists(cacheKey, where = .rs.WorkingDataEnv, inherits = FALSE) : \n  invalid first argument\n",
        "Error in assign(cacheKey, frame, .rs.CachedDataEnv) : \n  attempt to use zero-length variable name\n",
        "> ",
        "sample.size <- 500",
        "> ",
        "rep.runs <- 25",
        "> ",
        "n.list <- c(500, 1000, 2500, 5000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\", \"mixed\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "runInd <- 1",
        "> ",
        "outTab <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "> ",
        "missing <- c()",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "    if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]N",
        "Error: unexpected symbol in:\n\"    if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))){\n      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]N\"\n",
        "Error in exists(cacheKey, where = .rs.WorkingDataEnv, inherits = FALSE) : \n  invalid first argument\n",
        "Error in assign(cacheKey, frame, .rs.CachedDataEnv) : \n  attempt to use zero-length variable name\n",
        "> ",
        "runInd <- 1",
        "> ",
        "outTab <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "> ",
        "missing <- c()",
        "Error in exists(cacheKey, where = .rs.WorkingDataEnv, inherits = FALSE) : \n  invalid first argument\n",
        "Error in assign(cacheKey, frame, .rs.CachedDataEnv) : \n  attempt to use zero-length variable name\n",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "    if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]N",
        "Error: unexpected symbol in:\n\"    if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))){\n      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]N\"\n",
        "> ",
        "runInd <- 1",
        "> ",
        "outTab <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "> ",
        "missing <- c()",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "    if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "+ ",
        "      outTab <- rbind(outTab, temp)",
        "+ ",
        "    } else {",
        "+ ",
        "      missing <- c(missing, runInd)",
        "+ ",
        "    }",
        "+ ",
        "",
        "+ ",
        "}",
        "Error in exists(cacheKey, where = .rs.WorkingDataEnv, inherits = FALSE) : \n  invalid first argument\n",
        "Error in assign(cacheKey, frame, .rs.CachedDataEnv) : \n  attempt to use zero-length variable name\n",
        "> ",
        "resTab <- aggregate(cbind(size, cover, ancest, pointEst, time) ~ n + distro, dat = outTab, FUN = mean)",
        "> ",
        "resTab[,3] <- resTab[,3] / factorial(10)",
        "> ",
        "resTab",
        "      n  distro        size     cover      ancest  pointEst\n1   500   gamma 0.032588272 0.9249493 0.140545414 0.1561866\n2  1000   gamma 0.012625720 0.9098196 0.250990871 0.2024048\n3  2500   gamma 0.003790332 0.9046653 0.386883029 0.2596349\n4  5000   gamma 0.002032154 0.9208925 0.477439712 0.2515213\n5   500 laplace 0.435053755 0.8880000 0.006622222 0.1000000\n6  1000 laplace 0.241419400 0.8820000 0.015333333 0.1480000\n7  2500 laplace 0.053266027 0.9120000 0.089422222 0.1800000\n8  5000 laplace 0.020634445 0.9016064",
        " 0.205354752 0.1767068\n9   500 lognorm 0.025232726 0.9131313 0.163771044 0.1191919\n10 1000 lognorm 0.012884936 0.9277108 0.225792057 0.1847390\n11 2500 lognorm 0.005967260 0.9074447 0.315492958 0.2535211\n12 5000 lognorm 0.003785057 0.9207317 0.364905149 0.2540650\n13  500   mixed 0.024851877 0.8891129 0.191577061 0.1693548\n14 1000   mixed 0.011224856 0.9012097 0.269847670 0.1733871\n15 2500   mixed 0.005694794 0.9000000 0.362448980 0.2163265\n16 5000   mixed 0.002617974 0.9006211 0.442005981 0.2277433\n17  500    unif",
        " 0.535852912 0.9060000 0.002977778 0.1360000\n18 1000    unif 0.212515832 0.8860000 0.023555556 0.1960000\n19 2500    unif 0.043800342 0.9218437 0.136628813 0.2204409\n20 5000    unif 0.016203603 0.9131313 0.250594837 0.2202020\n21  500 weibull 0.020934390 0.9232323 0.185364759 0.1737374\n22 1000 weibull 0.011828799 0.9210526 0.259244265 0.2348178\n23 2500 weibull 0.003708636 0.8969072 0.372875143 0.2371134\n24 5000 weibull 0.002058092 0.9294606 0.453757492 0.2468880\n        time\n1   272.3938\n2   170.2542\n3   234.0337",
        "\n4   530.7757\n5  2002.4888\n6  1274.7922\n7   589.0973\n8   808.8624\n9   222.8383\n10  172.9486\n11  252.1625\n12  599.4072\n13  228.8794\n14  156.5800\n15  222.7387\n16  496.5482\n17 2365.1472\n18 1104.7619\n19  523.6933\n20  755.6240\n21  199.1335\n22  163.1846\n23  227.1450\n24  541.6571\n",
        "> ",
        "resTab",
        "      n  distro        size     cover      ancest  pointEst      time\n1   500   gamma 0.032588272 0.9249493 0.140545414 0.1561866  272.3938\n2  1000   gamma 0.012625720 0.9098196 0.250990871 0.2024048  170.2542\n3  2500   gamma 0.003790332 0.9046653 0.386883029 0.2596349  234.0337\n4  5000   gamma 0.002032154 0.9208925 0.477439712 0.2515213  530.7757\n5   500 laplace 0.435053755 0.8880000 0.006622222 0.1000000 2002.4888\n6  1000 laplace 0.241419400 0.8820000 0.015333333 0.1480000 1274.7922\n7  2500 laplace 0.053266027",
        " 0.9120000 0.089422222 0.1800000  589.0973\n8  5000 laplace 0.020634445 0.9016064 0.205354752 0.1767068  808.8624\n9   500 lognorm 0.025232726 0.9131313 0.163771044 0.1191919  222.8383\n10 1000 lognorm 0.012884936 0.9277108 0.225792057 0.1847390  172.9486\n11 2500 lognorm 0.005967260 0.9074447 0.315492958 0.2535211  252.1625\n12 5000 lognorm 0.003785057 0.9207317 0.364905149 0.2540650  599.4072\n13  500   mixed 0.024851877 0.8891129 0.191577061 0.1693548  228.8794\n14 1000   mixed 0.011224856 0.9012097 0.269847670",
        " 0.1733871  156.5800\n15 2500   mixed 0.005694794 0.9000000 0.362448980 0.2163265  222.7387\n16 5000   mixed 0.002617974 0.9006211 0.442005981 0.2277433  496.5482\n17  500    unif 0.535852912 0.9060000 0.002977778 0.1360000 2365.1472\n18 1000    unif 0.212515832 0.8860000 0.023555556 0.1960000 1104.7619\n19 2500    unif 0.043800342 0.9218437 0.136628813 0.2204409  523.6933\n20 5000    unif 0.016203603 0.9131313 0.250594837 0.2202020  755.6240\n21  500 weibull 0.020934390 0.9232323 0.185364759 0.1737374  199.1335\n22",
        " 1000 weibull 0.011828799 0.9210526 0.259244265 0.2348178  163.1846\n23 2500 weibull 0.003708636 0.8969072 0.372875143 0.2371134  227.1450\n24 5000 weibull 0.002058092 0.9294606 0.453757492 0.2468880  541.6571\n",
        "> ",
        "resTabTrig",
        "    distro    n         size     cover  pointEst\n1    gamma  500 5.414668e-09 0.9220000 0.1500000\n2  laplace  500 1.571550e-07 0.9060000 0.1200000\n3  lognorm  500 1.744436e-09 0.9333333 0.1777778\n4    mixed  500 6.151113e-09 0.9220000 0.1640000\n5     unif  500 1.655078e-07 0.8920000 0.1500000\n6  weibull  500 2.348832e-09 0.9236948 0.2148594\n7    gamma 1000 1.939181e-09 0.9315895 0.1790744\n8  laplace 1000 9.720745e-08 0.9020000 0.1300000\n9  lognorm 1000 6.203756e-10 0.9188641 0.2393509\n10   mixed 1000 2.344326e-09",
        " 0.9373737 0.1717172\n11    unif 1000 9.611487e-08 0.9100000 0.1920000\n12 weibull 1000 7.715882e-10 0.9392713 0.2064777\n13   gamma 2500 5.950331e-10 0.9061224 0.2061224\n14 laplace 2500 2.741731e-08 0.9220000 0.2000000\n15 lognorm 2500 1.614404e-10 0.9462810 0.2500000\n16   mixed 2500 8.109750e-10 0.9191919 0.1979798\n17    unif 2500 4.015127e-08 0.8980000 0.1920000\n18 weibull 2500 1.812848e-10 0.9166667 0.2418699\n19   gamma 5000 3.526830e-10 0.9244898 0.2469388\n20 laplace 5000 1.019395e-08 0.9118236 0.1763527\n21",
        " lognorm 5000 1.039249e-10 0.9342916 0.2731006\n22   mixed 5000 5.615051e-10 0.9506173 0.2283951\n23    unif 5000 1.712995e-08 0.8837675 0.2545090\n24 weibull 5000 1.591856e-10 0.9142857 0.2306122\n",
        "> ",
        "sample.size <- 500",
        "> ",
        "rep.runs <- 25",
        "> ",
        "n.list <- c(500, 1000, 2500, 5000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\", \"mixed\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "### Param grid Size 480",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "runInd <- 1",
        "> ",
        "outTabTrig <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "> ",
        "missing <- c()",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "  if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "+ ",
        "      outTabTrig <- rbind(outTab, temp)",
        "+ ",
        "  } else {",
        "+ ",
        "    missing <- c(missing, runInd)",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "resTabTrig <- aggregate(cbind(size, cover, pointEst) ~ n + distro,",
        "+ ",
        "                        FUN = mean, data = outTabTrig)",
        "> ",
        "resTabTrig$size <- resTab$size / factorial(10)",
        "> ",
        "resTabTrig",
        "      n  distro         size     cover  pointEst\n1   500   gamma 8.980454e-09 0.9249493 0.1561866\n2  1000   gamma 3.479310e-09 0.9098196 0.2024048\n3  2500   gamma 1.044514e-09 0.9046653 0.2596349\n4  5000   gamma 5.600073e-10 0.9208925 0.2515213\n5   500 laplace 1.198892e-07 0.8880000 0.1000000\n6  1000 laplace 6.652871e-08 0.8820000 0.1480000\n7  2500 laplace 1.467869e-08 0.9120000 0.1800000\n8  5000 laplace 5.686300e-09 0.9016064 0.1767068\n9   500 lognorm 6.953463e-09 0.9131313 0.1191919\n10 1000 lognorm 3.550743e-09",
        " 0.9277108 0.1847390\n11 2500 lognorm 1.644417e-09 0.9074447 0.2535211\n12 5000 lognorm 1.043060e-09 0.9207317 0.2540650\n13  500   mixed 6.848511e-09 0.8891129 0.1693548\n14 1000   mixed 3.093269e-09 0.9012097 0.1733871\n15 2500   mixed 1.569332e-09 0.9000000 0.2163265\n16 5000   mixed 7.214434e-10 0.9035433 0.2185039\n17  500    unif 1.476667e-07 0.9060000 0.1360000\n18 1000    unif 5.856367e-08 0.8860000 0.1960000\n19 2500    unif 1.207020e-08 0.9218437 0.2204409\n20 5000    unif 4.465279e-09 0.9131313 0.2202020\n21",
        "  500 weibull 5.768957e-09 0.9232323 0.1737374\n22 1000 weibull 3.259700e-09 0.9210526 0.2348178\n23 2500 weibull 1.022001e-09 0.8969072 0.2371134\n24 5000 weibull 5.671548e-10 0.9294606 0.2468880\n",
        "> ",
        "sample.size <- 500",
        "> ",
        "rep.runs <- 25",
        "> ",
        "n.list <- c(500, 1000, 2500, 5000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\", \"mixed\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "### Param grid Size 480",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "runInd <- 1",
        "> ",
        "outTabTrig <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "> ",
        "missing <- c()",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "  if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "+ ",
        "      outTabTrig <- rbind(outTab, temp)",
        "+ ",
        "  } else {",
        "+ ",
        "    missing <- c(missing, runInd)",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "resTabTrig <- aggregate(cbind(size, cover, pointEst) ~ n + distro,",
        "+ ",
        "                        FUN = mean, data = outTabTrig)",
        "> ",
        "resTabTrig$size <- resTabTrig$size / factorial(10)",
        "> ",
        "sample.size <- 500",
        "> ",
        "rep.runs <- 25",
        "> ",
        "n.list <- c(500, 1000, 2500, 5000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\", \"mixed\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "### Param grid Size 400",
        "> ",
        "# ### Param grid Size 400",
        "> ",
        "p <- 10",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "runInd <- 1",
        "> ",
        "outTab <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "> ",
        "missing <- c()",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "    if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "+ ",
        "      outTab <- rbind(outTab, temp)",
        "+ ",
        "    } else {",
        "+ ",
        "      missing <- c(missing, runInd)",
        "+ ",
        "    }",
        "+ ",
        "",
        "+ ",
        "}",
        "> ",
        "#",
        "> ",
        "resTab <- aggregate(cbind(size, cover, ancest, pointEst, time) ~ n + distro, dat = outTab, FUN = mean)",
        "> ",
        "resTab$size <- resTab$size / factorial(10)",
        "Error in exists(cacheKey, where = .rs.WorkingDataEnv, inherits = FALSE) : \n  invalid first argument\n",
        "Error in assign(cacheKey, frame, .rs.CachedDataEnv) : \n  attempt to use zero-length variable name\n",
        "> ",
        "resTab",
        "      n  distro        size     cover      ancest\n1   500   gamma 0.032588272 0.9249493 0.140545414\n2  1000   gamma 0.012625720 0.9098196 0.250990871\n3  2500   gamma 0.003790332 0.9046653 0.386883029\n4  5000   gamma 0.002032154 0.9208925 0.477439712\n5   500 laplace 0.435053755 0.8880000 0.006622222\n6  1000 laplace 0.241419400 0.8820000 0.015333333\n7  2500 laplace 0.053266027 0.9120000 0.089422222\n8  5000 laplace 0.020634445 0.9016064 0.205354752\n9   500 lognorm 0.025232726 0.9131313 0.163771044\n10 1000 lognorm",
        " 0.012884936 0.9277108 0.225792057\n11 2500 lognorm 0.005967260 0.9074447 0.315492958\n12 5000 lognorm 0.003785057 0.9207317 0.364905149\n13  500   mixed 0.024851877 0.8891129 0.191577061\n14 1000   mixed 0.011224856 0.9012097 0.269847670\n15 2500   mixed 0.005694794 0.9000000 0.362448980\n16 5000   mixed 0.002617974 0.9006211 0.442005981\n17  500    unif 0.535852912 0.9060000 0.002977778\n18 1000    unif 0.212515832 0.8860000 0.023555556\n19 2500    unif 0.043800342 0.9218437 0.136628813\n20 5000    unif 0.016203603",
        " 0.9131313 0.250594837\n21  500 weibull 0.020934390 0.9232323 0.185364759\n22 1000 weibull 0.011828799 0.9210526 0.259244265\n23 2500 weibull 0.003708636 0.8969072 0.372875143\n24 5000 weibull 0.002058092 0.9294606 0.453757492\n    pointEst      time\n1  0.1561866  272.3938\n2  0.2024048  170.2542\n3  0.2596349  234.0337\n4  0.2515213  530.7757\n5  0.1000000 2002.4888\n6  0.1480000 1274.7922\n7  0.1800000  589.0973\n8  0.1767068  808.8624\n9  0.1191919  222.8383\n10 0.1847390  172.9486\n11 0.2535211  252.1625\n12 0.2540650  599.4072",
        "\n13 0.1693548  228.8794\n14 0.1733871  156.5800\n15 0.2163265  222.7387\n16 0.2277433  496.5482\n17 0.1360000 2365.1472\n18 0.1960000 1104.7619\n19 0.2204409  523.6933\n20 0.2202020  755.6240\n21 0.1737374  199.1335\n22 0.2348178  163.1846\n23 0.2371134  227.1450\n24 0.2468880  541.6571\n",
        "> ",
        "resTab",
        "      n  distro        size     cover      ancest\n1   500   gamma 0.032588272 0.9249493 0.140545414\n2  1000   gamma 0.012625720 0.9098196 0.250990871\n3  2500   gamma 0.003790332 0.9046653 0.386883029\n4  5000   gamma 0.002032154 0.9208925 0.477439712\n5   500 laplace 0.435053755 0.8880000 0.006622222\n6  1000 laplace 0.241419400 0.8820000 0.015333333\n7  2500 laplace 0.053266027 0.9120000 0.089422222\n8  5000 laplace 0.020634445 0.9016064 0.205354752\n9   500 lognorm 0.025232726 0.9131313 0.163771044\n10 1000 lognorm",
        " 0.012884936 0.9277108 0.225792057\n11 2500 lognorm 0.005967260 0.9074447 0.315492958\n12 5000 lognorm 0.003785057 0.9207317 0.364905149\n13  500   mixed 0.024851877 0.8891129 0.191577061\n14 1000   mixed 0.011224856 0.9012097 0.269847670\n15 2500   mixed 0.005694794 0.9000000 0.362448980\n16 5000   mixed 0.002617974 0.9006211 0.442005981\n17  500    unif 0.535852912 0.9060000 0.002977778\n18 1000    unif 0.212515832 0.8860000 0.023555556\n19 2500    unif 0.043800342 0.9218437 0.136628813\n20 5000    unif 0.016203603",
        " 0.9131313 0.250594837\n21  500 weibull 0.020934390 0.9232323 0.185364759\n22 1000 weibull 0.011828799 0.9210526 0.259244265\n23 2500 weibull 0.003708636 0.8969072 0.372875143\n24 5000 weibull 0.002058092 0.9294606 0.453757492\n    pointEst      time\n1  0.1561866  272.3938\n2  0.2024048  170.2542\n3  0.2596349  234.0337\n4  0.2515213  530.7757\n5  0.1000000 2002.4888\n6  0.1480000 1274.7922\n7  0.1800000  589.0973\n8  0.1767068  808.8624\n9  0.1191919  222.8383\n10 0.1847390  172.9486\n11 0.2535211  252.1625\n12 0.2540650  599.4072",
        "\n13 0.1693548  228.8794\n14 0.1733871  156.5800\n15 0.2163265  222.7387\n16 0.2277433  496.5482\n17 0.1360000 2365.1472\n18 0.1960000 1104.7619\n19 0.2204409  523.6933\n20 0.2202020  755.6240\n21 0.1737374  199.1335\n22 0.2348178  163.1846\n23 0.2371134  227.1450\n24 0.2468880  541.6571\n",
        "> ",
        "resTabTrig",
        "      n  distro        size     cover  pointEst\n1   500   gamma 0.032588272 0.9249493 0.1561866\n2  1000   gamma 0.012625720 0.9098196 0.2024048\n3  2500   gamma 0.003790332 0.9046653 0.2596349\n4  5000   gamma 0.002032154 0.9208925 0.2515213\n5   500 laplace 0.435053755 0.8880000 0.1000000\n6  1000 laplace 0.241419400 0.8820000 0.1480000\n7  2500 laplace 0.053266027 0.9120000 0.1800000\n8  5000 laplace 0.020634445 0.9016064 0.1767068\n9   500 lognorm 0.025232726 0.9131313 0.1191919\n10 1000 lognorm 0.012884936 0.9277108",
        " 0.1847390\n11 2500 lognorm 0.005967260 0.9074447 0.2535211\n12 5000 lognorm 0.003785057 0.9207317 0.2540650\n13  500   mixed 0.024851877 0.8891129 0.1693548\n14 1000   mixed 0.011224856 0.9012097 0.1733871\n15 2500   mixed 0.005694794 0.9000000 0.2163265\n16 5000   mixed 0.002585711 0.9035433 0.2185039\n17  500    unif 0.535852912 0.9060000 0.1360000\n18 1000    unif 0.212515832 0.8860000 0.1960000\n19 2500    unif 0.043800342 0.9218437 0.2204409\n20 5000    unif 0.016203603 0.9131313 0.2202020\n21  500 weibull 0.020934390",
        " 0.9232323 0.1737374\n22 1000 weibull 0.011828799 0.9210526 0.2348178\n23 2500 weibull 0.003708636 0.8969072 0.2371134\n24 5000 weibull 0.002058092 0.9294606 0.2468880\n",
        "> ",
        "resTab",
        "      n  distro        size     cover      ancest  pointEst      time\n1   500   gamma 0.032588272 0.9249493 0.140545414 0.1561866  272.3938\n2  1000   gamma 0.012625720 0.9098196 0.250990871 0.2024048  170.2542\n3  2500   gamma 0.003790332 0.9046653 0.386883029 0.2596349  234.0337\n4  5000   gamma 0.002032154 0.9208925 0.477439712 0.2515213  530.7757\n5   500 laplace 0.435053755 0.8880000 0.006622222 0.1000000 2002.4888\n6  1000 laplace 0.241419400 0.8820000 0.015333333 0.1480000 1274.7922\n7  2500 laplace 0.053266027",
        " 0.9120000 0.089422222 0.1800000  589.0973\n8  5000 laplace 0.020634445 0.9016064 0.205354752 0.1767068  808.8624\n9   500 lognorm 0.025232726 0.9131313 0.163771044 0.1191919  222.8383\n10 1000 lognorm 0.012884936 0.9277108 0.225792057 0.1847390  172.9486\n11 2500 lognorm 0.005967260 0.9074447 0.315492958 0.2535211  252.1625\n12 5000 lognorm 0.003785057 0.9207317 0.364905149 0.2540650  599.4072\n13  500   mixed 0.024851877 0.8891129 0.191577061 0.1693548  228.8794\n14 1000   mixed 0.011224856 0.9012097 0.269847670",
        " 0.1733871  156.5800\n15 2500   mixed 0.005694794 0.9000000 0.362448980 0.2163265  222.7387\n16 5000   mixed 0.002617974 0.9006211 0.442005981 0.2277433  496.5482\n17  500    unif 0.535852912 0.9060000 0.002977778 0.1360000 2365.1472\n18 1000    unif 0.212515832 0.8860000 0.023555556 0.1960000 1104.7619\n19 2500    unif 0.043800342 0.9218437 0.136628813 0.2204409  523.6933\n20 5000    unif 0.016203603 0.9131313 0.250594837 0.2202020  755.6240\n21  500 weibull 0.020934390 0.9232323 0.185364759 0.1737374  199.1335\n22",
        " 1000 weibull 0.011828799 0.9210526 0.259244265 0.2348178  163.1846\n23 2500 weibull 0.003708636 0.8969072 0.372875143 0.2371134  227.1450\n24 5000 weibull 0.002058092 0.9294606 0.453757492 0.2468880  541.6571\n",
        "> ",
        "resTabTrig",
        "      n  distro        size     cover  pointEst\n1   500   gamma 0.032588272 0.9249493 0.1561866\n2  1000   gamma 0.012625720 0.9098196 0.2024048\n3  2500   gamma 0.003790332 0.9046653 0.2596349\n4  5000   gamma 0.002032154 0.9208925 0.2515213\n5   500 laplace 0.435053755 0.8880000 0.1000000\n6  1000 laplace 0.241419400 0.8820000 0.1480000\n7  2500 laplace 0.053266027 0.9120000 0.1800000\n8  5000 laplace 0.020634445 0.9016064 0.1767068\n9   500 lognorm 0.025232726 0.9131313 0.1191919\n10 1000 lognorm 0.012884936 0.9277108",
        " 0.1847390\n11 2500 lognorm 0.005967260 0.9074447 0.2535211\n12 5000 lognorm 0.003785057 0.9207317 0.2540650\n13  500   mixed 0.024851877 0.8891129 0.1693548\n14 1000   mixed 0.011224856 0.9012097 0.1733871\n15 2500   mixed 0.005694794 0.9000000 0.2163265\n16 5000   mixed 0.002585711 0.9035433 0.2185039\n17  500    unif 0.535852912 0.9060000 0.1360000\n18 1000    unif 0.212515832 0.8860000 0.1960000\n19 2500    unif 0.043800342 0.9218437 0.2204409\n20 5000    unif 0.016203603 0.9131313 0.2202020\n21  500 weibull 0.020934390",
        " 0.9232323 0.1737374\n22 1000 weibull 0.011828799 0.9210526 0.2348178\n23 2500 weibull 0.003708636 0.8969072 0.2371134\n24 5000 weibull 0.002058092 0.9294606 0.2468880\n",
        "> ",
        "sample.size <- 500",
        "> ",
        "rep.runs <- 25",
        "> ",
        "n.list <- c(500, 1000, 2500, 5000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\", \"mixed\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "### Param grid Size 480",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "runInd <- 1",
        "> ",
        "outTabTrig <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "> ",
        "missing <- c()",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "  if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "+ ",
        "      outTabTrig <- rbind(outTab, temp)",
        "+ ",
        "  } else {",
        "+ ",
        "    missing <- c(missing, runInd)",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "resTabTrig <- aggregate(cbind(size, cover, pointEst) ~ n + distro,",
        "+ ",
        "                        FUN = mean, data = outTabTrig)",
        "> ",
        "resTabTrig$size <- resTabTrig$size / factorial(10)",
        "> ",
        "sample.size <- 500",
        "> ",
        "rep.runs <- 25",
        "> ",
        "n.list <- c(500, 1000, 2500, 5000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\", \"mixed\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "### Param grid Size 400",
        "> ",
        "# ### Param grid Size 400",
        "> ",
        "p <- 10",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "runInd <- 1",
        "> ",
        "outTab <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "> ",
        "missing <- c()",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "    if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "+ ",
        "      outTab <- rbind(outTab, temp)",
        "+ ",
        "    } else {",
        "+ ",
        "      missing <- c(missing, runInd)",
        "+ ",
        "    }",
        "+ ",
        "",
        "+ ",
        "}",
        "> ",
        "#",
        "> ",
        "resTab <- aggregate(cbind(size, cover, ancest, pointEst, time) ~ n + distro, dat = outTab, FUN = mean)",
        "> ",
        "resTab$size <- resTab$size / factorial(10)",
        "Error in exists(cacheKey, where = .rs.WorkingDataEnv, inherits = FALSE) : \n  invalid first argument\n",
        "Error in assign(cacheKey, frame, .rs.CachedDataEnv) : \n  attempt to use zero-length variable name\n",
        "> ",
        "resTab",
        "      n  distro        size     cover\n1   500   gamma 0.032588272 0.9249493\n2  1000   gamma 0.012625720 0.9098196\n3  2500   gamma 0.003790332 0.9046653\n4  5000   gamma 0.002032154 0.9208925\n5   500 laplace 0.435053755 0.8880000\n6  1000 laplace 0.241419400 0.8820000\n7  2500 laplace 0.053266027 0.9120000\n8  5000 laplace 0.020634445 0.9016064\n9   500 lognorm 0.025232726 0.9131313\n10 1000 lognorm 0.012884936 0.9277108\n11 2500 lognorm 0.005967260 0.9074447\n12 5000 lognorm 0.003785057 0.9207317\n13  500   mixed 0.024851877",
        " 0.8891129\n14 1000   mixed 0.011224856 0.9012097\n15 2500   mixed 0.005694794 0.9000000\n16 5000   mixed 0.002617974 0.9006211\n17  500    unif 0.535852912 0.9060000\n18 1000    unif 0.212515832 0.8860000\n19 2500    unif 0.043800342 0.9218437\n20 5000    unif 0.016203603 0.9131313\n21  500 weibull 0.020934390 0.9232323\n22 1000 weibull 0.011828799 0.9210526\n23 2500 weibull 0.003708636 0.8969072\n24 5000 weibull 0.002058092 0.9294606\n        ancest  pointEst      time\n1  0.140545414 0.1561866  272.3938\n2  0.250990871",
        " 0.2024048  170.2542\n3  0.386883029 0.2596349  234.0337\n4  0.477439712 0.2515213  530.7757\n5  0.006622222 0.1000000 2002.4888\n6  0.015333333 0.1480000 1274.7922\n7  0.089422222 0.1800000  589.0973\n8  0.205354752 0.1767068  808.8624\n9  0.163771044 0.1191919  222.8383\n10 0.225792057 0.1847390  172.9486\n11 0.315492958 0.2535211  252.1625\n12 0.364905149 0.2540650  599.4072\n13 0.191577061 0.1693548  228.8794\n14 0.269847670 0.1733871  156.5800\n15 0.362448980 0.2163265  222.7387\n16 0.442005981 0.2277433  496.5482\n17",
        " 0.002977778 0.1360000 2365.1472\n18 0.023555556 0.1960000 1104.7619\n19 0.136628813 0.2204409  523.6933\n20 0.250594837 0.2202020  755.6240\n21 0.185364759 0.1737374  199.1335\n22 0.259244265 0.2348178  163.1846\n23 0.372875143 0.2371134  227.1450\n24 0.453757492 0.2468880  541.6571\n",
        "> ",
        "sample.size <- 500",
        "> ",
        "rep.runs <- 25",
        "> ",
        "n.list <- c(500, 1000, 2500, 5000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\", \"mixed\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "### Param grid Size 400",
        "> ",
        "# ### Param grid Size 400",
        "> ",
        "p <- 10",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "runInd <- 1",
        "> ",
        "outTab <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "> ",
        "missing <- c()",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "    if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "+ ",
        "      outTab <- rbind(outTab, temp)",
        "+ ",
        "    } else {",
        "+ ",
        "      missing <- c(missing, runInd)",
        "+ ",
        "    }",
        "+ ",
        "",
        "+ ",
        "}",
        "Error in exists(cacheKey, where = .rs.WorkingDataEnv, inherits = FALSE) : \n  invalid first argument\n",
        "Error in assign(cacheKey, frame, .rs.CachedDataEnv) : \n  attempt to use zero-length variable name\n",
        "> ",
        "sample.size <- 500",
        "> ",
        "rep.runs <- 25",
        "> ",
        "n.list <- c(500, 1000, 2500, 5000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\", \"mixed\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "### Param grid Size 400",
        "> ",
        "# ### Param grid Size 400",
        "> ",
        "p <- 10",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "runInd <- 1",
        "> ",
        "outTab <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "> ",
        "missing <- c()",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "    if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnb10/bnbRes10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "+ ",
        "      outTab <- rbind(outTab, temp)",
        "+ ",
        "    } else {",
        "+ ",
        "      missing <- c(missing, runInd)",
        "+ ",
        "    }",
        "+ ",
        "",
        "+ ",
        "}",
        "Error in exists(cacheKey, where = .rs.WorkingDataEnv, inherits = FALSE) : \n  invalid first argument\n",
        "Error in assign(cacheKey, frame, .rs.CachedDataEnv) : \n  attempt to use zero-length variable name\n",
        "> ",
        "resTab <- aggregate(cbind(size, cover, ancest, pointEst, time) ~ n + distro, dat = outTab, FUN = mean)",
        "> ",
        "resTab$size <- resTab$size / factorial(10)",
        "> ",
        "sample.size <- 500",
        "> ",
        "rep.runs <- 25",
        "> ",
        "n.list <- c(500, 1000, 2500, 5000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\", \"mixed\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "### Param grid Size 480",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "runInd <- 1",
        "> ",
        "outTabTrig <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "> ",
        "missing <- c()",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "  if(file.exists(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "      temp <- read.csv(paste(\"~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbTrig10/bnbResTrig10_\",runInd, \".csv\", sep = \"\"))[,-1]",
        "+ ",
        "      outTabTrig <- rbind(outTab, temp)",
        "+ ",
        "  } else {",
        "+ ",
        "    missing <- c(missing, runInd)",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "resTabTrig <- aggregate(cbind(size, cover, pointEst) ~ n + distro,",
        "+ ",
        "                        FUN = mean, data = outTabTrig)",
        "> ",
        "resTabTrig$size <- resTabTrig$size / factorial(10)",
        "> ",
        "resTabTrig",
        "      n  distro        size     cover  pointEst\n1   500   gamma 0.032588272 0.9249493 0.1561866\n2  1000   gamma 0.012625720 0.9098196 0.2024048\n3  2500   gamma 0.003790332 0.9046653 0.2596349\n4  5000   gamma 0.002032154 0.9208925 0.2515213\n5   500 laplace 0.435053755 0.8880000 0.1000000\n6  1000 laplace 0.241419400 0.8820000 0.1480000\n7  2500 laplace 0.053266027 0.9120000 0.1800000\n8  5000 laplace 0.020634445 0.9016064 0.1767068\n9   500 lognorm 0.025232726 0.9131313 0.1191919\n10 1000 lognorm 0.012884936 0.9277108",
        " 0.1847390\n11 2500 lognorm 0.005967260 0.9074447 0.2535211\n12 5000 lognorm 0.003785057 0.9207317 0.2540650\n13  500   mixed 0.024851877 0.8891129 0.1693548\n14 1000   mixed 0.011224856 0.9012097 0.1733871\n15 2500   mixed 0.005694794 0.9000000 0.2163265\n16 5000   mixed 0.002585711 0.9035433 0.2185039\n17  500    unif 0.535852912 0.9060000 0.1360000\n18 1000    unif 0.212515832 0.8860000 0.1960000\n19 2500    unif 0.043800342 0.9218437 0.2204409\n20 5000    unif 0.016203603 0.9131313 0.2202020\n21  500 weibull 0.020934390",
        " 0.9232323 0.1737374\n22 1000 weibull 0.011828799 0.9210526 0.2348178\n23 2500 weibull 0.003708636 0.8969072 0.2371134\n24 5000 weibull 0.002058092 0.9294606 0.2468880\n",
        "> ",
        "resTab",
        "      n  distro        size     cover      ancest  pointEst\n1   500   gamma 0.032588272 0.9249493 0.140545414 0.1561866\n2  1000   gamma 0.012625720 0.9098196 0.250990871 0.2024048\n3  2500   gamma 0.003790332 0.9046653 0.386883029 0.2596349\n4  5000   gamma 0.002032154 0.9208925 0.477439712 0.2515213\n5   500 laplace 0.435053755 0.8880000 0.006622222 0.1000000\n6  1000 laplace 0.241419400 0.8820000 0.015333333 0.1480000\n7  2500 laplace 0.053266027 0.9120000 0.089422222 0.1800000\n8  5000 laplace 0.020634445 0.9016064",
        " 0.205354752 0.1767068\n9   500 lognorm 0.025232726 0.9131313 0.163771044 0.1191919\n10 1000 lognorm 0.012884936 0.9277108 0.225792057 0.1847390\n11 2500 lognorm 0.005967260 0.9074447 0.315492958 0.2535211\n12 5000 lognorm 0.003785057 0.9207317 0.364905149 0.2540650\n13  500   mixed 0.024851877 0.8891129 0.191577061 0.1693548\n14 1000   mixed 0.011224856 0.9012097 0.269847670 0.1733871\n15 2500   mixed 0.005694794 0.9000000 0.362448980 0.2163265\n16 5000   mixed 0.002617974 0.9006211 0.442005981 0.2277433\n17  500    unif",
        " 0.535852912 0.9060000 0.002977778 0.1360000\n18 1000    unif 0.212515832 0.8860000 0.023555556 0.1960000\n19 2500    unif 0.043800342 0.9218437 0.136628813 0.2204409\n20 5000    unif 0.016203603 0.9131313 0.250594837 0.2202020\n21  500 weibull 0.020934390 0.9232323 0.185364759 0.1737374\n22 1000 weibull 0.011828799 0.9210526 0.259244265 0.2348178\n23 2500 weibull 0.003708636 0.8969072 0.372875143 0.2371134\n24 5000 weibull 0.002058092 0.9294606 0.453757492 0.2468880\n        time\n1   272.3938\n2   170.2542\n3   234.0337",
        "\n4   530.7757\n5  2002.4888\n6  1274.7922\n7   589.0973\n8   808.8624\n9   222.8383\n10  172.9486\n11  252.1625\n12  599.4072\n13  228.8794\n14  156.5800\n15  222.7387\n16  496.5482\n17 2365.1472\n18 1104.7619\n19  523.6933\n20  755.6240\n21  199.1335\n22  163.1846\n23  227.1450\n24  541.6571\n",
        "> ",
        "resTab",
        "      n  distro        size     cover      ancest  pointEst      time\n1   500   gamma 0.032588272 0.9249493 0.140545414 0.1561866  272.3938\n2  1000   gamma 0.012625720 0.9098196 0.250990871 0.2024048  170.2542\n3  2500   gamma 0.003790332 0.9046653 0.386883029 0.2596349  234.0337\n4  5000   gamma 0.002032154 0.9208925 0.477439712 0.2515213  530.7757\n5   500 laplace 0.435053755 0.8880000 0.006622222 0.1000000 2002.4888\n6  1000 laplace 0.241419400 0.8820000 0.015333333 0.1480000 1274.7922\n7  2500 laplace 0.053266027",
        " 0.9120000 0.089422222 0.1800000  589.0973\n8  5000 laplace 0.020634445 0.9016064 0.205354752 0.1767068  808.8624\n9   500 lognorm 0.025232726 0.9131313 0.163771044 0.1191919  222.8383\n10 1000 lognorm 0.012884936 0.9277108 0.225792057 0.1847390  172.9486\n11 2500 lognorm 0.005967260 0.9074447 0.315492958 0.2535211  252.1625\n12 5000 lognorm 0.003785057 0.9207317 0.364905149 0.2540650  599.4072\n13  500   mixed 0.024851877 0.8891129 0.191577061 0.1693548  228.8794\n14 1000   mixed 0.011224856 0.9012097 0.269847670",
        " 0.1733871  156.5800\n15 2500   mixed 0.005694794 0.9000000 0.362448980 0.2163265  222.7387\n16 5000   mixed 0.002617974 0.9006211 0.442005981 0.2277433  496.5482\n17  500    unif 0.535852912 0.9060000 0.002977778 0.1360000 2365.1472\n18 1000    unif 0.212515832 0.8860000 0.023555556 0.1960000 1104.7619\n19 2500    unif 0.043800342 0.9218437 0.136628813 0.2204409  523.6933\n20 5000    unif 0.016203603 0.9131313 0.250594837 0.2202020  755.6240\n21  500 weibull 0.020934390 0.9232323 0.185364759 0.1737374  199.1335\n22",
        " 1000 weibull 0.011828799 0.9210526 0.259244265 0.2348178  163.1846\n23 2500 weibull 0.003708636 0.8969072 0.372875143 0.2371134  227.1450\n24 5000 weibull 0.002058092 0.9294606 0.453757492 0.2468880  541.6571\n",
        "> ",
        "resTabTrig",
        "      n  distro        size     cover  pointEst\n1   500   gamma 0.032588272 0.9249493 0.1561866\n2  1000   gamma 0.012625720 0.9098196 0.2024048\n3  2500   gamma 0.003790332 0.9046653 0.2596349\n4  5000   gamma 0.002032154 0.9208925 0.2515213\n5   500 laplace 0.435053755 0.8880000 0.1000000\n6  1000 laplace 0.241419400 0.8820000 0.1480000\n7  2500 laplace 0.053266027 0.9120000 0.1800000\n8  5000 laplace 0.020634445 0.9016064 0.1767068\n9   500 lognorm 0.025232726 0.9131313 0.1191919\n10 1000 lognorm 0.012884936 0.9277108",
        " 0.1847390\n11 2500 lognorm 0.005967260 0.9074447 0.2535211\n12 5000 lognorm 0.003785057 0.9207317 0.2540650\n13  500   mixed 0.024851877 0.8891129 0.1693548\n14 1000   mixed 0.011224856 0.9012097 0.1733871\n15 2500   mixed 0.005694794 0.9000000 0.2163265\n16 5000   mixed 0.002585711 0.9035433 0.2185039\n17  500    unif 0.535852912 0.9060000 0.1360000\n18 1000    unif 0.212515832 0.8860000 0.1960000\n19 2500    unif 0.043800342 0.9218437 0.2204409\n20 5000    unif 0.016203603 0.9131313 0.2202020\n21  500 weibull 0.020934390",
        " 0.9232323 0.1737374\n22 1000 weibull 0.011828799 0.9210526 0.2348178\n23 2500 weibull 0.003708636 0.8969072 0.2371134\n24 5000 weibull 0.002058092 0.9294606 0.2468880\n\nRestarting R session...\n\n"
    ]
}