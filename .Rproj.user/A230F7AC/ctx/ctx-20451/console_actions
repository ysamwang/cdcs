{
    "type": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        " \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[129] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[145] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[161] \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[177] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\"\n[193] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\"\n[209] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\"\n[225] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[241] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[257] \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[273] \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\"\n[289] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[305] \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[321] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[337] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[353] \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        "\n[369] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\"\n[385] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[401] \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[417] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"TRUE\" \n[433] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[449] \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\" \n[465] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\" \n[481] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[497] \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\" \n[513] \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[529] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[545] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[561] \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\" \n[577] \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[593] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[609] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\"\n[625] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[641] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[657] \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\"\n[673] \"TRUE\" ",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[689] \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[705] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[721] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"",
        " \"FALSE\"\n[737] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n",
        "> ",
        "",
        "> ",
        "aggregate(pointEst == \"TRUE\" ~ p + n + distro, dat = as.matrix(outTab), FUN = mean)",
        "   p    n  distro pointEst == \"TRUE\"\n1  8 1000   gamma               0.24\n2  8  250   gamma               0.12\n3  8  500   gamma               0.10\n4  8 1000 laplace               0.14\n5  8  250 laplace               0.10\n6  8  500 laplace               0.06\n7  8 1000 lognorm               0.22\n8  8  250 lognorm               0.20\n9  8  500 lognorm               0.12\n10 8 1000    unif               0.06\n11 8  250    unif               0.12\n12 8  500    unif               0.20\n13 8 1000 weibull               0.22",
        "\n14 8  250 weibull               0.20\n15 8  500 weibull               0.30\n",
        "> ",
        "runInd <- 1",
        "> ",
        "args <- commandArgs(TRUE)",
        "> ",
        "for(i in 1:length(args)){",
        "+ ",
        "  eval(parse(text = args[[i]]))",
        "+ ",
        "}",
        "Error in args[[i]] : subscript out of bounds\n",
        "> ",
        "print(runInd)",
        "[1] 1\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "run.onceBnb <- function(p, n, distro, bs = 200, parent_prob = 1/3, verbose = F,",
        "+ ",
        "                        cutoff = NULL, K = c(3)){",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  dat <- cdcs::rDAG(p, n, parent_prob = parent_prob, lowScale = .8,",
        "+ ",
        "                    highScale = 1, edgeVar =n^(-1/8),",
        "+ ",
        "                    dist = distro, uniqueTop = T)",
        "+ ",
        "  ",
        "+ ",
        "  Y <- scale(dat$Y)",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  outlingamDirect <- causalXtreme::direct_lingam_search(Y)",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  rec <- c(p, n, as.character(distro), all(outlingamDirect == 1:p))",
        "+ ",
        "  ",
        "+ ",
        "  names(rec) <- c(\"p\", \"n\", \"distro\", \"pointEst\")",
        "+ ",
        "  ",
        "+ ",
        "  return(rec)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "##################",
        "> ",
        "library(parallel)",
        "> ",
        "library(cdcs)",
        "> ",
        "",
        "> ",
        "sample.size <- 50",
        "> ",
        "rep.runs <- 25",
        "> ",
        "",
        "> ",
        "n.list <- c(250, 500, 1000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "### Param grid Size 400",
        "> ",
        "dim(param.grid)",
        "[1] 30  2\n",
        "> ",
        "",
        "> ",
        "p <- 8",
        "> ",
        "",
        "> ",
        "# cl <- makeCluster(3)",
        "> ",
        "# clusterExport(cl, ls())",
        "> ",
        "outTab <- data.frame(p = NULL, n = NULL, distro = NULL, pointEst = NULL)",
        "> ",
        "for(runInd in 1:dim(param.grid)[1]){",
        "+ ",
        "  ",
        "+ ",
        "  n <- param.grid[runInd, 1]",
        "+ ",
        "  distro <- param.grid[runInd, 2]",
        "+ ",
        "  # clusterExport(cl, ls())",
        "+ ",
        "",
        "+ ",
        "  out <- t(sapply(1:rep.runs, function(x){run.onceBnb(p, n, distro)}))",
        "+ ",
        "",
        "+ ",
        "  outTab <- rbind(outTab, out)",
        "+ ",
        "  cat(runInd)",
        "+ ",
        "}",
        "123456789101112131415161718192021222324252627282930",
        "> ",
        "outTab$pointEst ",
        "  [1] \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n [17] \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n [33] \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n [49] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"TRUE\"  \"FALSE\"\n [65] \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n [81] \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\"\n [97] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\"\n[113] \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\"\n[129] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[145] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[161] \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[177] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\" \n[193] \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[209] \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[225] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[241] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[257] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[273] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[289] \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[305] \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[321] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\"\n[337] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[353] \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        "\n[369] \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\"\n[385] \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\"\n[401] \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[417] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"TRUE\"  \"TRUE\" \n[433] \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\" \n[449] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\" \n[465] \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[481] \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\" \n[497] \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\"\n[513] \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\"\n[529] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[545] \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[561] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[577] \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[593] \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[609] \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\" ",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[625] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\"\n[641] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[657] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\" \n[673] \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\"\n[689] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\"\n[705] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\"\n[721] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\" ",
        " \"TRUE\" \n[737] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\"\n",
        "> ",
        "",
        "> ",
        "aggregate(pointEst == \"TRUE\" ~ p + n + distro, dat = as.matrix(outTab), FUN = mean)",
        "   p    n  distro pointEst == \"TRUE\"\n1  8 1000   gamma               0.20\n2  8  250   gamma               0.12\n3  8  500   gamma               0.16\n4  8 1000 laplace               0.24\n5  8  250 laplace               0.10\n6  8  500 laplace               0.20\n7  8 1000 lognorm               0.28\n8  8  250 lognorm               0.16\n9  8  500 lognorm               0.22\n10 8 1000    unif               0.18\n11 8  250    unif               0.22\n12 8  500    unif               0.22\n13 8 1000 weibull               0.22",
        "\n14 8  250 weibull               0.16\n15 8  500 weibull               0.16\n",
        "> ",
        "runInd <- 1",
        "> ",
        "args <- commandArgs(TRUE)",
        "> ",
        "for(i in 1:length(args)){",
        "+ ",
        "  eval(parse(text = args[[i]]))",
        "+ ",
        "}",
        "Error in args[[i]] : subscript out of bounds\n",
        "> ",
        "print(runInd)",
        "[1] 1\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "run.onceBnb <- function(p, n, distro, bs = 200, parent_prob = 1/3, verbose = F,",
        "+ ",
        "                        cutoff = NULL, K = c(3)){",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  dat <- cdcs::rDAG(p, n, parent_prob = parent_prob, lowScale = .8,",
        "+ ",
        "                    highScale = 1, edgeVar =n^(-1/4),",
        "+ ",
        "                    dist = distro, uniqueTop = T)",
        "+ ",
        "  ",
        "+ ",
        "  Y <- scale(dat$Y)",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  outlingamDirect <- causalXtreme::direct_lingam_search(Y)",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  rec <- c(p, n, as.character(distro), all(outlingamDirect == 1:p))",
        "+ ",
        "  ",
        "+ ",
        "  names(rec) <- c(\"p\", \"n\", \"distro\", \"pointEst\")",
        "+ ",
        "  ",
        "+ ",
        "  return(rec)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "##################",
        "> ",
        "library(parallel)",
        "> ",
        "library(cdcs)",
        "> ",
        "",
        "> ",
        "sample.size <- 50",
        "> ",
        "rep.runs <- 25",
        "> ",
        "",
        "> ",
        "n.list <- c(250, 500, 1000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "### Param grid Size 400",
        "> ",
        "dim(param.grid)",
        "[1] 30  2\n",
        "> ",
        "",
        "> ",
        "p <- 8",
        "> ",
        "",
        "> ",
        "# cl <- makeCluster(3)",
        "> ",
        "# clusterExport(cl, ls())",
        "> ",
        "outTab <- data.frame(p = NULL, n = NULL, distro = NULL, pointEst = NULL)",
        "> ",
        "for(runInd in 1:dim(param.grid)[1]){",
        "+ ",
        "  ",
        "+ ",
        "  n <- param.grid[runInd, 1]",
        "+ ",
        "  distro <- param.grid[runInd, 2]",
        "+ ",
        "  # clusterExport(cl, ls())",
        "+ ",
        "",
        "+ ",
        "  out <- t(sapply(1:rep.runs, function(x){run.onceBnb(p, n, distro)}))",
        "+ ",
        "",
        "+ ",
        "  outTab <- rbind(outTab, out)",
        "+ ",
        "  cat(runInd)",
        "+ ",
        "}",
        "123456789101112131415161718192021222324252627282930",
        "> ",
        "outTab$pointEst ",
        "  [1] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n [17] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n [33] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n [49] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\"\n [65] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n [81] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n [97] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[113] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[129] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[145] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[161] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[177] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[193] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[209] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[225] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[241] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[257] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[273] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[289] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[305] \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[321] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[337] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[353] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        "\n[369] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[385] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[401] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[417] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\"\n[433] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[449] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[465] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[481] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\" ",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[497] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[513] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\" \n[529] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[545] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[561] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\" \n[577] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[593] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[609] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[625] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[641] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[657] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[673] \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[689] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[705] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[721] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\"\n[737] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n",
        "> ",
        "",
        "> ",
        "aggregate(pointEst == \"TRUE\" ~ p + n + distro, dat = as.matrix(outTab), FUN = mean)",
        "   p    n  distro pointEst == \"TRUE\"\n1  8 1000   gamma               0.02\n2  8  250   gamma               0.06\n3  8  500   gamma               0.00\n4  8 1000 laplace               0.00\n5  8  250 laplace               0.02\n6  8  500 laplace               0.00\n7  8 1000 lognorm               0.02\n8  8  250 lognorm               0.00\n9  8  500 lognorm               0.02\n10 8 1000    unif               0.00\n11 8  250    unif               0.00\n12 8  500    unif               0.00\n13 8 1000 weibull               0.04",
        "\n14 8  250 weibull               0.04\n15 8  500 weibull               0.06\n",
        "> ",
        "runInd <- 1",
        "> ",
        "args <- commandArgs(TRUE)",
        "> ",
        "for(i in 1:length(args)){",
        "+ ",
        "  eval(parse(text = args[[i]]))",
        "+ ",
        "}",
        "Error in args[[i]] : subscript out of bounds\n",
        "> ",
        "print(runInd)",
        "[1] 1\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "run.onceBnb <- function(p, n, distro, bs = 200, parent_prob = 1/3, verbose = F,",
        "+ ",
        "                        cutoff = NULL, K = c(3)){",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  dat <- cdcs::rDAG(p, n, parent_prob = parent_prob, lowScale = .8,",
        "+ ",
        "                    highScale = 1, edgeVar =n^(-1/6),",
        "+ ",
        "                    dist = distro, uniqueTop = T)",
        "+ ",
        "  ",
        "+ ",
        "  Y <- scale(dat$Y)",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  outlingamDirect <- causalXtreme::direct_lingam_search(Y)",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  rec <- c(p, n, as.character(distro), all(outlingamDirect == 1:p))",
        "+ ",
        "  ",
        "+ ",
        "  names(rec) <- c(\"p\", \"n\", \"distro\", \"pointEst\")",
        "+ ",
        "  ",
        "+ ",
        "  return(rec)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "##################",
        "> ",
        "library(parallel)",
        "> ",
        "library(cdcs)",
        "> ",
        "",
        "> ",
        "sample.size <- 50",
        "> ",
        "rep.runs <- 25",
        "> ",
        "",
        "> ",
        "n.list <- c(250, 500, 1000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "### Param grid Size 400",
        "> ",
        "dim(param.grid)",
        "[1] 30  2\n",
        "> ",
        "",
        "> ",
        "p <- 8",
        "> ",
        "",
        "> ",
        "# cl <- makeCluster(3)",
        "> ",
        "# clusterExport(cl, ls())",
        "> ",
        "outTab <- data.frame(p = NULL, n = NULL, distro = NULL, pointEst = NULL)",
        "> ",
        "for(runInd in 1:dim(param.grid)[1]){",
        "+ ",
        "  ",
        "+ ",
        "  n <- param.grid[runInd, 1]",
        "+ ",
        "  distro <- param.grid[runInd, 2]",
        "+ ",
        "  # clusterExport(cl, ls())",
        "+ ",
        "",
        "+ ",
        "  out <- t(sapply(1:rep.runs, function(x){run.onceBnb(p, n, distro)}))",
        "+ ",
        "",
        "+ ",
        "  outTab <- rbind(outTab, out)",
        "+ ",
        "  cat(runInd)",
        "+ ",
        "}",
        "12345",
        "> ",
        "outTab$pointEst ",
        "  [1] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n [17] \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\"\n [33] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n [49] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\"\n [65] \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\" \n [81] \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n [97] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\" \n[113] \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\"\n",
        "> ",
        "",
        "> ",
        "aggregate(pointEst == \"TRUE\" ~ p + n + distro, dat = as.matrix(outTab), FUN = mean)",
        "  p    n distro pointEst == \"TRUE\"\n1 8 1000   unif               0.20\n2 8  250   unif               0.10\n3 8  500   unif               0.18\n",
        "> ",
        "runInd <- 1",
        "> ",
        "args <- commandArgs(TRUE)",
        "> ",
        "for(i in 1:length(args)){",
        "+ ",
        "  eval(parse(text = args[[i]]))",
        "+ ",
        "}",
        "Error in args[[i]] : subscript out of bounds\n",
        "> ",
        "print(runInd)",
        "[1] 1\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "run.onceBnb <- function(p, n, distro, bs = 200, parent_prob = 1/3, verbose = F,",
        "+ ",
        "                        cutoff = NULL, K = c(3)){",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  dat <- cdcs::rDAG(p, n, parent_prob = parent_prob, lowScale = .8,",
        "+ ",
        "                    highScale = 1, edgeVar = 2 * n^(-1/6),",
        "+ ",
        "                    dist = distro, uniqueTop = T)",
        "+ ",
        "  ",
        "+ ",
        "  Y <- scale(dat$Y)",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  outlingamDirect <- causalXtreme::direct_lingam_search(Y)",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  rec <- c(p, n, as.character(distro), all(outlingamDirect == 1:p))",
        "+ ",
        "  ",
        "+ ",
        "  names(rec) <- c(\"p\", \"n\", \"distro\", \"pointEst\")",
        "+ ",
        "  ",
        "+ ",
        "  return(rec)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "##################",
        "> ",
        "library(parallel)",
        "> ",
        "library(cdcs)",
        "> ",
        "",
        "> ",
        "sample.size <- 50",
        "> ",
        "rep.runs <- 25",
        "> ",
        "",
        "> ",
        "n.list <- c(250, 500, 1000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "### Param grid Size 400",
        "> ",
        "dim(param.grid)",
        "[1] 30  2\n",
        "> ",
        "",
        "> ",
        "p <- 8",
        "> ",
        "",
        "> ",
        "# cl <- makeCluster(3)",
        "> ",
        "# clusterExport(cl, ls())",
        "> ",
        "outTab <- data.frame(p = NULL, n = NULL, distro = NULL, pointEst = NULL)",
        "> ",
        "for(runInd in 1:dim(param.grid)[1]){",
        "+ ",
        "  ",
        "+ ",
        "  n <- param.grid[runInd, 1]",
        "+ ",
        "  distro <- param.grid[runInd, 2]",
        "+ ",
        "  # clusterExport(cl, ls())",
        "+ ",
        "",
        "+ ",
        "  out <- t(sapply(1:rep.runs, function(x){run.onceBnb(p, n, distro)}))",
        "+ ",
        "",
        "+ ",
        "  outTab <- rbind(outTab, out)",
        "+ ",
        "  cat(runInd)",
        "+ ",
        "}",
        "123456789101112131415161718192021222324252627282930",
        "> ",
        "outTab$pointEst ",
        "  [1] \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\" \n [17] \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\"\n [33] \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\" \n [49] \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\"\n [65] \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n [81] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n [97] \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[113] \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\"",
        " \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\"\n[129] \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\" \n[145] \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\"\n[161] \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\"\n[177] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\" ",
        " \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\" \n[193] \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\" \n[209] \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\" \n[225] \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\" \n[241] \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\" ",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[257] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\" \n[273] \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\"\n[289] \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[305] \"FALSE\" \"TRUE\" ",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\"\n[321] \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\" \n[337] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\" \n[353] \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\"",
        "\n[369] \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[385] \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\"\n[401] \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\"\n[417] \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\" ",
        " \"FALSE\" \"TRUE\"  \"FALSE\"\n[433] \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\" \n[449] \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[465] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\" \n[481] \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\"",
        " \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[497] \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\" \n[513] \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\" \n[529] \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\" \n[545] \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\" \n[561] \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\" \n[577] \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\"\n[593] \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\"\n[609] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\" \n[625] \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\"\n[641] \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[657] \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\"\n[673] \"TRUE\" ",
        " \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\" \n[689] \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[705] \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[721] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\" ",
        " \"FALSE\"\n[737] \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n",
        "> ",
        "",
        "> ",
        "aggregate(pointEst == \"TRUE\" ~ p + n + distro, dat = as.matrix(outTab), FUN = mean)",
        "   p    n  distro pointEst == \"TRUE\"\n1  8 1000   gamma               0.52\n2  8  250   gamma               0.28\n3  8  500   gamma               0.46\n4  8 1000 laplace               0.38\n5  8  250 laplace               0.34\n6  8  500 laplace               0.26\n7  8 1000 lognorm               0.54\n8  8  250 lognorm               0.52\n9  8  500 lognorm               0.42\n10 8 1000    unif               0.42\n11 8  250    unif               0.38\n12 8  500    unif               0.50\n13 8 1000 weibull               0.48",
        "\n14 8  250 weibull               0.30\n15 8  500 weibull               0.50\n",
        "> ",
        "runInd <- 1",
        "> ",
        "args <- commandArgs(TRUE)",
        "> ",
        "for(i in 1:length(args)){",
        "+ ",
        "  eval(parse(text = args[[i]]))",
        "+ ",
        "}",
        "Error in args[[i]] : subscript out of bounds\n",
        "> ",
        "print(runInd)",
        "[1] 1\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "run.onceBnb <- function(p, n, distro, bs = 200, parent_prob = 1/3, verbose = F,",
        "+ ",
        "                        cutoff = NULL, K = c(3)){",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  dat <- cdcs::rDAG(p, n, parent_prob = parent_prob, lowScale = .8,",
        "+ ",
        "                    highScale = 1, edgeVar = 2 * n^(-1/4),",
        "+ ",
        "                    dist = distro, uniqueTop = T)",
        "+ ",
        "  ",
        "+ ",
        "  Y <- scale(dat$Y)",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  outlingamDirect <- causalXtreme::direct_lingam_search(Y)",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  rec <- c(p, n, as.character(distro), all(outlingamDirect == 1:p))",
        "+ ",
        "  ",
        "+ ",
        "  names(rec) <- c(\"p\", \"n\", \"distro\", \"pointEst\")",
        "+ ",
        "  ",
        "+ ",
        "  return(rec)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "##################",
        "> ",
        "library(parallel)",
        "> ",
        "library(cdcs)",
        "> ",
        "",
        "> ",
        "sample.size <- 50",
        "> ",
        "rep.runs <- 25",
        "> ",
        "",
        "> ",
        "n.list <- c(250, 500, 1000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "### Param grid Size 400",
        "> ",
        "dim(param.grid)",
        "[1] 30  2\n",
        "> ",
        "",
        "> ",
        "p <- 8",
        "> ",
        "",
        "> ",
        "# cl <- makeCluster(3)",
        "> ",
        "# clusterExport(cl, ls())",
        "> ",
        "outTab <- data.frame(p = NULL, n = NULL, distro = NULL, pointEst = NULL)",
        "> ",
        "for(runInd in 1:dim(param.grid)[1]){",
        "+ ",
        "  ",
        "+ ",
        "  n <- param.grid[runInd, 1]",
        "+ ",
        "  distro <- param.grid[runInd, 2]",
        "+ ",
        "  # clusterExport(cl, ls())",
        "+ ",
        "",
        "+ ",
        "  out <- t(sapply(1:rep.runs, function(x){run.onceBnb(p, n, distro)}))",
        "+ ",
        "",
        "+ ",
        "  outTab <- rbind(outTab, out)",
        "+ ",
        "  cat(runInd)",
        "+ ",
        "}",
        "123456789101112131415161718192021222324252627282930",
        "> ",
        "outTab$pointEst ",
        "  [1] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n [17] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n [33] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n [49] \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\"\n [65] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n [81] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\"\n [97] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[113] \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[129] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[145] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[161] \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\" \n[177] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[193] \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[209] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[225] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[241] \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\"\n[257] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\"\n[273] \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[289] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[305] \"FALSE\" \"FALSE\"",
        " \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\"\n[321] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\"\n[337] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[353] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"",
        "\n[369] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[385] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[401] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[417] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\"\n[433] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[449] \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\"\n[465] \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\" \n[481] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\"\n[497] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[513] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[529] \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[545] \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[561] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\"\n[577] \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[593] \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[609] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\"\n[625] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\"\n[641] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[657] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\" \n[673] \"TRUE\" ",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[689] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\"\n[705] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[721] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\"\n[737] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n",
        "> ",
        "",
        "> ",
        "aggregate(pointEst == \"TRUE\" ~ p + n + distro, dat = as.matrix(outTab), FUN = mean)",
        "   p    n  distro pointEst == \"TRUE\"\n1  8 1000   gamma               0.04\n2  8  250   gamma               0.16\n3  8  500   gamma               0.10\n4  8 1000 laplace               0.06\n5  8  250 laplace               0.08\n6  8  500 laplace               0.04\n7  8 1000 lognorm               0.14\n8  8  250 lognorm               0.08\n9  8  500 lognorm               0.22\n10 8 1000    unif               0.08\n11 8  250    unif               0.18\n12 8  500    unif               0.12\n13 8 1000 weibull               0.16",
        "\n14 8  250 weibull               0.18\n15 8  500 weibull               0.16\n",
        "> ",
        "runInd <- 1",
        "> ",
        "args <- commandArgs(TRUE)",
        "> ",
        "for(i in 1:length(args)){",
        "+ ",
        "  eval(parse(text = args[[i]]))",
        "+ ",
        "}",
        "Error in args[[i]] : subscript out of bounds\n",
        "> ",
        "print(runInd)",
        "[1] 1\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "run.onceBnb <- function(p, n, distro, bs = 200, parent_prob = 1/3, verbose = F,",
        "+ ",
        "                        cutoff = NULL, K = c(3)){",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  dat <- cdcs::rDAG(p, n, parent_prob = parent_prob, lowScale = .8,",
        "+ ",
        "                    highScale = 1, edgeVar = 2 * n^(-1/4),",
        "+ ",
        "                    dist = distro, uniqueTop = T)",
        "+ ",
        "  ",
        "+ ",
        "  Y <- scale(dat$Y, scale = F)",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  outlingamDirect <- causalXtreme::direct_lingam_search(Y)",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  rec <- c(p, n, as.character(distro), all(outlingamDirect == 1:p))",
        "+ ",
        "  ",
        "+ ",
        "  names(rec) <- c(\"p\", \"n\", \"distro\", \"pointEst\")",
        "+ ",
        "  ",
        "+ ",
        "  return(rec)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "##################",
        "> ",
        "library(parallel)",
        "> ",
        "library(cdcs)",
        "> ",
        "",
        "> ",
        "sample.size <- 50",
        "> ",
        "rep.runs <- 25",
        "> ",
        "",
        "> ",
        "n.list <- c(250, 500, 1000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "### Param grid Size 400",
        "> ",
        "dim(param.grid)",
        "[1] 30  2\n",
        "> ",
        "",
        "> ",
        "p <- 8",
        "> ",
        "",
        "> ",
        "# cl <- makeCluster(3)",
        "> ",
        "# clusterExport(cl, ls())",
        "> ",
        "outTab <- data.frame(p = NULL, n = NULL, distro = NULL, pointEst = NULL)",
        "> ",
        "for(runInd in 1:dim(param.grid)[1]){",
        "+ ",
        "  ",
        "+ ",
        "  n <- param.grid[runInd, 1]",
        "+ ",
        "  distro <- param.grid[runInd, 2]",
        "+ ",
        "  # clusterExport(cl, ls())",
        "+ ",
        "",
        "+ ",
        "  out <- t(sapply(1:rep.runs, function(x){run.onceBnb(p, n, distro)}))",
        "+ ",
        "",
        "+ ",
        "  outTab <- rbind(outTab, out)",
        "+ ",
        "  cat(runInd)",
        "+ ",
        "}",
        "123456789101112131415161718192021222324252627282930",
        "> ",
        "outTab$pointEst ",
        "  [1] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n [17] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n [33] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n [49] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"TRUE\" \n [65] \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n [81] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n [97] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[113] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\" \n[129] \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\" \n[145] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[161] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[177] \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[193] \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\"\n[209] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\" \n[225] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\" \n[241] \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\"\n[257] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\"\n[273] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[289] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[305] \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[321] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\"\n[337] \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[353] \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        "\n[369] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\"\n[385] \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\"\n[401] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\" \n[417] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"TRUE\"  \"FALSE\" \"FALSE\"\n[433] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[449] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[465] \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\"\n[481] \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\" \n[497] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[513] \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[529] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\"\n[545] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[561] \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\"\n[577] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[593] \"TRUE\"  \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[609] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\"\n[625] \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[641] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\"\n[657] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\"\n[673] \"FALSE\"",
        " \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\" \n[689] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[705] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n[721] \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"",
        " \"FALSE\"\n[737] \"TRUE\"  \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\" \"FALSE\"\n",
        "> ",
        "",
        "> ",
        "aggregate(pointEst == \"TRUE\" ~ p + n + distro, dat = as.matrix(outTab), FUN = mean)",
        "   p    n  distro pointEst == \"TRUE\"\n1  8 1000   gamma               0.08\n2  8  250   gamma               0.16\n3  8  500   gamma               0.14\n4  8 1000 laplace               0.10\n5  8  250 laplace               0.16\n6  8  500 laplace               0.12\n7  8 1000 lognorm               0.16\n8  8  250 lognorm               0.16\n9  8  500 lognorm               0.16\n10 8 1000    unif               0.18\n11 8  250    unif               0.06\n12 8  500    unif               0.14\n13 8 1000 weibull               0.12",
        "\n14 8  250 weibull               0.16\n15 8  500 weibull               0.26\n",
        "> ",
        "runInd <- 1",
        "> ",
        "args <- commandArgs(TRUE)",
        "> ",
        "for(i in 1:length(args)){",
        "+ ",
        "  eval(parse(text = args[[i]]))",
        "+ ",
        "}",
        "Error in args[[i]] : subscript out of bounds\n",
        "> ",
        "print(runInd)",
        "[1] 1\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "run.onceBnb <- function(p, n, distro, bs = 200, parent_prob = 1/3, verbose = F,",
        "+ ",
        "                        cutoff = NULL, K = c(3)){",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  dat <- cdcs::rDAG(p, n, parent_prob = parent_prob, lowScale = .8,",
        "+ ",
        "                    highScale = 1, edgeVar = 2 * n^(-1/8),",
        "+ ",
        "                    dist = distro, uniqueTop = T)",
        "+ ",
        "  ",
        "+ ",
        "  Y <- scale(dat$Y, scale = T)",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  outlingamDirect <- causalXtreme::direct_lingam_search(Y)",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  rec <- c(p, n, as.character(distro), all(outlingamDirect == 1:p))",
        "+ ",
        "  ",
        "+ ",
        "  names(rec) <- c(\"p\", \"n\", \"distro\", \"pointEst\")",
        "+ ",
        "  ",
        "+ ",
        "  return(rec)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "##################",
        "> ",
        "library(parallel)",
        "> ",
        "library(cdcs)",
        "> ",
        "",
        "> ",
        "sample.size <- 50",
        "> ",
        "rep.runs <- 25",
        "> ",
        "",
        "> ",
        "n.list <- c(250, 500, 1000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "### Param grid Size 400",
        "> ",
        "dim(param.grid)",
        "[1] 30  2\n",
        "> ",
        "",
        "> ",
        "p <- 8",
        "> ",
        "",
        "> ",
        "# cl <- makeCluster(3)",
        "> ",
        "# clusterExport(cl, ls())",
        "> ",
        "outTab <- data.frame(p = NULL, n = NULL, distro = NULL, pointEst = NULL)",
        "> ",
        "for(runInd in 1:dim(param.grid)[1]){",
        "+ ",
        "  ",
        "+ ",
        "  n <- param.grid[runInd, 1]",
        "+ ",
        "  distro <- param.grid[runInd, 2]",
        "+ ",
        "  # clusterExport(cl, ls())",
        "+ ",
        "",
        "+ ",
        "  out <- t(sapply(1:rep.runs, function(x){run.onceBnb(p, n, distro)}))",
        "+ ",
        "",
        "+ ",
        "  outTab <- rbind(outTab, out)",
        "+ ",
        "  cat(runInd)",
        "+ ",
        "}",
        "1234567891011121314151617181920212223\nRestarting R session...\n\n"
    ]
}