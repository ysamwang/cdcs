lines(timeP[,2] , pch = 3, col = 3, type = "b")
plot(timeP[,2],
xaxt = "n", pch = "", ylab = "", xlab = "", log = "y", yaxt = "n", ylim = c(6e2, 150000))
axis(side = 1, at = c(1:6), labels = timeP[,1])
axis(side = 2, at = c(1000, 2000, 5000, 10000, 20000, 50000, 800000),
labels = c(1000, 2000, 5000, 10000, 20000, 50000, 800000)/ 1000)
mtext("Time (sec x 1000)", side = 3, line = .2, pch = .9)
polygon(c(0,0,7,7), c(1e-5,1e6,1e6, 1e-5), col = "gray95")
abline(h = c(1000, 2000, 5000, 10000, 20000, 50000, 100000), col = "white", lty = 1, lwd = 1.2)
lines(timeP[,2] , pch = 3, col = 3, type = "b")
plot(timeP[,2],
xaxt = "n", pch = "", ylab = "", xlab = "", log = "y", yaxt = "n", ylim = c(6e2, 80000))
axis(side = 1, at = c(1:6), labels = timeP[,1])
axis(side = 2, at = c(1000, 2000, 5000, 10000, 20000, 50000, 80000),
labels = c(1000, 2000, 5000, 10000, 20000, 50000, 80000)/ 1000)
mtext("Time (sec x 1000)", side = 3, line = .2, pch = .9)
polygon(c(0,0,7,7), c(1e-5,1e6,1e6, 1e-5), col = "gray95")
abline(h = c(1000, 2000, 5000, 10000, 20000, 50000, 100000), col = "white", lty = 1, lwd = 1.2)
lines(timeP[,2] , pch = 3, col = 3, type = "b")
plot(timeP[,2],
xaxt = "n", pch = "", ylab = "", xlab = "", log = "y", yaxt = "n", ylim = c(6e2, 80000))
axis(side = 1, at = c(1:6), labels = timeP[,1])
axis(side = 2, at = c(1000, 2000, 5000, 10000, 20000, 50000, 80000),
labels = c(1000, 2000, 5000, 10000, 20000, 50000, 80000)/ 1000)
mtext("Time (sec x 1000)", side = 3, line = .2, pch = .9)
polygon(c(0,0,7,7), c(1e-5,1e6,1e6, 1e-5), col = "gray95")
abline(h = c(1000, 2000, 5000, 10000, 20000, 50000, 80000), col = "white", lty = 1, lwd = 1.2)
lines(timeP[,2] , pch = 3, col = 3, type = "b")
setEPS()
postscript("~/Dropbox/Apps/Overleaf/Confidence Sets for Causal Discovery/figures/confSets.eps", width = 9, height = 4)
par(mar = c(3, 3, 2, .5), mfrow = c(2,3), oma = c(0, 0, 0,7))
## Point Estimates
i <- 1
plot(resTab[which(resTab$distro == d.list[i]),3], ylim = c(0.05, .3), lty = 1,
xaxt = "n", pch = "", ylab = "", xlab = "", yaxt = "n")
axis(side = 1, at = c(1:4), labels = c(500, 1000, 2500, 5000))
axis(side = 2, at = seq(0, .3, .05), labels = c("0", ".05", ".1", ".15", ".2", ".25", ".3"), las = 1, cex.axis = 1.2)
mtext("Point Estimate", side = 3, line = .2, pch = .9)
rect(par("usr")[1], par("usr")[3],
par("usr")[2], par("usr")[4],
col = "gray95") # Color
abline(h = seq(0, .6, by = .05), col = "white", lty = 1, lwd = 1.2)
for(i in 1:length(d.list)){
lines(resTab[which(resTab$distro == d.list[i]), 6], type = "b", pch = i, col = i, lty = 1, lwd = 1.5)
}
## Size of Set
i <- 1
plot(resTab[which(resTab$distro == d.list[i]),3], ylim = c(min(resTab[,3])/2, max(resTab[,3])), col = i,
xaxt = "n", pch = "", ylab = "", xlab = "", yaxt = "n", log = "y")
axis(side = 1, at = c(1:4), labels = c(500, 1000, 2500, 5000))
mtext("Size of Set", side = 3, line = .2, pch = .9)
axis(side = 2, at = c(.001, .005, .01, .02, .05, .1, .25, .5),
labels = c(".001", ".005", ".01", ".02", ".05", ".1", ".2", ".5"),
las = 1, cex.axis = 1.2)
# rect(par("usr")[1], par("usr")[3],
#      par("usr")[2], par("usr")[4],
#      col = "gray95") # Color
polygon(c(0,0,5,5), c(1e-5,5,5,1e-5), col = "gray95")
abline(h = c(.001, .005, .01, .02, .05, .1, .2, .5), col = "white", lty = 1, lwd = 1.2)
for(i in 1:length(d.list)){
lines(resTab[which(resTab$distro == d.list[i]), 3], type = "b", pch = i, col = i, lty = 1, lwd = 1.5)
}
## Timing
i <- 1
plot(resTab[which(resTab$distro == d.list[i]),3], ylim = c(0, max(resTab$time)*1.1), col = i,
xaxt = "n", pch = "", ylab = "", xlab = "", yaxt = "n")
axis(side = 1, at = c(1:4), labels = c(500, 1000, 2500, 5000))
axis(side = 2, at = seq(0, 2500, 500), labels = c("0", "5", "10", "15", "20", "25"), las = 1, cex.axis = 1.2)
mtext("Time (sec x 100)", side = 3, line = .2, pch = .9)
rect(par("usr")[1], par("usr")[3],
par("usr")[2], par("usr")[4],
col = "gray95") # Color
abline(h = seq(0, 2500, by = 500), col = "white", lty = 1, lwd = 1.2)
for(i in 1:length(d.list)){
lines(resTab[which(resTab$distro == d.list[i]), 7], type = "b", pch = i, col = i, lty = 1, lwd = 1.5)
}
## Coverage
i <- 1
plot(resTab[which(resTab$distro == d.list[i]),3], ylim = c(.8, 1), col = i,
xaxt = "n", pch = "", ylab = "", xlab = "", yaxt= "n")
axis(side = 1, at = c(1:4), labels = c(500, 1000, 2500, 5000))
axis(side = 2, at = seq(.8, 1, by = .05), labels = c(".8", ".85", ".9", ".95", "1"), las = 1, cex.axis = 1.2)
mtext("Coverage", side = 3, line = .2, pch = .9)
rect(par("usr")[1], par("usr")[3],
par("usr")[2], par("usr")[4],
col = "gray95") # Color
abline(h = seq(0, 1, by = .05), col = "white", lty = 1, lwd = 2)
abline(h = .9, col = "red", lty = 1, lwd = 2.5)
for(i in 1:length(d.list)){
lines(resTab[which(resTab$distro == d.list[i]), 4], type = "b", pch = i, col = i, lty = 1, lwd = 1.5)
}
## Ancestral Relations
i <- 1
plot(resTab[which(resTab$distro == d.list[i]), 5], ylim = c(0, max(resTab[,5]) * 1.1), col = i,
xaxt = "n", pch = "", ylab = "", xlab = "", yaxt= "n")
axis(side = 1, at = c(1:4), labels = c(500, 1000, 2500, 5000))
axis(side = 2, at = seq(0, .5, .1), labels = c("0", ".1", ".2", ".3", ".4", ".5"), las = 1, cex.axis = 1.2)
mtext("Ancestral Relations", side = 3, line = .2, pch = .9)
rect(par("usr")[1], par("usr")[3],
par("usr")[2], par("usr")[4],
col = "gray95") # Color
abline(h = seq(0, 1, by = .1), col = "white", lty = 1, lwd = 1.2)
for(i in 1:length(d.list)){
lines(resTab[which(resTab$distro == d.list[i]), 5], type = "b", pch = i, col = i, lty = 1, lwd = 1.5)
}
## Timing (p)
plot(timeP[,2],
xaxt = "n", pch = "", ylab = "", xlab = "", log = "y", yaxt = "n", ylim = c(6e2, 80000))
axis(side = 1, at = c(1:6), labels = timeP[,1])
axis(side = 2, at = c(1000, 2000, 5000, 10000, 20000, 50000, 80000),
labels = c(1000, 2000, 5000, 10000, 20000, 50000, 80000)/ 1000)
mtext("Time (sec x 1000)", side = 3, line = .2, pch = .9)
polygon(c(0,0,7,7), c(1e-5,1e6,1e6, 1e-5), col = "gray95")
abline(h = c(1000, 2000, 5000, 10000, 20000, 50000, 80000), col = "white", lty = 1, lwd = 1.2)
lines(timeP[,2] , pch = 3, col = 3, type = "b")
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = 'l', bty = 'n', xaxt = 'n', yaxt = 'n')
legend('topright',d.list,pch=1:6,bty='o', col = 1:6, inset = c(0, .07), cex = 1.4)
#
#
dev.off()
sample.size <- 400
rep.runs <- 10
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("cam")
basis.list <- c("bspline")
prob.list <- c(1/4, 3/4)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
runInd <- 1
outTab <- data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl/nl_exp_",runInd, ".csv", sep = ""))[,-1])
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl/nl_exp_",runInd, ".csv", sep = ""))){
temp <- data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl/nl_exp_",runInd, ".csv", sep = ""))[,-1])
outTab <- rbind(outTab, temp)
} else {
missing <- c(missing, runInd)
}
}
missing
param.grid[536,]
sample.size <- 400
rep.runs <- 10
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("cam")
basis.list <- c("bspline")
prob.list <- c(1/4, 3/4)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
runInd <- 1
outTab <- data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl/nl_exp_",runInd, ".csv", sep = ""))[,-1])
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl/nl_exp_",runInd, ".csv", sep = ""))){
temp <- data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl/nl_exp_",runInd, ".csv", sep = ""))[,-1])
outTab <- rbind(outTab, temp)
} else {
missing <- c(missing, runInd)
}
}
missing
resTab <- aggregate(cbind(size, cover) ~ n + m + parentProb + k + distro +p, dat = outTab, FUN = mean)
resTab$size <- resTab$size / factorial(resTab$p)
resTab$size <- round(resTab$size, 2)
out <- reshape(resTab[, -which(names(resTab) %in% c("p"))], idvar = c("m", "distro", "parentProb", "n"),
direction = "wide",
timevar = "k")
multip <- -qnorm(.025 / 12)
ratioTab <- cbind(out[, c(4,3,2,1)],
momentCover = ifelse(out$cover.3 > .9 - multip * sqrt(.9 * .1 / 400), round(out$cover.3,3), paste("\\textbf{", round(out$cover.3,3),"}", sep = "")),
Trig10Cover = ifelse(out$cover.10 > .9 - multip * sqrt(.9 * .1 / 400), round(out$cover.10,3), paste("\\textbf{", round(out$cover.10,3),"}", sep = "")),
Trig100Cover = ifelse(out$cover.100 > .9 - multip * sqrt(.9 * .1 / 400), round(out$cover.100,3), paste("\\textbf{", round(out$cover.100,3),"}", sep = "")),
CombCover = ifelse(out$cover.103 > .9 - multip * sqrt(.9 * .1 / 400), round(out$cover.103,3), paste("\\textbf{", round(out$cover.103,3),"}", sep = "")),
momentSize = ifelse(out$cover.3 > .9 - multip * sqrt(.9 * .1 / 400), round(out$size.3,3), ""),
Trig10Size = ifelse(out$cover.10 > .9 - multip * sqrt(.9 * .1 / 400), round(out$size.10,3), ""),
Trig100Size = ifelse(out$cover.100 > .9 - multip * sqrt(.9 * .1 / 400), round(out$size.100,3), ""),
CombSize = ifelse(out$cover.103 > .9 - multip * sqrt(.9 * .1 / 400), round(out$size.103,3), ""))
library(tidyverse)
library(kableExtra)
printTab <- ratioTab
kbl(printTab[which(printTab$distro == "laplace"), -1], format = "latex", booktabs = T, align = "c",
linesep = c(rep("", 3), "\\addlinespace"), digits = 3, escape = F, row.names = F) %>%
add_header_above(c(" " = 3, "Coverage" = 4, "Prop of Unrejected" = 4)) %>%
collapse_rows(columns = c(1,2), valign = "middle")
sample.size <- 500
rep.runs <- 25
n.list <- c(500, 1000, 2500, 5000)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
dim(param.grid)
sample.size <- 200
rep.runs <- 25
n.list <- c(500, 1000, 2500, 5000)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
param.grid
sample.size <- 200
rep.runs <- 10
n.list <- c(500, 1000, 2500, 5000)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
param.grid
sample.size <- 100
rep.runs <- 5
n.list <- c(500, 1000, 2500, 5000)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
param.grid
factorial(1:5)
p <- 7
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
out$Y
max(abs(out$Y))
max(abs(out$Y))
p <- 7
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 7
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 7
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 7
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 7
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 7
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 7
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 7
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 7
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 7
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 7
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 7
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 7
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 7
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 7
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 7
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 7, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
70^5
70^7
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 5, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 5, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 5, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 5, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 5, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 5, h = 1, dist = "laplace",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 5, h = 1, dist = "gamma",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 5, h = 1, dist = "gamma",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 5, h = 1, dist = "gamma",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 5, h = 1, dist = "gamma",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 5, h = 1, dist = "gamma",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 5, h = 1, dist = "gamma",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 5, h = 1, dist = "gamma",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 5, h = 1, dist = "gamma",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
p <- 10
n <- 1000
parent_prob <- 3/4
out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,
funcType = "poly", M = 5, h = 1, dist = "gamma",
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
max(abs(out$Y))
