{
    "type": [
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.3.3 (2024-02-29) -- \"Angel Food Cake\"\nCopyright (C) 2024 The R Foundation for Statistical Computing\nPlatform: x86_64-pc-linux-gnu (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "sample.size <- 500",
        "> ",
        "rep.runs <- 25",
        "> ",
        "n.list <- c(500, 1000, 2500, 5000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\", \"mixed\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "dim(param.grid)",
        "[1] 480   2\n",
        "> ",
        "sample.size <- 200",
        "> ",
        "rep.runs <- 25",
        "> ",
        "n.list <- c(500, 1000, 2500, 5000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\", \"mixed\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "param.grid",
        "    Var1    Var2\n1    500    unif\n2   1000    unif\n3   2500    unif\n4   5000    unif\n5    500    unif\n6   1000    unif\n7   2500    unif\n8   5000    unif\n9    500    unif\n10  1000    unif\n11  2500    unif\n12  5000    unif\n13   500    unif\n14  1000    unif\n15  2500    unif\n16  5000    unif\n17   500    unif\n18  1000    unif\n19  2500    unif\n20  5000    unif\n21   500    unif\n22  1000    unif\n23  2500    unif\n24  5000    unif\n25   500    unif\n26  1000    unif\n27  2500    unif\n28  5000    unif\n29   500    unif\n30 ",
        " 1000    unif\n31  2500    unif\n32  5000    unif\n33   500 lognorm\n34  1000 lognorm\n35  2500 lognorm\n36  5000 lognorm\n37   500 lognorm\n38  1000 lognorm\n39  2500 lognorm\n40  5000 lognorm\n41   500 lognorm\n42  1000 lognorm\n43  2500 lognorm\n44  5000 lognorm\n45   500 lognorm\n46  1000 lognorm\n47  2500 lognorm\n48  5000 lognorm\n49   500 lognorm\n50  1000 lognorm\n51  2500 lognorm\n52  5000 lognorm\n53   500 lognorm\n54  1000 lognorm\n55  2500 lognorm\n56  5000 lognorm\n57   500 lognorm\n58  1000 lognorm\n59  2500 lognorm\n60  5000",
        " lognorm\n61   500 lognorm\n62  1000 lognorm\n63  2500 lognorm\n64  5000 lognorm\n65   500   gamma\n66  1000   gamma\n67  2500   gamma\n68  5000   gamma\n69   500   gamma\n70  1000   gamma\n71  2500   gamma\n72  5000   gamma\n73   500   gamma\n74  1000   gamma\n75  2500   gamma\n76  5000   gamma\n77   500   gamma\n78  1000   gamma\n79  2500   gamma\n80  5000   gamma\n81   500   gamma\n82  1000   gamma\n83  2500   gamma\n84  5000   gamma\n85   500   gamma\n86  1000   gamma\n87  2500   gamma\n88  5000   gamma\n89   500   gamma\n90  1000   gamma",
        "\n91  2500   gamma\n92  5000   gamma\n93   500   gamma\n94  1000   gamma\n95  2500   gamma\n96  5000   gamma\n97   500 weibull\n98  1000 weibull\n99  2500 weibull\n100 5000 weibull\n101  500 weibull\n102 1000 weibull\n103 2500 weibull\n104 5000 weibull\n105  500 weibull\n106 1000 weibull\n107 2500 weibull\n108 5000 weibull\n109  500 weibull\n110 1000 weibull\n111 2500 weibull\n112 5000 weibull\n113  500 weibull\n114 1000 weibull\n115 2500 weibull\n116 5000 weibull\n117  500 weibull\n118 1000 weibull\n119 2500 weibull\n120 5000 weibull\n121",
        "  500 weibull\n122 1000 weibull\n123 2500 weibull\n124 5000 weibull\n125  500 weibull\n126 1000 weibull\n127 2500 weibull\n128 5000 weibull\n129  500 laplace\n130 1000 laplace\n131 2500 laplace\n132 5000 laplace\n133  500 laplace\n134 1000 laplace\n135 2500 laplace\n136 5000 laplace\n137  500 laplace\n138 1000 laplace\n139 2500 laplace\n140 5000 laplace\n141  500 laplace\n142 1000 laplace\n143 2500 laplace\n144 5000 laplace\n145  500 laplace\n146 1000 laplace\n147 2500 laplace\n148 5000 laplace\n149  500 laplace\n150 1000 laplace\n151 2500",
        " laplace\n152 5000 laplace\n153  500 laplace\n154 1000 laplace\n155 2500 laplace\n156 5000 laplace\n157  500 laplace\n158 1000 laplace\n159 2500 laplace\n160 5000 laplace\n161  500   mixed\n162 1000   mixed\n163 2500   mixed\n164 5000   mixed\n165  500   mixed\n166 1000   mixed\n167 2500   mixed\n168 5000   mixed\n169  500   mixed\n170 1000   mixed\n171 2500   mixed\n172 5000   mixed\n173  500   mixed\n174 1000   mixed\n175 2500   mixed\n176 5000   mixed\n177  500   mixed\n178 1000   mixed\n179 2500   mixed\n180 5000   mixed\n181  500   mixed",
        "\n182 1000   mixed\n183 2500   mixed\n184 5000   mixed\n185  500   mixed\n186 1000   mixed\n187 2500   mixed\n188 5000   mixed\n189  500   mixed\n190 1000   mixed\n191 2500   mixed\n192 5000   mixed\n",
        "> ",
        "sample.size <- 200",
        "> ",
        "rep.runs <- 10",
        "> ",
        "n.list <- c(500, 1000, 2500, 5000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\", \"mixed\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "param.grid",
        "    Var1    Var2\n1    500    unif\n2   1000    unif\n3   2500    unif\n4   5000    unif\n5    500    unif\n6   1000    unif\n7   2500    unif\n8   5000    unif\n9    500    unif\n10  1000    unif\n11  2500    unif\n12  5000    unif\n13   500    unif\n14  1000    unif\n15  2500    unif\n16  5000    unif\n17   500    unif\n18  1000    unif\n19  2500    unif\n20  5000    unif\n21   500    unif\n22  1000    unif\n23  2500    unif\n24  5000    unif\n25   500    unif\n26  1000    unif\n27  2500    unif\n28  5000    unif\n29   500    unif\n30 ",
        " 1000    unif\n31  2500    unif\n32  5000    unif\n33   500    unif\n34  1000    unif\n35  2500    unif\n36  5000    unif\n37   500    unif\n38  1000    unif\n39  2500    unif\n40  5000    unif\n41   500    unif\n42  1000    unif\n43  2500    unif\n44  5000    unif\n45   500    unif\n46  1000    unif\n47  2500    unif\n48  5000    unif\n49   500    unif\n50  1000    unif\n51  2500    unif\n52  5000    unif\n53   500    unif\n54  1000    unif\n55  2500    unif\n56  5000    unif\n57   500    unif\n58  1000    unif\n59  2500    unif\n60  5000",
        "    unif\n61   500    unif\n62  1000    unif\n63  2500    unif\n64  5000    unif\n65   500    unif\n66  1000    unif\n67  2500    unif\n68  5000    unif\n69   500    unif\n70  1000    unif\n71  2500    unif\n72  5000    unif\n73   500    unif\n74  1000    unif\n75  2500    unif\n76  5000    unif\n77   500    unif\n78  1000    unif\n79  2500    unif\n80  5000    unif\n81   500 lognorm\n82  1000 lognorm\n83  2500 lognorm\n84  5000 lognorm\n85   500 lognorm\n86  1000 lognorm\n87  2500 lognorm\n88  5000 lognorm\n89   500 lognorm\n90  1000 lognorm",
        "\n91  2500 lognorm\n92  5000 lognorm\n93   500 lognorm\n94  1000 lognorm\n95  2500 lognorm\n96  5000 lognorm\n97   500 lognorm\n98  1000 lognorm\n99  2500 lognorm\n100 5000 lognorm\n101  500 lognorm\n102 1000 lognorm\n103 2500 lognorm\n104 5000 lognorm\n105  500 lognorm\n106 1000 lognorm\n107 2500 lognorm\n108 5000 lognorm\n109  500 lognorm\n110 1000 lognorm\n111 2500 lognorm\n112 5000 lognorm\n113  500 lognorm\n114 1000 lognorm\n115 2500 lognorm\n116 5000 lognorm\n117  500 lognorm\n118 1000 lognorm\n119 2500 lognorm\n120 5000 lognorm\n121",
        "  500 lognorm\n122 1000 lognorm\n123 2500 lognorm\n124 5000 lognorm\n125  500 lognorm\n126 1000 lognorm\n127 2500 lognorm\n128 5000 lognorm\n129  500 lognorm\n130 1000 lognorm\n131 2500 lognorm\n132 5000 lognorm\n133  500 lognorm\n134 1000 lognorm\n135 2500 lognorm\n136 5000 lognorm\n137  500 lognorm\n138 1000 lognorm\n139 2500 lognorm\n140 5000 lognorm\n141  500 lognorm\n142 1000 lognorm\n143 2500 lognorm\n144 5000 lognorm\n145  500 lognorm\n146 1000 lognorm\n147 2500 lognorm\n148 5000 lognorm\n149  500 lognorm\n150 1000 lognorm\n151 2500",
        " lognorm\n152 5000 lognorm\n153  500 lognorm\n154 1000 lognorm\n155 2500 lognorm\n156 5000 lognorm\n157  500 lognorm\n158 1000 lognorm\n159 2500 lognorm\n160 5000 lognorm\n161  500   gamma\n162 1000   gamma\n163 2500   gamma\n164 5000   gamma\n165  500   gamma\n166 1000   gamma\n167 2500   gamma\n168 5000   gamma\n169  500   gamma\n170 1000   gamma\n171 2500   gamma\n172 5000   gamma\n173  500   gamma\n174 1000   gamma\n175 2500   gamma\n176 5000   gamma\n177  500   gamma\n178 1000   gamma\n179 2500   gamma\n180 5000   gamma\n181  500   gamma",
        "\n182 1000   gamma\n183 2500   gamma\n184 5000   gamma\n185  500   gamma\n186 1000   gamma\n187 2500   gamma\n188 5000   gamma\n189  500   gamma\n190 1000   gamma\n191 2500   gamma\n192 5000   gamma\n193  500   gamma\n194 1000   gamma\n195 2500   gamma\n196 5000   gamma\n197  500   gamma\n198 1000   gamma\n199 2500   gamma\n200 5000   gamma\n201  500   gamma\n202 1000   gamma\n203 2500   gamma\n204 5000   gamma\n205  500   gamma\n206 1000   gamma\n207 2500   gamma\n208 5000   gamma\n209  500   gamma\n210 1000   gamma\n211 2500   gamma\n212",
        " 5000   gamma\n213  500   gamma\n214 1000   gamma\n215 2500   gamma\n216 5000   gamma\n217  500   gamma\n218 1000   gamma\n219 2500   gamma\n220 5000   gamma\n221  500   gamma\n222 1000   gamma\n223 2500   gamma\n224 5000   gamma\n225  500   gamma\n226 1000   gamma\n227 2500   gamma\n228 5000   gamma\n229  500   gamma\n230 1000   gamma\n231 2500   gamma\n232 5000   gamma\n233  500   gamma\n234 1000   gamma\n235 2500   gamma\n236 5000   gamma\n237  500   gamma\n238 1000   gamma\n239 2500   gamma\n240 5000   gamma\n241  500 weibull\n242 1000",
        " weibull\n243 2500 weibull\n244 5000 weibull\n245  500 weibull\n246 1000 weibull\n247 2500 weibull\n248 5000 weibull\n249  500 weibull\n250 1000 weibull\n251 2500 weibull\n252 5000 weibull\n253  500 weibull\n254 1000 weibull\n255 2500 weibull\n256 5000 weibull\n257  500 weibull\n258 1000 weibull\n259 2500 weibull\n260 5000 weibull\n261  500 weibull\n262 1000 weibull\n263 2500 weibull\n264 5000 weibull\n265  500 weibull\n266 1000 weibull\n267 2500 weibull\n268 5000 weibull\n269  500 weibull\n270 1000 weibull\n271 2500 weibull\n272 5000 weibull",
        "\n273  500 weibull\n274 1000 weibull\n275 2500 weibull\n276 5000 weibull\n277  500 weibull\n278 1000 weibull\n279 2500 weibull\n280 5000 weibull\n281  500 weibull\n282 1000 weibull\n283 2500 weibull\n284 5000 weibull\n285  500 weibull\n286 1000 weibull\n287 2500 weibull\n288 5000 weibull\n289  500 weibull\n290 1000 weibull\n291 2500 weibull\n292 5000 weibull\n293  500 weibull\n294 1000 weibull\n295 2500 weibull\n296 5000 weibull\n297  500 weibull\n298 1000 weibull\n299 2500 weibull\n300 5000 weibull\n301  500 weibull\n302 1000 weibull\n303",
        " 2500 weibull\n304 5000 weibull\n305  500 weibull\n306 1000 weibull\n307 2500 weibull\n308 5000 weibull\n309  500 weibull\n310 1000 weibull\n311 2500 weibull\n312 5000 weibull\n313  500 weibull\n314 1000 weibull\n315 2500 weibull\n316 5000 weibull\n317  500 weibull\n318 1000 weibull\n319 2500 weibull\n320 5000 weibull\n321  500 laplace\n322 1000 laplace\n323 2500 laplace\n324 5000 laplace\n325  500 laplace\n326 1000 laplace\n327 2500 laplace\n328 5000 laplace\n329  500 laplace\n330 1000 laplace\n331 2500 laplace\n332 5000 laplace\n333  500",
        " laplace\n334 1000 laplace\n335 2500 laplace\n336 5000 laplace\n337  500 laplace\n338 1000 laplace\n339 2500 laplace\n340 5000 laplace\n341  500 laplace\n342 1000 laplace\n343 2500 laplace\n344 5000 laplace\n345  500 laplace\n346 1000 laplace\n347 2500 laplace\n348 5000 laplace\n349  500 laplace\n350 1000 laplace\n351 2500 laplace\n352 5000 laplace\n353  500 laplace\n354 1000 laplace\n355 2500 laplace\n356 5000 laplace\n357  500 laplace\n358 1000 laplace\n359 2500 laplace\n360 5000 laplace\n361  500 laplace\n362 1000 laplace\n363 2500 laplace",
        "\n364 5000 laplace\n365  500 laplace\n366 1000 laplace\n367 2500 laplace\n368 5000 laplace\n369  500 laplace\n370 1000 laplace\n371 2500 laplace\n372 5000 laplace\n373  500 laplace\n374 1000 laplace\n375 2500 laplace\n376 5000 laplace\n377  500 laplace\n378 1000 laplace\n379 2500 laplace\n380 5000 laplace\n381  500 laplace\n382 1000 laplace\n383 2500 laplace\n384 5000 laplace\n385  500 laplace\n386 1000 laplace\n387 2500 laplace\n388 5000 laplace\n389  500 laplace\n390 1000 laplace\n391 2500 laplace\n392 5000 laplace\n393  500 laplace\n394",
        " 1000 laplace\n395 2500 laplace\n396 5000 laplace\n397  500 laplace\n398 1000 laplace\n399 2500 laplace\n400 5000 laplace\n401  500   mixed\n402 1000   mixed\n403 2500   mixed\n404 5000   mixed\n405  500   mixed\n406 1000   mixed\n407 2500   mixed\n408 5000   mixed\n409  500   mixed\n410 1000   mixed\n411 2500   mixed\n412 5000   mixed\n413  500   mixed\n414 1000   mixed\n415 2500   mixed\n416 5000   mixed\n417  500   mixed\n418 1000   mixed\n419 2500   mixed\n420 5000   mixed\n421  500   mixed\n422 1000   mixed\n423 2500   mixed\n424 5000",
        "   mixed\n425  500   mixed\n426 1000   mixed\n427 2500   mixed\n428 5000   mixed\n429  500   mixed\n430 1000   mixed\n431 2500   mixed\n432 5000   mixed\n433  500   mixed\n434 1000   mixed\n435 2500   mixed\n436 5000   mixed\n437  500   mixed\n438 1000   mixed\n439 2500   mixed\n440 5000   mixed\n441  500   mixed\n442 1000   mixed\n443 2500   mixed\n444 5000   mixed\n445  500   mixed\n446 1000   mixed\n447 2500   mixed\n448 5000   mixed\n449  500   mixed\n450 1000   mixed\n451 2500   mixed\n452 5000   mixed\n453  500   mixed\n454 1000   mixed",
        "\n455 2500   mixed\n456 5000   mixed\n457  500   mixed\n458 1000   mixed\n459 2500   mixed\n460 5000   mixed\n461  500   mixed\n462 1000   mixed\n463 2500   mixed\n464 5000   mixed\n465  500   mixed\n466 1000   mixed\n467 2500   mixed\n468 5000   mixed\n469  500   mixed\n470 1000   mixed\n471 2500   mixed\n472 5000   mixed\n473  500   mixed\n474 1000   mixed\n475 2500   mixed\n476 5000   mixed\n477  500   mixed\n478 1000   mixed\n479 2500   mixed\n480 5000   mixed\n",
        "> ",
        "sample.size <- 100",
        "> ",
        "rep.runs <- 5",
        "> ",
        "n.list <- c(500, 1000, 2500, 5000)",
        "> ",
        "d.list <- c(\"unif\", \"lognorm\", \"gamma\", \"weibull\", \"laplace\", \"mixed\")",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)",
        "> ",
        "param.grid",
        "    Var1    Var2\n1    500    unif\n2   1000    unif\n3   2500    unif\n4   5000    unif\n5    500    unif\n6   1000    unif\n7   2500    unif\n8   5000    unif\n9    500    unif\n10  1000    unif\n11  2500    unif\n12  5000    unif\n13   500    unif\n14  1000    unif\n15  2500    unif\n16  5000    unif\n17   500    unif\n18  1000    unif\n19  2500    unif\n20  5000    unif\n21   500    unif\n22  1000    unif\n23  2500    unif\n24  5000    unif\n25   500    unif\n26  1000    unif\n27  2500    unif\n28  5000    unif\n29   500    unif\n30 ",
        " 1000    unif\n31  2500    unif\n32  5000    unif\n33   500    unif\n34  1000    unif\n35  2500    unif\n36  5000    unif\n37   500    unif\n38  1000    unif\n39  2500    unif\n40  5000    unif\n41   500    unif\n42  1000    unif\n43  2500    unif\n44  5000    unif\n45   500    unif\n46  1000    unif\n47  2500    unif\n48  5000    unif\n49   500    unif\n50  1000    unif\n51  2500    unif\n52  5000    unif\n53   500    unif\n54  1000    unif\n55  2500    unif\n56  5000    unif\n57   500    unif\n58  1000    unif\n59  2500    unif\n60  5000",
        "    unif\n61   500    unif\n62  1000    unif\n63  2500    unif\n64  5000    unif\n65   500    unif\n66  1000    unif\n67  2500    unif\n68  5000    unif\n69   500    unif\n70  1000    unif\n71  2500    unif\n72  5000    unif\n73   500    unif\n74  1000    unif\n75  2500    unif\n76  5000    unif\n77   500    unif\n78  1000    unif\n79  2500    unif\n80  5000    unif\n81   500 lognorm\n82  1000 lognorm\n83  2500 lognorm\n84  5000 lognorm\n85   500 lognorm\n86  1000 lognorm\n87  2500 lognorm\n88  5000 lognorm\n89   500 lognorm\n90  1000 lognorm",
        "\n91  2500 lognorm\n92  5000 lognorm\n93   500 lognorm\n94  1000 lognorm\n95  2500 lognorm\n96  5000 lognorm\n97   500 lognorm\n98  1000 lognorm\n99  2500 lognorm\n100 5000 lognorm\n101  500 lognorm\n102 1000 lognorm\n103 2500 lognorm\n104 5000 lognorm\n105  500 lognorm\n106 1000 lognorm\n107 2500 lognorm\n108 5000 lognorm\n109  500 lognorm\n110 1000 lognorm\n111 2500 lognorm\n112 5000 lognorm\n113  500 lognorm\n114 1000 lognorm\n115 2500 lognorm\n116 5000 lognorm\n117  500 lognorm\n118 1000 lognorm\n119 2500 lognorm\n120 5000 lognorm\n121",
        "  500 lognorm\n122 1000 lognorm\n123 2500 lognorm\n124 5000 lognorm\n125  500 lognorm\n126 1000 lognorm\n127 2500 lognorm\n128 5000 lognorm\n129  500 lognorm\n130 1000 lognorm\n131 2500 lognorm\n132 5000 lognorm\n133  500 lognorm\n134 1000 lognorm\n135 2500 lognorm\n136 5000 lognorm\n137  500 lognorm\n138 1000 lognorm\n139 2500 lognorm\n140 5000 lognorm\n141  500 lognorm\n142 1000 lognorm\n143 2500 lognorm\n144 5000 lognorm\n145  500 lognorm\n146 1000 lognorm\n147 2500 lognorm\n148 5000 lognorm\n149  500 lognorm\n150 1000 lognorm\n151 2500",
        " lognorm\n152 5000 lognorm\n153  500 lognorm\n154 1000 lognorm\n155 2500 lognorm\n156 5000 lognorm\n157  500 lognorm\n158 1000 lognorm\n159 2500 lognorm\n160 5000 lognorm\n161  500   gamma\n162 1000   gamma\n163 2500   gamma\n164 5000   gamma\n165  500   gamma\n166 1000   gamma\n167 2500   gamma\n168 5000   gamma\n169  500   gamma\n170 1000   gamma\n171 2500   gamma\n172 5000   gamma\n173  500   gamma\n174 1000   gamma\n175 2500   gamma\n176 5000   gamma\n177  500   gamma\n178 1000   gamma\n179 2500   gamma\n180 5000   gamma\n181  500   gamma",
        "\n182 1000   gamma\n183 2500   gamma\n184 5000   gamma\n185  500   gamma\n186 1000   gamma\n187 2500   gamma\n188 5000   gamma\n189  500   gamma\n190 1000   gamma\n191 2500   gamma\n192 5000   gamma\n193  500   gamma\n194 1000   gamma\n195 2500   gamma\n196 5000   gamma\n197  500   gamma\n198 1000   gamma\n199 2500   gamma\n200 5000   gamma\n201  500   gamma\n202 1000   gamma\n203 2500   gamma\n204 5000   gamma\n205  500   gamma\n206 1000   gamma\n207 2500   gamma\n208 5000   gamma\n209  500   gamma\n210 1000   gamma\n211 2500   gamma\n212",
        " 5000   gamma\n213  500   gamma\n214 1000   gamma\n215 2500   gamma\n216 5000   gamma\n217  500   gamma\n218 1000   gamma\n219 2500   gamma\n220 5000   gamma\n221  500   gamma\n222 1000   gamma\n223 2500   gamma\n224 5000   gamma\n225  500   gamma\n226 1000   gamma\n227 2500   gamma\n228 5000   gamma\n229  500   gamma\n230 1000   gamma\n231 2500   gamma\n232 5000   gamma\n233  500   gamma\n234 1000   gamma\n235 2500   gamma\n236 5000   gamma\n237  500   gamma\n238 1000   gamma\n239 2500   gamma\n240 5000   gamma\n241  500 weibull\n242 1000",
        " weibull\n243 2500 weibull\n244 5000 weibull\n245  500 weibull\n246 1000 weibull\n247 2500 weibull\n248 5000 weibull\n249  500 weibull\n250 1000 weibull\n251 2500 weibull\n252 5000 weibull\n253  500 weibull\n254 1000 weibull\n255 2500 weibull\n256 5000 weibull\n257  500 weibull\n258 1000 weibull\n259 2500 weibull\n260 5000 weibull\n261  500 weibull\n262 1000 weibull\n263 2500 weibull\n264 5000 weibull\n265  500 weibull\n266 1000 weibull\n267 2500 weibull\n268 5000 weibull\n269  500 weibull\n270 1000 weibull\n271 2500 weibull\n272 5000 weibull",
        "\n273  500 weibull\n274 1000 weibull\n275 2500 weibull\n276 5000 weibull\n277  500 weibull\n278 1000 weibull\n279 2500 weibull\n280 5000 weibull\n281  500 weibull\n282 1000 weibull\n283 2500 weibull\n284 5000 weibull\n285  500 weibull\n286 1000 weibull\n287 2500 weibull\n288 5000 weibull\n289  500 weibull\n290 1000 weibull\n291 2500 weibull\n292 5000 weibull\n293  500 weibull\n294 1000 weibull\n295 2500 weibull\n296 5000 weibull\n297  500 weibull\n298 1000 weibull\n299 2500 weibull\n300 5000 weibull\n301  500 weibull\n302 1000 weibull\n303",
        " 2500 weibull\n304 5000 weibull\n305  500 weibull\n306 1000 weibull\n307 2500 weibull\n308 5000 weibull\n309  500 weibull\n310 1000 weibull\n311 2500 weibull\n312 5000 weibull\n313  500 weibull\n314 1000 weibull\n315 2500 weibull\n316 5000 weibull\n317  500 weibull\n318 1000 weibull\n319 2500 weibull\n320 5000 weibull\n321  500 laplace\n322 1000 laplace\n323 2500 laplace\n324 5000 laplace\n325  500 laplace\n326 1000 laplace\n327 2500 laplace\n328 5000 laplace\n329  500 laplace\n330 1000 laplace\n331 2500 laplace\n332 5000 laplace\n333  500",
        " laplace\n334 1000 laplace\n335 2500 laplace\n336 5000 laplace\n337  500 laplace\n338 1000 laplace\n339 2500 laplace\n340 5000 laplace\n341  500 laplace\n342 1000 laplace\n343 2500 laplace\n344 5000 laplace\n345  500 laplace\n346 1000 laplace\n347 2500 laplace\n348 5000 laplace\n349  500 laplace\n350 1000 laplace\n351 2500 laplace\n352 5000 laplace\n353  500 laplace\n354 1000 laplace\n355 2500 laplace\n356 5000 laplace\n357  500 laplace\n358 1000 laplace\n359 2500 laplace\n360 5000 laplace\n361  500 laplace\n362 1000 laplace\n363 2500 laplace",
        "\n364 5000 laplace\n365  500 laplace\n366 1000 laplace\n367 2500 laplace\n368 5000 laplace\n369  500 laplace\n370 1000 laplace\n371 2500 laplace\n372 5000 laplace\n373  500 laplace\n374 1000 laplace\n375 2500 laplace\n376 5000 laplace\n377  500 laplace\n378 1000 laplace\n379 2500 laplace\n380 5000 laplace\n381  500 laplace\n382 1000 laplace\n383 2500 laplace\n384 5000 laplace\n385  500 laplace\n386 1000 laplace\n387 2500 laplace\n388 5000 laplace\n389  500 laplace\n390 1000 laplace\n391 2500 laplace\n392 5000 laplace\n393  500 laplace\n394",
        " 1000 laplace\n395 2500 laplace\n396 5000 laplace\n397  500 laplace\n398 1000 laplace\n399 2500 laplace\n400 5000 laplace\n401  500   mixed\n402 1000   mixed\n403 2500   mixed\n404 5000   mixed\n405  500   mixed\n406 1000   mixed\n407 2500   mixed\n408 5000   mixed\n409  500   mixed\n410 1000   mixed\n411 2500   mixed\n412 5000   mixed\n413  500   mixed\n414 1000   mixed\n415 2500   mixed\n416 5000   mixed\n417  500   mixed\n418 1000   mixed\n419 2500   mixed\n420 5000   mixed\n421  500   mixed\n422 1000   mixed\n423 2500   mixed\n424 5000",
        "   mixed\n425  500   mixed\n426 1000   mixed\n427 2500   mixed\n428 5000   mixed\n429  500   mixed\n430 1000   mixed\n431 2500   mixed\n432 5000   mixed\n433  500   mixed\n434 1000   mixed\n435 2500   mixed\n436 5000   mixed\n437  500   mixed\n438 1000   mixed\n439 2500   mixed\n440 5000   mixed\n441  500   mixed\n442 1000   mixed\n443 2500   mixed\n444 5000   mixed\n445  500   mixed\n446 1000   mixed\n447 2500   mixed\n448 5000   mixed\n449  500   mixed\n450 1000   mixed\n451 2500   mixed\n452 5000   mixed\n453  500   mixed\n454 1000   mixed",
        "\n455 2500   mixed\n456 5000   mixed\n457  500   mixed\n458 1000   mixed\n459 2500   mixed\n460 5000   mixed\n461  500   mixed\n462 1000   mixed\n463 2500   mixed\n464 5000   mixed\n465  500   mixed\n466 1000   mixed\n467 2500   mixed\n468 5000   mixed\n469  500   mixed\n470 1000   mixed\n471 2500   mixed\n472 5000   mixed\n473  500   mixed\n474 1000   mixed\n475 2500   mixed\n476 5000   mixed\n477  500   mixed\n478 1000   mixed\n479 2500   mixed\n480 5000   mixed\n",
        "> ",
        "factorial(1:5)",
        "[1]   1   2   6  24 120\n",
        "> ",
        "p <- 7",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "out$Y",
        "                [,1]          [,2]          [,3]         [,4]         [,5]          [,6]\n   [1,]  0.197497214  0.3301219155  1.412417e-01 -0.592389689   0.85411556  1.0600717343\n   [2,] -0.852780514 -0.4821007668  2.834233e-01  0.331752982  -1.19909926  0.0528515230\n   [3,]  1.802090565  1.0401912856 -7.307780e-02 -0.909054389   2.63172086 -0.1357486506\n   [4,]  1.693844072  1.2767939580 -5.451837e-01 -1.491801393   4.05754531  0.6255586918\n   [5,]  1.857927113  0.8250575030 -2.485623e-01 -0.498914097   2.41420359",
        " -0.4837682221\n   [6,] -0.795240092 -0.3516281372  3.874699e-01 -0.031622021  -1.10261905  0.2790712823\n   [7,]  2.345026436  1.2183797397 -2.629374e-01 -0.785904434   3.44138134 -0.2351666864\n   [8,]  0.998266968  0.9070443780 -6.322336e-01 -0.824544520   3.12419570  0.8283316017\n   [9,] -0.079978478  0.0287871259 -7.080464e-02 -0.093822804   0.40634713  0.3526125093\n  [10,] -0.306417468 -0.4922838654 -8.970172e-02  0.721536087  -0.81275853 -0.7363925015\n  [11,]  2.806219437  1.3791475781 -3.899488e-01 -0.754691713",
        "   3.87490975 -0.6642569095\n  [12,]  0.244743845  0.1006863125  1.555469e-02 -0.232140118   0.63981110  0.4354472881\n  [13,]  0.355565938  0.3111035780 -2.127242e-01 -0.288151008   1.45041853  0.4887827624\n  [14,] -1.623754927 -1.1972476348  4.710372e-01  1.058128514  -3.21558556 -0.9043917033\n  [15,]  0.174642514  0.1246906364  9.881991e-02 -0.155111467   0.28222970 -0.0951258660\n  [16,] -0.844921050 -0.5054432506  3.852675e-01  0.072157144  -1.27566185  0.1881549748\n  [17,] -0.538562833 -0.2088493914  1.628152e-01",
        "  0.224070054  -0.48424629  0.0627139744\n  [18,] -0.423063476 -0.0622093612 -2.536519e-02 -0.180505727   0.21076084  0.3091247879\n  [19,]  1.759647042  1.1475559142 -1.598794e-01 -1.213578590   3.14390332  0.4396963069\n  [20,] -0.725947444 -0.5051686514  2.259473e-01  0.202337911  -1.21164823 -0.0781305499\n  [21,]  0.202103609  0.1115524579 -6.669857e-02 -0.261938616   0.65680497  0.6769648240\n  [22,] -0.349390813 -0.0514156246 -1.262849e-01 -0.505504413   0.33177620  0.3792017719\n  [23,]  0.249387983  0.3943777489",
        " -2.625330e-01 -0.475459193   1.46822050  0.9464805440\n  [24,]  0.357516593  0.3082042869 -7.679115e-02 -0.486849322   1.15715758  0.4988973848\n  [25,] -0.505917492 -0.2177261974 -1.125084e-03 -0.041245328   0.26305167  0.4244014735\n  [26,]  1.005048394  0.5415951049 -2.012442e-01 -0.355024856   1.00392187  0.1310098928\n  [27,]  0.248914884  0.3031466439 -4.617529e-01 -1.076713946   1.77411792  0.8173999889\n  [28,] -0.191296682 -0.4006209177 -6.767939e-03  0.073659802  -0.49423575 -0.0780633265\n  [29,] -0.799504256",
        " -0.5408924910 -2.761406e-01  0.476425603  -0.41459200  0.6411720739\n  [30,]  0.168702864  0.3293967453 -2.708370e-01 -0.542044929   1.83845054  1.1192961362\n  [31,]  4.679348593  1.6192234754 -6.436493e-01 -0.591759288   4.45642445 -5.5275768794\n  [32,] -0.144580836 -0.0951007455  2.293949e-02 -0.102855158  -0.14174922  0.2394362843\n  [33,] -1.102944324 -1.0206877483  4.557266e-01  0.869860444  -2.99768727 -0.6705192692\n  [34,] -3.129144722 -2.6108637609  1.534819e+00  4.050804703 -11.53887293 -4.6933654488",
        "\n  [35,] -0.020540721 -0.2492318689 -3.578952e-02  0.083953679  -0.16002313  0.0087797351\n  [36,]  0.083555164  0.0717516137 -4.411850e-02  0.018515383   0.22674030  0.0799799747\n  [37,]  1.180751105  1.0272769209 -2.533812e-01 -0.925667775   2.58077967 -0.0903871413\n  [38,] -1.304015266 -0.9499951709  3.618143e-01  0.574147870  -2.91319802 -0.7859504520\n  [39,] -1.992986364 -1.5690690619  2.122630e-01  1.262067083  -3.60421164 -1.4516605459\n  [40,]  1.010676324  0.9302561069 -5.086357e-01 -0.835336301   2.93667362",
        "  0.9073789315\n  [41,] -0.340253525 -0.3696062311  2.362057e-01  0.264710761  -0.99974316 -0.3330337044\n  [42,]  0.028391112  0.1099650040  1.277311e-01 -0.387081432  -0.03273410 -0.0806310009\n  [43,]  1.337749581  0.7965050230 -6.231471e-01 -0.689177992   2.81751909 -0.1442727129\n  [44,]  2.049237811  1.0149945407 -6.082755e-01 -0.346670776   2.97399135  0.0786479790\n  [45,] -1.092348873 -0.8739523853  5.078878e-01  0.862180950  -3.07708715 -0.7690583230\n  [46,]  0.088355471 -0.0496526123 -2.226135e-01 -0.515187481",
        "   0.71572319  0.2910222120\n  [47,]  0.315232160  0.4075496458 -2.362596e-01 -0.566250252   1.97944548  0.3216511011\n  [48,] -0.445151868  0.0552232798 -4.902607e-01 -0.206168803   1.40893497  1.7030378758\n  [49,]  0.293453940  0.3110623895  1.036809e-01 -1.129953150   0.67281122  0.6108529466\n  [50,]  1.036178767  0.7479862008 -2.949513e-01 -0.853160933   2.41323128  0.5496181211\n  [51,] -0.783597295 -0.8472766385  2.336344e-01  0.958741263  -2.02887853 -0.5543510338\n  [52,]  0.316592056  0.2325835963 -3.593253e-01",
        " -0.314614340   1.37012614 -0.0116425235\n  [53,] -0.224861136 -0.1212218086 -3.127916e-02 -0.509907655  -0.17238209 -0.1557321239\n  [54,] -0.250937370 -0.2902326330  1.162792e-01 -0.027996549  -0.44913645  0.0118481966\n  [55,]  0.042418071  0.0764402866 -1.613366e-01 -0.217952947   0.52026893  0.4840468267\n  [56,]  0.865535062  0.6529378645 -1.315999e-01 -0.681962455   1.77998188  0.5090284952\n  [57,]  0.073569666  0.1388267054 -4.249275e-01 -0.122495641   1.09943535  0.7266798917\n  [58,] -0.154327727  0.0898625858",
        " -5.402381e-01  0.005072401   0.46975860  0.6432280751\n  [59,] -2.482167067 -1.9534809944  1.165559e+00  2.489164198  -7.60360123 -3.7391248997\n  [60,] -0.167892225  0.3985013932 -2.371720e-01 -0.583928354   1.29187687  1.0418370067\n  [61,] -0.586246950 -0.5455020978  1.976985e-02  0.691312847  -1.03955049 -0.1765790491\n  [62,] -1.091653966 -0.4093876325  1.242858e-01 -0.511717517  -0.35122194  0.5433300428\n  [63,] -0.333213130  0.0260797279 -2.660125e-01 -0.281230660   0.86463206  0.7252697025\n  [64,] -0.650373305",
        " -0.3536409250 -3.118813e-03 -0.253127629  -0.47512857  0.4364349934\n  [65,] -0.468697497 -0.0177788555 -3.173221e-02 -0.387718342   0.39588675  1.0356148697\n  [66,] -0.772087371 -0.4628493758  6.204517e-01  0.349539952  -2.14073621 -0.1203778436\n  [67,] -0.415170458 -0.1042685720  1.134869e-01 -0.160521386  -0.09070127  0.0596481794\n  [68,]  3.769162811  1.5401021321 -3.383842e-01 -1.068212915   4.00413654 -2.3713953468\n  [69,]  2.202546335  1.7921974599 -6.448865e-01 -2.005439379   6.08893119  1.0576657314",
        "\n  [70,]  0.072167343  0.0617192005 -1.112212e-01  1.029975762   0.14891915 -0.7513823944\n  [71,]  0.047531647  0.0997362029 -3.053211e-02 -0.268216833   0.54973429  0.4380188976\n  [72,]  3.922798076  1.7055094552 -1.265993e+00 -0.972624152   5.20443701 -2.4543157419\n  [73,] -0.198558465  0.2581446542 -2.212339e-01 -0.599402452   1.07171241  0.6770608371\n  [74,]  0.259214796  0.4433167622 -1.183412e-01 -0.587199395   1.58424443  0.6628154644\n  [75,] -1.321247998 -0.7909202112  4.712660e-01  0.393339127  -2.02849014",
        "  0.3118344616\n  [76,]  0.694910198  0.2387319874 -1.194727e-01  0.091974460   0.73373678  0.1648657737\n  [77,]  0.075236247  0.0100625450  3.669997e-01 -0.291851264  -0.44325704  0.0872625546\n  [78,]  1.520999322  0.7818442758 -4.673105e-01 -0.437670893   2.49936276  0.5801543675\n  [79,]  0.873985936  0.3338144254 -1.437853e-01 -0.408282832   1.38581967  0.1326525906\n  [80,] -1.501338194 -1.0840750647  4.538098e-01  0.773219576  -2.98908145 -0.6158912251\n  [81,] -0.553698385 -0.3154381440  1.965934e-01  0.069407613",
        "  -0.65285095  0.1256601748\n  [82,] -0.649324091 -0.6354095347  8.620601e-01  0.682487389  -3.24418537 -0.6849523366\n  [83,] -0.361586415 -0.0897413892 -3.016406e-01 -0.142998088   0.74896634  0.7067534042\n  [84,]  0.183079275  0.3660525406 -1.802305e-01 -0.447142983   1.84908934  0.9053575140\n  [85,]  0.968940621  0.8478679023 -4.100538e-01 -0.721322667   3.33903262  0.8190194584\n  [86,] -0.119305949 -0.2918363166 -4.571629e-02 -0.030753791   0.30619241  0.7236300420\n  [87,] -0.159718358  0.2024186174 -2.152881e-01",
        " -0.467413119   0.86853846  0.7819622001\n  [88,] -0.137052722  0.0599561632 -3.110784e-01 -0.011991065   0.55808837  0.5531835777\n  [89,]  0.184348036  0.3848002012  8.527576e-02 -0.339862512   0.83142389  0.7291932216\n  [90,] -0.528215290 -0.2659702851  3.313386e-01  0.006416213  -0.67229876  0.5062049053\n  [91,]  1.121865266  0.7900900235 -7.746919e-01 -0.116891956   2.25934886  0.6193439164\n  [92,]  0.349695813  0.2235621605 -3.741002e-01 -0.059165066   0.97051690  0.0571282421\n  [93,] -0.613475689 -0.0901150139",
        "  8.330385e-02  0.139451136   0.65751603  0.7209675387\n  [94,]  0.049860071 -0.3544889545  1.726289e-01  0.425002132  -0.78584013 -0.3822182821\n  [95,] -0.527278539 -0.2427636514  3.051338e-01  0.089501569  -0.29884437  0.3236870228\n  [96,]  0.832946148  0.5757239564 -8.228849e-03 -0.626779616   1.73598445  0.8033644886\n  [97,] -0.740298384 -0.2863804009  4.986651e-01  0.010890404  -1.21106536  0.0959762432\n  [98,] -1.177556227 -0.8549676285  4.834933e-01  0.124055173  -2.42738838 -0.4898255631\n  [99,]  0.535435105",
        "  0.3327278767  2.417323e-01 -0.453269890   0.63538254  0.2900054484\n [100,] -0.333754595 -0.2065829437  1.183862e-01  0.121746873  -0.18210765  0.4849761914\n [101,]  0.016136112  0.1075917368 -3.980972e-01 -0.140870791   1.06405446  0.6415046713\n [102,] -0.267627112 -0.0853800504 -1.415271e-02  0.185209972   0.04840379  1.0246186770\n [103,]  0.642703196  0.4961225411 -4.193721e-01 -0.268024693   1.55934712  0.6283417244\n [104,]  0.247997782  0.3334107227 -2.495345e-02 -0.612773319   0.93586804  0.9494790499",
        "\n [105,]  0.034717729  0.2118276629 -7.061397e-01  0.065633283   1.13717870  0.6979968114\n [106,]  0.641793894  0.3640997608 -2.506643e-01 -0.217182461   1.62605827  0.2249018171\n [107,]  3.813438156  1.3008610297 -6.296166e-01  0.070019069   3.70111568 -2.9875810514\n [108,]  0.184675407  0.3869382781 -4.361959e-01 -0.618842700   1.93532471  0.9117425907\n [109,] -0.438839254 -0.2499123050  1.852598e-01  0.191944319  -0.64294524  0.1403748489\n [110,] -0.003408442 -0.1574319653  5.992803e-01  0.495731245  -2.04323024",
        " -0.3686859325\n [111,]  0.933728721  0.9068559217 -2.339574e-01 -1.615336991   2.72565720  0.9961008819\n [112,]  0.971521849  0.7514178193 -4.433366e-01 -0.703175159   2.50162710  0.5687575427\n [113,] -0.444093589  0.0242362227 -8.884687e-02 -0.312885234   0.51506984  0.6203464592\n [114,]  0.148570682  0.5800306543  2.754230e-01 -1.098094664   1.10576515  1.0180653746\n [115,] -0.682772433 -0.0645562969  3.992299e-01 -0.191427812  -0.45583211  0.6220790532\n [116,]  0.752894084  0.5603429544 -1.475026e-01 -0.658191451",
        "   1.99031832  0.4342485630\n [117,] -2.917414018 -1.8183892184  8.039037e-01  1.120748661  -6.01977401 -1.8562937162\n [118,]  0.440493486  0.4847965434  1.052203e-01 -0.207525166   0.89346911  0.7612351710\n [119,]  0.827350665  0.7118476073 -2.903134e-01 -0.837722607   2.41337262  0.2979982875\n [120,]  0.251764068  0.3883796276 -3.693561e-01 -0.743636742   1.61135979  0.5184708701\n [121,] -0.260753772 -0.1853351350  4.079288e-02  0.156410908  -0.29898707  0.1637466672\n [122,] -2.251225901 -1.4798579778  1.424962e+00",
        "  1.767871900  -7.71071234 -1.8778709796\n [123,]  0.245848814  0.1788027563 -3.517451e-01  0.146450552   1.30215615  0.5879601775\n [124,] -0.740879289 -0.7601911722  5.906045e-01  0.927746540  -2.83807530 -0.3570164009\n [125,]  0.604760273  0.5820340909 -2.526162e-01 -0.911780166   2.18411268  0.8558118929\n [126,] -0.942832994 -0.5237570469  6.920599e-02  0.207989512  -0.37450050  0.2779336420\n [127,]  2.268023294  1.1974950631 -2.214849e-01 -0.776391643   3.09038906 -0.3005634943\n [128,] -0.395163023  0.1019254091",
        " -2.847253e-01 -0.488016442   0.82104609  1.0471043906\n [129,] -1.424804355 -1.2325588025  5.810503e-01  0.776814249  -3.62596940 -1.2337284974\n [130,]  0.075474839 -0.2293002267 -2.137259e-01  0.356050133   0.02571985 -0.1490453351\n [131,]  0.458056351  0.2377606792 -1.469675e-01  0.483203610   0.60605835  0.0573696213\n [132,] -0.119543966  0.0899570373 -1.144894e-02 -0.196460184   0.60474595  1.4433922463\n [133,] -0.778842662 -0.4981893135  5.736859e-01  0.640668468  -2.31245272 -0.2342585065\n [134,] -0.772065394",
        " -0.4402866056  8.756353e-02  0.100014908  -0.99097914  0.3834172913\n [135,] -0.204161533 -0.0671581383  4.054077e-02  0.380644477  -0.09259179  0.1391677393\n [136,] -1.080591370 -0.5674442016  3.372129e-01 -0.212646364  -1.20903529  0.2204056677\n [137,]  0.096886838 -0.0307090188 -4.580397e-01  0.117931838   0.74333055 -0.2218616155\n [138,]  0.052891287 -0.1098779433  3.061141e-01 -0.172656902  -0.41167168  0.1155692290\n [139,] -0.066166139  0.1045838943  2.151669e-01 -0.163934993  -0.12252566  0.4481359178",
        "\n [140,]  1.130455724  0.7503666648  1.075484e-01 -1.033307436   1.64780790  0.6507230223\n [141,] -0.035495353  0.0597370705 -1.076892e-01  0.040289849   0.27814558  0.9199414350\n [142,] -1.100397925 -0.5666746998 -3.206943e-02  0.081397662  -1.08109669  0.1105465773\n                 [,7]\n   [1,] -1.6418295278\n   [2,] -1.0687345193\n   [3,]  0.7594322200\n   [4,]  2.1293607020\n   [5,]  1.4018368163\n   [6,] -1.3039070804\n   [7,]  1.2115132470\n   [8,]  0.8404852337\n   [9,] -0.6273151135\n  [10,]  0.8730245282\n  [11,]",
        "  2.2048499510\n  [12,] -0.6272870127\n  [13,] -0.3649915338\n  [14,] -0.4330253327\n  [15,] -0.2270231907\n  [16,] -1.5882413382\n  [17,]  0.1916200438\n  [18,] -0.3617920120\n  [19,]  0.1965599492\n  [20,] -0.5693625836\n  [21,] -0.6717347242\n  [22,] -0.1720861445\n  [23,] -0.7115572503\n  [24,] -0.1318518135\n  [25,] -0.8426774098\n  [26,]  0.3106118309\n  [27,]  0.9721520884\n  [28,]  0.2606163879\n  [29,] -0.3591204453\n  [30,] -0.9592041406\n  [31,] 10.2165291174\n  [32,] -0.0998680693\n  [33,] -1.3024478942\n  [34,]  0.0985884616",
        "\n  [35,]  0.1273058598\n  [36,]  0.0037385681\n  [37,]  1.2387679756\n  [38,] -0.2569028479\n  [39,]  0.5263914708\n  [40,]  0.5127872704\n  [41,]  0.0919954082\n  [42,] -0.0067691543\n  [43,]  2.0425969205\n  [44,]  1.7062234442\n  [45,] -0.6177304478\n  [46,]  0.2786542813\n  [47,]  0.2589493537\n  [48,] -1.2818649935\n  [49,] -0.8396504632\n  [50,]  0.3284369245\n  [51,] -0.2690208556\n  [52,]  0.9916895540\n  [53,] -0.3794610975\n  [54,] -0.2632257010\n  [55,] -0.1341829028\n  [56,]  0.1293115541\n  [57,] -0.0100458291\n  [58,]",
        "  0.6978687996\n  [59,]  1.4464050720\n  [60,] -0.6354014922\n  [61,] -0.0488821736\n  [62,] -0.8856461889\n  [63,] -0.5180804111\n  [64,] -0.6552394988\n  [65,] -1.2428221108\n  [66,] -1.4505870069\n  [67,] -0.5271784670\n  [68,]  4.7529166004\n  [69,]  0.9954662246\n  [70,]  0.8929893772\n  [71,] -0.4261497021\n  [72,]  8.0760974658\n  [73,] -0.3544529619\n  [74,] -0.6775757864\n  [75,] -1.7859128888\n  [76,] -0.0625528497\n  [77,] -0.5537590281\n  [78,]  0.3552930792\n  [79,]  0.4900839928\n  [80,] -0.5999273790\n  [81,] -0.7633070297",
        "\n  [82,] -1.3966659030\n  [83,] -0.3860737522\n  [84,] -1.0635258864\n  [85,]  0.4452273687\n  [86,] -0.8976644264\n  [87,] -0.7075886446\n  [88,]  0.1774394102\n  [89,] -0.7892628698\n  [90,] -1.6349492723\n  [91,]  1.0683211333\n  [92,]  0.7605334309\n  [93,] -1.0009044914\n  [94,]  0.0692472982\n  [95,] -1.3704657983\n  [96,] -0.6298697658\n  [97,] -1.3289735440\n  [98,] -0.6777646575\n  [99,] -0.7774749113\n [100,] -1.0725792273\n [101,]  0.1934569844\n [102,] -1.4851359754\n [103,]  0.6995513121\n [104,] -0.9601642158\n [105,]",
        " -0.0051776340\n [106,] -0.2068356434\n [107,]  5.1496805190\n [108,] -0.2656770718\n [109,] -0.7252517055\n [110,] -0.9582387003\n [111,]  0.3485304940\n [112,]  0.7413259834\n [113,] -0.5402564930\n [114,] -1.6463401610\n [115,] -1.4167622513\n [116,] -0.0436725166\n [117,] -0.5702131245\n [118,] -1.2853863340\n [119,]  0.7351472396\n [120,]  0.2350541999\n [121,]  0.0045340498\n [122,] -1.9075740202\n [123,] -0.0226161960\n [124,] -1.5535819349\n [125,]  0.0076252865\n [126,] -0.9506562018\n [127,]  1.3193455326\n [128,] -0.3324284315",
        "\n [129,]  0.0633817972\n [130,]  0.7302824214\n [131,]  0.0969356349\n [132,] -1.8083195036\n [133,] -1.3248482344\n [134,] -0.8946829162\n [135,] -0.5887931093\n [136,] -1.1432238056\n [137,]  1.4088313498\n [138,] -0.9979897099\n [139,] -1.5421426276\n [140,] -0.6219003676\n [141,] -1.1327385379\n [142,] -0.1060189897\n [ reached getOption(\"max.print\") -- omitted 858 rows ]\n",
        "> ",
        "max(abs(out$Y))",
        "[1] 18.87835\n",
        "> ",
        "max(abs(out$Y))",
        "[1] 18.87835\n",
        "> ",
        "p <- 7",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 20.23421\n",
        "> ",
        "p <- 7",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 50.03606\n",
        "> ",
        "p <- 7",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 84.30068\n",
        "> ",
        "p <- 7",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 16.2181\n",
        "> ",
        "p <- 7",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 20.49197\n",
        "> ",
        "p <- 7",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 23.05975\n",
        "> ",
        "p <- 7",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 22.50842\n",
        "> ",
        "p <- 7",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 9.121267\n",
        "> ",
        "p <- 7",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 33.94562\n",
        "> ",
        "p <- 7",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 45.71491\n",
        "> ",
        "p <- 7",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 26.01608\n",
        "> ",
        "p <- 7",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 62.59966\n",
        "> ",
        "p <- 7",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 25.33171\n",
        "> ",
        "p <- 7",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 26.73829\n",
        "> ",
        "p <- 7",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 38.6372\n",
        "> ",
        "p <- 7",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 24.63329\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 54.99669\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 19.54276\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 33.72125\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 68.22323\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 21.46375\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 23.74209\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 24.0348\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 23.8398\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 25.92417\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 7, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 15.62823\n",
        "> ",
        "70^5",
        "[1] 1680700000\n",
        "> ",
        "70^7",
        "[1] 8.23543e+12\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 5, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 66.78358\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 5, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 34.05032\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 5, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 55.32038\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 5, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 43.81572\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 5, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 14.84867\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 5, h = 1, dist = \"laplace\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 30.78093\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 5, h = 1, dist = \"gamma\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 44.14141\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 5, h = 1, dist = \"gamma\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 29.79298\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 5, h = 1, dist = \"gamma\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 13.69836\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 5, h = 1, dist = \"gamma\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 15.01113\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 5, h = 1, dist = \"gamma\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 21.96902\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 5, h = 1, dist = \"gamma\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 44.26415\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 5, h = 1, dist = \"gamma\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 35.36992\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 5, h = 1, dist = \"gamma\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 19.85853\n",
        "> ",
        "p <- 10",
        "> ",
        "n <- 1000",
        "> ",
        "parent_prob <- 3/4",
        "> ",
        "",
        "> ",
        "out <- cdcs::rDAG_anm2(p = p, n = n, parent_prob = parent_prob,",
        "+ ",
        "                       funcType = \"poly\", M = 5, h = 1, dist = \"gamma\",",
        "+ ",
        "                       lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)",
        "> ",
        "",
        "> ",
        "max(abs(out$Y))",
        "[1] 60.90395\n\nRestarting R session...\n\n"
    ]
}