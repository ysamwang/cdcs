basis.list <- c("poly")
prob.list <- c(1/4, 3/4)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
param.grid
sample.size <- 200
rep.runs <- 10
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("poly")
basis.list <- c("poly")
prob.list <- c(1/4, 3/4)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
param.grid
sample.size <- 200
rep.runs <- 10
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("poly")
basis.list <- c("poly")
prob.list <- c(1/4, 3/4)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
param.grid
library(cdcs)
sample.size <- 200
rep.runs <- 10
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("poly")
basis.list <- c("poly")
prob.list <- c(1/4, 3/4)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
param.grid
sample.size <- 200
rep.runs <- 10
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("poly")
basis.list <- c("poly")
prob.list <- c(1/3)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
param.grid
sample.size <- 400
rep.runs <- 10
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("poly")
basis.list <- c("poly")
prob.list <- c(1/3)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
sample.size <- 400
rep.runs <- 10
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("poly")
basis.list <- c("poly")
prob.list <- c(1/3)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
param.grid
sample.size <- 200
rep.runs <- 5
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("poly")
basis.list <- c("poly")
prob.list <- c(1/3)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
param.grid
sample.size <- 200
rep.runs <- 5
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("cam")
basis.list <- c("bspline")
prob.list <- c(1/3)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
param.grid
sample.size <- 200
rep.runs <- 5
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("cam")
basis.list <- c("bspline")
prob.list <- c(1/3)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
param.grid
sample.size <- 200
rep.runs <- 2
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("poly")
basis.list <- c("poly")
prob.list <- c(1/3)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
n <- param.grid[runInd, 1]
runInd <- 3
sample.size <- 200
rep.runs <- 2
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("poly")
basis.list <- c("poly")
prob.list <- c(1/3)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
n <- param.grid[runInd, 1]
distro <- param.grid[runInd, 2]
funcType <- param.grid[runInd, 3]
basis <- param.grid[runInd, 4]
parentProb <- param.grid[runInd, 5]
if(basis == "bspline"){
m.list <- c(20, 40, 60)
k.list <- c(25)
} else {
m.list <- c(1,2, 3, 4, 5)
k.list <- c(25)
}
# system.time(out <- run.onceBnb(p.list = c(4), n =n, distro = distro,
#                         parent_prob = parentProb, funcType = funcType,
#                         basis = basis, Mtrue = 7,
#                         m.list = m.list, k.list = k.list))
out <- sapply(1:2, FUN = function(x){run.onceBnb(p.list = c(4), n =n, distro = distro,
parent_prob = parentProb, funcType = funcType,
basis = basis, Mtrue = 5,
m.list = c(2,5), k.list = k.list)})
testFunc <- function(x, type = 1){
if(type == 1){
return(scale(sin(x^2)))
} else if (type == 2){
return(scale(cos(x^2)))
} else if (type == 3){
return(scale(sin(x) * x))
} else if (type == 4){
return(scale(cos(x) * x))
} else if (type == 5){
return(scale(sin(x^2) * x))
} else if (type == 6){
return(scale(cos(x^2) * x))
} else if (type == 7){
return(scale(tanh(x)))
}
}
run.onceBnb <- function(p.list = c(7), n, distro, bs = 400, parent_prob = 1/4, k.list = c(5, 25, 50),
funcType = "GP", h = 1, Mtrue= 7, m.list =c(1,2,3,4,5),
basis = "bspline") {
rec <- matrix(0, 0, 8)
colnames(rec) <- c("p","m", "k", "testFunc", "size", "cover", "ancest", "time")
for(pInd in 1:length(p.list)){
p <- p.list[pInd]
out <- cdcs::rDAG_anm(p = p, n = n, parent_prob = parent_prob,
funcType = funcType, M = Mtrue, h = h, dist = distro,
lowScale = 1/5, highScale = sqrt(2)/5, noParentMult = 5)
Y <- scale(out$Y)
G1 <- array(0, dim = c(n, max(k.list) * 2, p) )
G2 <- array(0, dim = c(n, 3, p) )
G3 <- array(0, dim = c(n, 7, p) )
# Create test functions
for(u in 1:p){
for(k in 1:max(k.list)){
omega <- rnorm(1)
G1[, 2 * k - 1, u] <- scale(sin(omega * Y[,u]))
G1[, 2 * k, u] <- scale(cos(Y[,u] * omega))
}
G2[, 1, u] <- scale(Y[, u]^2)
G2[, 2 , u] <- scale(Y[, u]^3)
G2[, 3 , u] <- scale(sign(Y[,u])*abs(Y[, u])^(2.5))
for(z in 1:7){
G3[, z, u] <- testFunc(Y[, u], type =z)
}
}
G4 <- abind::abind(G1, G2, G3, along = 2)
## go through all k.list length
for(kInd in 1:length(k.list)){
for(j in 1:length(m.list)){
time.rec <- system.time(out <- cdcs::brandAndBound_anm(Y, G1[ , 1:(2*k.list[kInd]), , drop = F],
bs =bs, withinAgg = 2,
aggType = 2, alpha = .1,
pValueAgg = "tippet", intercept = 1,
verbose = F, basis = basis,
M = m.list[j]))[3]
rec <- rbind(rec,
c(p, m.list[j], k.list[kInd], "trig", sum(out$pValue > .1), all(out[1, -1] == 1:p),
mean(cdcs::getAncest(out[which(out$pValue > .1),-1])[lower.tri(matrix(0, p,p))] == 1 ),
time.rec))
}
}
## moments
for(j in 1:length(m.list)){
time.rec <- system.time(out <- cdcs::brandAndBound_anm(Y, G2,
bs =bs, withinAgg = 2,
aggType = 2, alpha = .1,
pValueAgg = "tippet", intercept = 1,
verbose = F, basis = basis,
M = m.list[j]))[3]
rec <- rbind(rec,
c(p, m.list[j], 3, "moment", sum(out$pValue > .1), all(out[1, -1] == 1:p),
mean(cdcs::getAncest(out[which(out$pValue > .1),-1])[lower.tri(matrix(0, p,p))] == 1 ),
time.rec))
}
# Zoo
for(j in 1:length(m.list)){
time.rec <- system.time(out <- cdcs::brandAndBound_anm(Y, G3,
bs =bs, withinAgg = 2,
aggType = 2, alpha = .1,
pValueAgg = "tippet", intercept = 1,
verbose = F, basis = basis,
M = m.list[j]))[3]
rec <- rbind(rec,
c(p, m.list[j], 8, "zoo", sum(out$pValue > .1), all(out[1, -1] == 1:p),
mean(cdcs::getAncest(out[which(out$pValue > .1),-1])[lower.tri(matrix(0, p,p))] == 1 ),
time.rec))
}
# Comb
for(j in 1:length(m.list)){
time.rec <- system.time(out <- cdcs::brandAndBound_anm(Y, G4,
bs =bs, withinAgg = 2,
aggType = 2, alpha = .1,
pValueAgg = "tippet", intercept = 1,
verbose = F, basis = basis,
M = m.list[j]))[3]
rec <- rbind(rec,
c(p, m.list[j], k.list[kInd] + 3 + 8, "comb", sum(out$pValue > .1), all(out[1, -1] == 1:p),
mean(cdcs::getAncest(out[which(out$pValue > .1),-1])[lower.tri(matrix(0, p,p))] == 1 ),
time.rec))
}
}
return(rec)
}
# system.time(out <- run.onceBnb(p.list = c(5), n =2500, distro = "gamma",
#             h = 1, parent_prob = 3/4,
#             funcType = "cam", basis = "bspline",
#             m.list = c(30, 40), k.list = c(5, 10)))
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
n <- param.grid[runInd, 1]
distro <- param.grid[runInd, 2]
funcType <- param.grid[runInd, 3]
basis <- param.grid[runInd, 4]
parentProb <- param.grid[runInd, 5]
if(basis == "bspline"){
m.list <- c(20, 40, 60)
k.list <- c(25)
} else {
m.list <- c(1,2, 3, 4, 5)
k.list <- c(25)
}
out <- sapply(1:2, FUN = function(x){run.onceBnb(p.list = c(4), n =n, distro = distro,
parent_prob = parentProb, funcType = funcType,
basis = basis, Mtrue = 5,
m.list = c(2,5), k.list = k.list)})
out
lapply(1:rep.runs, FUN = function(x){run.onceBnb(p.list = c(4), n =n, distro = distro,
parent_prob = parentProb, funcType = funcType,
basis = basis, Mtrue = 5,
m.list = c(2,5), k.list = k.list)})
out <- lapply(1:rep.runs, FUN = function(x){run.onceBnb(p.list = c(4), n =n, distro = distro,
parent_prob = parentProb, funcType = funcType,
basis = basis, Mtrue = 5,
m.list = c(2,5), k.list = k.list)})
out
tab <- do.call("rbind", out)
outTab <- data.frame(n, distro, basis, funcType, parentProb, tab)
outTab
outTab
aggregate(cover ~ m + testFunc, data = outTab, mean)
sample.size <- 400
rep.runs <- 2
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("poly")
basis.list <- c("poly")
prob.list <- c(1/3)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
param.grid
sample.size <- 400
rep.runs <- 4
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("poly")
basis.list <- c("poly")
prob.list <- c(1/3)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
param.grid
sample.size <- 400
rep.runs <- 2
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("poly")
basis.list <- c("poly")
prob.list <- c(1/3)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
sample.size <- 400
rep.runs <- 2
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("poly")
basis.list <- c("poly")
prob.list <- c(1/3)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
param.grid
sample.size <- 300
rep.runs <- 2
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("poly")
basis.list <- c("poly")
prob.list <- c(1/3)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
param.grid
sample.size <- 200
rep.runs <- 2
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("poly")
basis.list <- c("poly")
prob.list <- c(1/3)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
param.grid
sample.size <- 200
rep.runs <- 2
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("poly")
basis.list <- c("poly")
prob.list <- c(1/3)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
param.grid
sample.size <- 200
rep.runs <- 2
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("poly")
basis.list <- c("poly")
prob.list <- c(1/3)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
param.grid
runInd <- 1
outTab <- data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl/nl_exp_",runInd, ".csv", sep = ""))[,-1])
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl/nl_exp_",runInd, ".csv", sep = ""))){
temp <- data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl/nl_exp_",runInd, ".csv", sep = ""))[,-1])
outTab <- rbind(outTab, temp)
} else {
missing <- c(missing, runInd)
}
}
missing
runInd <- 1
outTab <- data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",runInd, ".csv", sep = ""))[,-1])
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",runInd, ".csv", sep = ""))){
temp <- data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",runInd, ".csv", sep = ""))[,-1])
outTab <- rbind(outTab, temp)
} else {
missing <- c(missing, runInd)
}
}
missing
outTab
1 / 0
cbind(A = c(rep(1, 10), rep(2, 10)),
B = c(rep(NA, 10), rep(5, 10)))
cbind(A = c(rep(1, 10), rep(2, 10)),
B = c(rep(2, 5,), rep(NA, 5), rep(5, 10)))
aggregate(B ~ A, data = Z, FUN = mean)
Z <- cbind(A = c(rep(1, 10), rep(2, 10)),
B = c(rep(2, 5,), rep(NA, 5), rep(5, 10)))
aggregate(B ~ A, data = Z, FUN = mean)
Z <- cbind(A = c(rep(1, 10), rep(2, 10)),
B = c(rep(2, 5), rep(NA, 5), rep(5, 10)))
aggregate(B ~ A, data = Z, FUN = mean)
?mean
is.na(outTab$cover)
outTab
outTab$cover <- ifelse(is.na(outTab$cover), FALSE, outTab$cover)
outTab
outTab$cover <- ifelse(is.na(outTab$cover), FALSE, outTab$cover)
resTab <- aggregate(cbind(size, cover) ~ n + m + parentProb + k + distro +p, dat = outTab, FUN = mean)
resTab
sample.size <- 200
rep.runs <- 2
n.list <- c(2500, 5000, 7500, 10000)
d.list <- c("gamma", "laplace")
func.list <- c("poly")
basis.list <- c("poly")
prob.list <- c(1/3)
p.list <- c(7)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
runInd <- 1
outTab <- data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",runInd, ".csv", sep = ""))[,-1])
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",runInd, ".csv", sep = ""))){
temp <- data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",runInd, ".csv", sep = ""))[,-1])
outTab <- rbind(outTab, temp)
} else {
missing <- c(missing, runInd)
}
}
missing
outTab$cover <- ifelse(is.na(outTab$cover), FALSE, outTab$cover)
resTab <- aggregate(cbind(size, cover) ~ n + m + parentProb + k + distro +p, dat = outTab, FUN = mean)
resTab
runInd <- 1
outTab <- data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",runInd, ".csv", sep = ""))[,-1])
runInd <- 2
outTab2 <- data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",runInd, ".csv", sep = ""))[,-1])
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list, func.list, basis.list,
prob.list)
param.grid
outTab1 <- data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",1, ".csv", sep = ""))[,-1])
outTab5 <- data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",5, ".csv", sep = ""))[,-1])
outTab1
outTab1
outTab5
data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",runInd, ".csv", sep = ""))[,-1])
data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",runInd, ".csv", sep = ""))
data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",runInd, ".csv", sep = ""))
data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",runInd, ".csv", sep = ""))
read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",runInd, ".csv", sep = ""))
read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",runInd, ".csv", sep = ""))
read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",runInd, ".csv", sep = "")
read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",runInd, ".csv", sep = ""))
read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",runInd, ".csv", sep = ""))
param.grid
for(runInd in 1:nrow(param.grid)){
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_",runInd, ".csv", sep = ""))
write.csv(temp, paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/nl_new/nl_exp_easy_",runInd + 800, ".csv", sep = ""),
row.names = F)
}
sample.size <- 400
rep.runs <- 5
n.list <- c(500, 1000, 2500, 5000)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
param.grid
runInd <- 1
# outTabTrig <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbCombNew/bnbRes_comb_10_",runInd, ".csv", sep = ""))[,-1]
missing <- c()
for(runInd in 1:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbCombNew/bnbRes_comb_10_",runInd, ".csv", sep = ""))){
# temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbCombNew/bnbRes_comb_10_",runInd, ".csv", sep = ""))[,-1]
# outTabTrig <- rbind(outTabTrig, temp)
} else {
missing <- c(missing, runInd)
}
}
missing
outTabTrig
runInd <- 1
outTabTrig <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbCombNew/bnbRes_comb_10_",runInd, ".csv", sep = ""))[,-1]
missing <- c()
for(runInd in 1:nrow(param.grid)){
if(file.exists(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbCombNew/bnbRes_comb_10_",runInd, ".csv", sep = ""))){
temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbCombNew/bnbRes_comb_10_",runInd, ".csv", sep = ""))[,-1]
outTabTrig <- rbind(outTabTrig, temp)
} else {
missing <- c(missing, runInd)
}
}
outTabTrig
resTabTrig <- aggregate(cbind(size, cover) ~ n + distro + distro + testFunc,
FUN = mean, data = outTabTrig)
resTabTrig
resTabTrig$size <- resTabTrig$size / factorial(10)
resTabTrig
out <- reshape(resTabTrig, idvar = c("distro", "n"),
direction = "wide",
timevar = "testFunc")
out
out
