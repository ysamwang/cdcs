runInd <- 1
args <- commandArgs(TRUE)
for(i in 1:length(args)){
  eval(parse(text = args[[i]]))
}
print(runInd)




run.once <- function(p, n, distro, bs = 200, parent_prob = 1/3, verbose = F,
                     cutoff = NULL){
  source("hols.R")
  k.list <- c(1:3)
  
  gFunc <- function(x, k){
    if(k == 1){
      return(scale(x^2))
    } else if (k ==2 ){
      return(scale(x^3))
    } else if (k ==3 ){
      return(scale(abs(x)^(2.5) * sign(x)))
    }
    
  }
  
  rec <- matrix(0, nrow = 1, ncol = 18)
  colnames(rec) <- paste(rep(c("null_", "alt_", "timeA_"), each = 6), c("dkwPow1", "dkwPow2", "senSen","rptest",  "mint" , "hols"), sep = "")
  
  dat <- cdcs::rDAG(p, n, parent_prob = parent_prob, lowScale = .8,
                    highScale = 1, lowEdge = .1, highEdge = 1,
                    dist = distro, uniqueTop = T)
  
  Y <- scale(dat$Y)
  
  ### Null Hyp
  ind <- p
  child <- Y[, ind, drop = F]
  parents <- Y[, -ind, drop = F]
  
  G <- array(0, dim = c(n , length(k.list), ncol(parents)))
  
  for(j in 1:ncol(parents)){
    for(k in 1:length(k.list)){
      G[ , k, j] <- gFunc(parents[, j], k.list[k])  
    }
  }
  
  
  # rec[1] <- cdcs::bnbHelperanm(parents, child, G = G, withinAgg = 2, aggType = 1, bs = bs, intercept = 1)$pVals[1]
  rec[2] <- cdcs::bnbHelperanm(parents, child, G = G, withinAgg = 2, aggType = 2, bs = bs, intercept = 1)$pVals[1]
  # rec[3] <- cdcs::senSen2014(parents, child, bs = bs)
  # rec[4] <- RPtests::RPtest(parents, child, B = bs)
  # rec[5] <- IndepTest::MINTregression(parents, child, max(n / 20, 3), max(n / 10, 5), w=FALSE, rnorm(n * bs))
  rec[6] <- HOLS.check(parents, child)$pval.glob
  
  
  ### Alt Hyp
  ind <- 1
  child <- Y[, ind, drop = F]
  parents <- Y[, -ind, drop = F]
  
  G <- array(0, dim = c(n , length(k.list), ncol(parents)))
  
  for(j in 1:ncol(parents)){
    for(k in 1:length(k.list)){
      G[ , k, j] <- gFunc(parents[, j], k.list[k])  
    }
  }
  
  offset <- 6
  
  # rec[2 * offset + 1] <- system.time(rec[offset + 1] <- cdcs::bnbHelperanm(parents, child, G = G, withinAgg = 2,
  #                                                                          aggType = 1, bs = bs, intercept = 1)$pVals[1])[1]
  rec[2 * offset + 2] <- system.time(rec[offset + 2] <- cdcs::bnbHelperanm(parents, child, G = G, withinAgg = 2,
                                                                           aggType = 2, bs = bs, intercept = 1)$pVals[1])[1]
  # rec[2 * offset + 3] <- system.time( rec[offset + 3] <- cdcs::senSen2014(parents, child, bs = bs))[1]
  # rec[2 * offset + 4] <- system.time(rec[offset + 4] <- RPtests::RPtest(parents, child, B = bs))[1]
  # rec[2 * offset + 5] <- system.time( rec[offset + 5] <- IndepTest::MINTregression(parents, child, round(max(n / 20, 3)), round(max(n / 10, 5)), w=FALSE, rnorm(n * bs)))[3]
  rec[2 * offset + 6] <- system.time( rec[offset + 6] <- HOLS.check(parents, child)$pval.glob)[1]
  
  
  return(rec)
  
}



##################
library(parallel)
library(cdcs)

sample.size <- 1000
rep.runs <- 50
p.list <- c(10, 20, 30, 40)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(p.list, sample.size / rep.runs), d.list)
## Param Grid 480


runInd <- 160

p <- param.grid[runInd, 1]
n <- round(p^(7/4))
distro <- param.grid[runInd, 2]

cl <- makeCluster(3)
clusterExport(cl, ls())



out <- t(parSapply(cl, 1:200, function(x){run.once(p, n, distro, parent_prob = 1/3, bs = 200)}))
colMeans(out < .1)


outTab <- data.frame(p, n, distro, out)

colnames(outTab) <- c("p", "n", "distro", paste(rep(c("null_", "alt_", "timeA_"), each = 6), c("dkwPow1", "dkwPow2", "senSen", "rptest", "mint", "hols"), sep = ""))

write.csv(outTab, paste("../results/lmgdDAG/lmgdDAG3_alt", runInd, ".csv", sep = ""), row.names = F)

stopCluster(cl)


##########
sample.size <- 500
rep.runs <- 25
p.list <- c(10, 20, 30, 40)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(p.list, sample.size / rep.runs), d.list)
## Param Grid 480

#
runInd <- 1
outTab <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/lmgdDag/lmgdDAG3_alt", runInd, ".csv", sep = ""))

colnames(outTab) <- c("p", "n", "distro", paste(rep(c("null_", "alt_", "timeA_"), each = 6), c("dkwPow1", "dkwPow2", "senSen", "rptest", "mint", "hols"), sep = ""))

for(runInd in 2:nrow(param.grid)){
  temp <- read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/lmgdDag/lmgdDAG3_alt", runInd, ".csv", sep = ""))
  colnames(temp) <- c("p", "n", "distro", paste(rep(c("null_", "alt_", "timeA_"), each = 6), c("dkwPow1", "dkwPow2", "senSen", "rptest", "mint", "hols"), sep = ""))
  # if(temp$p[1] > 30){
  #   temp[, c(8,11,16, 19, 24, 27)] <- 0
  # }
  
  outTab <- rbind(outTab, temp)
}
# 
# 
# 

out_null <- cbind(aggregate(null_dkwPow1 < .1 ~ p + distro, data = outTab, FUN = mean),
                  aggregate(null_dkwPow2 < .1 ~ p + distro, data = outTab, FUN = mean)[,3],
                  aggregate(null_senSen < .1 ~ p + distro, data = outTab, FUN = mean)[,3],
                  aggregate(null_rptest < .1 ~ p + distro, data = outTab, FUN = mean)[,3],
                  aggregate(null_mint < .1 ~ p + distro, data = outTab, FUN = mean)[,3],
                  aggregate(null_hols < .1 ~ p + distro, data = outTab, FUN = mean)[,3])
names(out_null) <- c("p", "dist","dkwPow1", "dkwPow2", "senSen", "rptest","mint", "hols")
print(out_null, digits = 3)



out_alt <- cbind(aggregate(alt_dkwPow1 < .1 ~ p + distro, data = outTab, FUN = mean),
                 aggregate(alt_dkwPow2 < .1 ~ p + distro, data = outTab, FUN = mean)[,3],
                 aggregate(alt_senSen < .1 ~ p + distro, data = outTab, FUN = mean)[,3],
                 aggregate(alt_rptest < .1 ~ p + distro, data = outTab, FUN = mean)[,3],
                 aggregate(alt_mint < .1 ~ p + distro, data = outTab, FUN = mean)[,3],
                 aggregate(alt_hols < .1 ~ p + distro, data = outTab, FUN = mean)[,3])
names(out_alt) <- c("p", "dist","dkwPow1", "dkwPow2", "senSen", "rptest","mint", "hols")
print(out_alt, digits = 3)

# 
# out_time <- cbind(aggregate(timeA_dkwPow1 ~ p + distro, data = outTab, FUN = mean),
#                   aggregate(timeA_dkwPow2 ~ p + distro, data = outTab, FUN = mean)[,3],
#                   aggregate(timeA_dkwFourier1 ~ p + distro, data = outTab, FUN = mean)[,3],
#                   aggregate(timeA_dkwFourer2 ~ p + distro, data = outTab, FUN = mean)[,3],
#                   aggregate(timeA_senSen ~ p + distro, data = outTab, FUN = mean)[,3],
#                   aggregate(timeA_mint ~ p + distro, data = outTab, FUN = mean)[,3],
#                   aggregate(timeA_hols ~ p + distro, data = outTab, FUN = mean)[,3],
#                   aggregate(timeA_rptest ~ p + distro, data = outTab, FUN = mean)[,3])
# out_time[,-c(1:2)] <- round(out_time[,-c(1:2)],4)
# names(out_time) <- c("p", "dist","dkwPow1", "dkwPow2", "dkwFourier1", "dkwFourer2", "senSen", "mint", "hols", "rptest")
# 
