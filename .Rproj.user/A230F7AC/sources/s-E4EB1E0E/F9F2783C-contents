runInd <- 1
args <- commandArgs(TRUE)
for(i in 1:length(args)){
  eval(parse(text = args[[i]]))
}
print(runInd)



run.onceBnb <- function(p, n, distro, bs = 200, parent_prob = 1/3, verbose = F, cutoff = NULL){
  
  dat <- cdcs::rDAG(p, n, parent_prob = parent_prob, lowScale = .8,
                    highScale = 1, edgeVar = n^(-1/10),
                    dist = distro, uniqueTop = T)
  
    
    Y <- scale(dat$Y)
    
    
    outlingamDirect <- causalXtreme::direct_lingam_search(Y)

    k.list <- c(1:3)
    
    gFunc <- function(x, k){
      if(k == 1){
        return(scale(x^2))
      } else if (k ==2 ){
        return(scale(x^3))
      } else if (k ==3 ){
        return(scale(abs(x)^(2.5) * sign(x)))
      }
    }
      
    
    G <- array(0, dim = c(n , length(k.list), p))
    
    for(j in 1:p){
      for(k in 1:length(k.list)){
        G[ , k, j] <- gFunc(Y[, j], k.list[k])  
      }
    }
    
    time.rec <- system.time(out <- cdcs::brandAndBound(Y, G, bs = bs, withinAgg = 2, aggType = 2, alpha = .1,
                                         pValueAgg = "tippet", verbose = verbose))[3]
    
    rec <- c(sum(out$pValue > .1), all(out[1, -1] == 1:p),
                mean(cdcs::getAncest(out[which(out$pValue > .1),-1])[lower.tri(dat$B)] == 1 ), time.rec, all(outlingamDirect == 1:p))

    names(rec) <- c("size", "cover", "ancest", "time", "pointEst")
    
  return(rec)
}

##################
library(parallel)
library(cdcs)


sample.size <- 200
rep.runs <- 10

n.list <- c(500, 1000, 2500, 5000)
d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace", "mixed")
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
### Param grid Size 400


p <- 10

n <- param.grid[runInd, 1]
distro <- param.grid[runInd, 2]

cl <- makeCluster(7)
clusterExport(cl, ls())
out <- t(parSapply(cl, 1:rep.runs, function(x){run.onceBnb(p, n, distro)}))


outTab <- data.frame(p, n, distro, out)


write.csv(outTab, paste("../results/bnb10/bnbRes10_",runInd, ".csv", sep = ""))

stopCluster(cl)

#### Analysis ####
# sample.size <- 250
# rep.runs <- 50
# 
# n.list <- c(1000, 2500, 5000)
# d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace")
# param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
# ### Param grid Size 400
# 
# i <- 1
# dat1 <- data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbNew/bnb3/bnbRes23_agg23_", i, ".csv", sep = ""))[,-1])
# dat2 <- data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbNew/bnb3/bnbRes234_", i, ".csv", sep = ""))[,-1])
# dat3 <- data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbNew/bnb3/bnbRes2345_", i, ".csv", sep = ""))[,-1])
# 
# 
# for(i in 21:nrow(param.grid)){
#   dat1 <- rbind(dat1, data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbNew/bnb3/bnbRes23_agg23_", i, ".csv", sep = ""))[,-1]))
#   dat2 <- rbind(dat2, data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbNew/bnb3/bnbRes234_", i, ".csv", sep = ""))[,-1]))
#   
#   dat3 <- rbind(dat3,
#                 data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbNew/bnb3/bnbRes2345_", i, ".csv", sep = ""))[,-1]))
#   
# }
# 
# 
# 
# colnames(dat1) <- colnames(dat2) <- colnames(dat3) <- c("p", "n", "distro" ,paste(rep(c("twoFisher", "twoTippet", "threeFisher", "threeTippet"), each = 4),
#       rep(c("size", "truth", "time", "ancest"), times = 4), sep = "_"), "pointEst")
# 
# #
# res1 <- cbind(aggregate(twoFisher_size ~ p + n + distro, data = dat1, FUN = mean),
#              aggregate(twoTippet_size ~ p + n + distro, data = dat1, FUN = mean)[,4],
#              aggregate(threeFisher_size ~ p + n + distro, data = dat1, FUN = mean)[,4],
#              aggregate(threeTippet_size ~ p + n + distro, data = dat1, FUN = mean)[,4],
#              aggregate(twoFisher_truth ~ p + n + distro, data = dat1, FUN = mean)[,4],
#              aggregate(twoTippet_truth ~ p + n + distro, data = dat1, FUN = mean)[,4],
#              aggregate(threeFisher_truth ~ p + n + distro, data = dat1, FUN = mean)[,4],
#              aggregate(threeTippet_truth ~ p + n + distro, data = dat1, FUN = mean)[,4],
#              aggregate(twoFisher_ancest ~ p + n + distro, data = dat1, FUN = mean)[,4],
#              aggregate(twoTippet_ancest ~ p + n + distro, data = dat1, FUN = mean)[,4],
#              aggregate(threeFisher_ancest ~ p + n + distro, data = dat1, FUN = mean)[,4],
#              aggregate(threeTippet_ancest ~ p + n + distro, data = dat1, FUN = mean)[,4],
#              aggregate(pointEst ~ p + n + distro, data = dat1, FUN = mean)[,4])
# 
# 
# res2 <- cbind(aggregate(twoFisher_size ~ p + n + distro, data = dat2, FUN = mean),
#               aggregate(twoTippet_size ~ p + n + distro, data = dat2, FUN = mean)[,4],
#               aggregate(threeFisher_size ~ p + n + distro, data = dat2, FUN = mean)[,4],
#               aggregate(threeTippet_size ~ p + n + distro, data = dat2, FUN = mean)[,4],
#               aggregate(twoFisher_truth ~ p + n + distro, data = dat2, FUN = mean)[,4],
#               aggregate(twoTippet_truth ~ p + n + distro, data = dat2, FUN = mean)[,4],
#               aggregate(threeFisher_truth ~ p + n + distro, data = dat2, FUN = mean)[,4],
#               aggregate(threeTippet_truth ~ p + n + distro, data = dat2, FUN = mean)[,4],
#               aggregate(twoFisher_ancest ~ p + n + distro, data = dat2, FUN = mean)[,4],
#               aggregate(twoTippet_ancest ~ p + n + distro, data = dat2, FUN = mean)[,4],
#               aggregate(threeFisher_ancest ~ p + n + distro, data = dat2, FUN = mean)[,4],
#               aggregate(threeTippet_ancest ~ p + n + distro, data = dat2, FUN = mean)[,4],
#               aggregate(pointEst ~ p + n + distro, data = dat2, FUN = mean)[,4])
# 
# 
# res3 <- cbind(aggregate(twoFisher_size ~ p + n + distro, data = dat3, FUN = mean),
#               aggregate(twoTippet_size ~ p + n + distro, data = dat3, FUN = mean)[,4],
#               aggregate(threeFisher_size ~ p + n + distro, data = dat3, FUN = mean)[,4],
#               aggregate(threeTippet_size ~ p + n + distro, data = dat3, FUN = mean)[,4],
#               aggregate(twoFisher_truth ~ p + n + distro, data = dat3, FUN = mean)[,4],
#               aggregate(twoTippet_truth ~ p + n + distro, data = dat3, FUN = mean)[,4],
#               aggregate(threeFisher_truth ~ p + n + distro, data = dat3, FUN = mean)[,4],
#               aggregate(threeTippet_truth ~ p + n + distro, data = dat3, FUN = mean)[,4],
#               aggregate(twoFisher_ancest ~ p + n + distro, data = dat3, FUN = mean)[,4],
#               aggregate(twoTippet_ancest ~ p + n + distro, data = dat3, FUN = mean)[,4],
#               aggregate(threeFisher_ancest ~ p + n + distro, data = dat3, FUN = mean)[,4],
#               aggregate(threeTippet_ancest ~ p + n + distro, data = dat3, FUN = mean)[,4],
#               aggregate(pointEst ~ p + n + distro, data = dat3, FUN = mean)[,4])
# 
# #
# #
# colnames(res1) <- colnames(res2) <- colnames(res3) <- c("p", "n", "distro" ,paste(rep(c("twoFisher", "twoTippet", "threeFisher", "threeTippet"), times = 3),
#                                              rep(c("size", "truth", "ancest"), each = 4), sep = "_"), "pointEst")
# 
# 
# res1[, -c(1:3)] <- round(res1[, -c(1:3)], 2)
# res2[, -c(1:3)] <- round(res2[, -c(1:3)], 2)
# res3[, -c(1:3)] <- round(res3[, -c(1:3)], 2)
# 
# res1[, 4:7] / factorial(8)
# res2[, 4:7] / factorial(8)
# res3[, 4:7] / factorial(8)
# 
# res1


# # #### Analysis ####library(parallel)
# sample.size <- 300
# rep.runs <- 50
# 
# n.list <- c(500, 1000, 2500, 5000)
# d.list <- c("unif", "lognorm", "gamma", "weibull", "laplace")
# param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), d.list)
# # ### Param grid Size 400
# #
# i <- 1
# dat1 <- data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbNew/bnb3/bnbRes_nEigth_cut3", i, ".csv", sep = ""))[,-1])
# 
# 
# for(i in 2:nrow(param.grid)){
#   dat1 <- rbind(dat1, data.frame(read.csv(paste("~/Dropbox/confSetGraphs/code/rPkg/simResults/bnbNew/bnb3/bnbRes_nEigth_cut3", i, ".csv", sep = ""))[,-1]))
# }
# 
# try.list <- list(c(4,7), c(1:7), c(2,4,5,7), c(2,5))
# 
# names(dat1)[1:3] <- c("p", "n", "distro")
# 
# for(i in 1:length(try.list)){
#   names(dat1)[(3 + (i-1) * 3 + 1):(3 + (i) * 3)] <- paste(paste(try.list[[i]], collapse = ""), "_", c("size", "cover", "ancest"), sep = "")
# }
# names(dat1)[ncol(dat1)] <- "PtEst"
# 
# res3 <- cbind(aggregate(dat1$'47_size' ~ p + n + distro, data = dat1, FUN = mean),
#               aggregate(dat1$'1234567_size' ~ p + n + distro, data = dat1, FUN = mean)[,4],
#               aggregate(dat1$'2457_size' ~ p + n + distro, data = dat1, FUN = mean)[,4],
#               aggregate(dat1$'25_size' ~ p + n + distro, data = dat1, FUN = mean)[,4],
#              
#               aggregate(dat1$'47_ancest' ~ p + n + distro, data = dat1, FUN = mean)[,4],
#               aggregate(dat1$'1234567_ancest' ~ p + n + distro, data = dat1, FUN = mean)[,4],
#               aggregate(dat1$'2457_ancest' ~ p + n + distro, data = dat1, FUN = mean)[,4],
#               aggregate(dat1$'25_ancest' ~ p + n + distro, data = dat1, FUN = mean)[,4],
# 
#               
#               aggregate(dat1$'47_cover' ~ p + n + distro, data = dat1, FUN = mean)[,4],
#               aggregate(dat1$'1234567_cover' ~ p + n + distro, data = dat1, FUN = mean)[,4],
#               aggregate(dat1$'2457_cover' ~ p + n + distro, data = dat1, FUN = mean)[,4],
#               aggregate(dat1$'25_cover' ~ p + n + distro, data = dat1, FUN = mean)[,4],
#               aggregate(dat1$PtEst ~ p + n + distro, data = dat1, FUN = mean)[,4]
#               )
# 
# names(res3)[1:3] <- c("p", "n", "distro")
# names(res3)[-(1:3)]<- c(paste(rep(c("47", "1234567", "2457", "25"), times = 3), rep(c("size", "ancest", "cover"), each = 4), sep = "_"), "PtEst")
# 
# 
# 
# png("~/Dropbox/presentations/2022/jhu/figures/coverage.png", width = 600, height = 400)
# j <- 1
# distro <- d.list[j]
# ind <- 12
# plot(res3[which(res3[,3] == distro), ind], xlab = "n",
#      ylim = c(.7, 1), type = "b", col =j, xaxt = "n",
#      ylab = "Coverage", main = "Coverage")
# axis(side = 1, at = 1:length(n.list), labels = n.list)
# rect(-1, .9 - 0.0173 * 2, 5, .9 + 0.0173 * 2, col = rgb(.1,.1,.1, alpha=0.1))
# abline(h = .9, col = "darkgray", lwd = 2, lty = 2)
# for(j in 1:length(d.list)){
#   distro <- d.list[j]
#   lines(res3[which(res3[,3] == distro), ind], col = j,
#         type = "b",lwd = 2, pch = 19)
#   
# }
# legend("top", col =1:length(d.list), pch = 19, legend = d.list, ncol = 5)
# dev.off()
# 
# png("~/Dropbox/presentations/2022/jhu/figures/sizeOfSet.png", width = 600, height = 400)
# j <- 1
# distro <- d.list[j]
# ind <- 5
# 
# plot(res3[which(res3[,3] == distro), ind] / factorial(p), xlab = "n",
#      ylim = c(0, .5), type = "b", col =j, xaxt = "n",
#      ylab = "Prop of orderings in CS", main = "Size of Confidence Set",
#      lwd = 2, pch = 19)
# axis(side = 1, at = 1:length(n.list), labels = n.list)
# 
# lines(res3[which(res3[,3] == distro), 16], col = j, lty = 3)
#      
# for(j in 2:length(d.list)){
#   distro <- d.list[j]
#   lines(res3[which(res3[,3] == distro), ind] / factorial(p), col = j,
#         type = "b", lwd = 2, pch = 19)
#   lines(res3[which(res3[,3] == distro), 16], col = j, lty = 3)
#   
# }
# legend("top", col =1:length(d.list), pch = 19, legend = d.list, ncol = 5)
# dev.off()
# 
# png("~/Dropbox/presentations/2022/jhu/figures/ancest.png", width = 600, height = 400)
# j <- 1
# distro <- d.list[j]
# ind <- 9
# plot(res3[which(res3[,3] == distro), ind], xlab = "n",
#      ylim = c(0, 1), type = "b", col =j, xaxt = "n",
#      ylab = "Prop of Ancest. Rel. Recovered", main = "Ancestral Relations",
#      lwd = 2, pch = 19)
# axis(side = 1, at = 1:length(n.list), labels = n.list)
# for(j in 2:length(d.list)){
#   distro <- d.list[j]
#   lines(res3[which(res3[,3] == distro), ind], col = j,
#         type = "b", lwd = 2, pch = 19)
#   
# }
# legend("top", col =1:length(d.list), pch = 19, legend = d.list, ncol = 5)
# dev.off()
