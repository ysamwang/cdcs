nflCombine <- read.csv("https://raw.githubusercontent.com/ysamwang/btry6020_sp22/main/lab11/nflCombine.csv")
# Fit the linear model
mod1 <- lm(VerticalLeap ~ Height, data = nflCombine)
summary(mod1)
74.998 + (65) * -.5714
3.699e+01
3.699e+01 * log(1.01)
exp(-0.0525)
n <- 1000
x <- rnorm(n)
mean(x) * sqrt(n)
(mean(x) * sqrt(n))^2
n <- 1000
x <- rnorm(n)
(mean(x) * sqrt(n))^2
n <- 10000
x <- rnorm(n)
(mean(x) * sqrt(n))^2
n <- 10000
x <- rnorm(n)
(mean(x) * sqrt(n))^2
n <- 10000
x <- rnorm(n)
(mean(x) * sqrt(n))^2
n <- 10000
x <- rnorm(n)
(mean(x) * sqrt(n))^2
n <- 10000
x <- rnorm(n)
(mean(x) * sqrt(n))^2
n <- 10000
x <- rnorm(n)
(mean(x) * sqrt(n))^2
n <- 10000
x <- rnorm(n)
(mean(x) * sqrt(n))^2
n <- 10000
x <- rnorm(n)
(mean(x) * sqrt(n))^2
n <- 100000
x <- rnorm(n)
(mean(x) * sqrt(n))^2
n <- 100000
x <- rnorm(n)
(mean(x) * sqrt(n))^2
n <- 100000
x <- rnorm(n)
(mean(x) * sqrt(n))^2
n <- 100000
x <- rnorm(n)
(mean(x) * sqrt(n))^2
n <- 100000
x <- rnorm(n)
(mean(x) * sqrt(n))^2
n <- 100000
x <- rnorm(n)
(mean(x) * sqrt(n))^2
n <- 100000
x <- rnorm(n)
(mean(x) * sqrt(n))^2
n <- 100000
x <- rnorm(n)
(mean(x) * sqrt(n))^2
n <- 100
ss <- 1000
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
}
n <- 100
ss <- 1000
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
}
mean(rec)
n <- 1000
ss <- 1000
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
}
mean(rec)
n <- 1000
ss <- 1000
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 *lm(Y~ X)$res)
}
mean(rec)
n <- 1000
ss <- 1000
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 *lm(Y~ X)$res)
}
mean(rec)
n <- 1000
ss <- 10000
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 *lm(Y~ X)$res)
}
mean(rec)
n <- 1000
ss <- 1000
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = Y, y = X)$res)
}
mean(rec)
n <- 1000
ss <- 1000
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = Y, y = X)$res)
}
mean(rec)
n <- 1000
ss <- 1000
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = Y, y = X)$res)
}
mean(rec)
n <- 1000
ss <- 1000
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = Y, y = X)$res)
}
mean(rec)
RcppArmadillo::fastLm(X = Y, y = X)$res
n <- 1000
ss <- 1000
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = Y, y = X)$res)
}
mean(rec)
n <- 1000
ss <- 1000
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = Y, y = X)$res)
}
mean(rec)
n <- 1000
ss <- 1000
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = Y, y = X)$res)
}
mean(rec)
n <- 1000
ss <- 100
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = Y, y = X)$res)
}
mean(rec)
n <- 100
ss <- 100
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = Y, y = X)$res)
}
mean(rec)
n <- 100
ss <- 100
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = Y, y = X)$res)
}
mean(rec)
n <- 100
ss <- 100
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = Y, y = X)$res)
}
mean(rec)
n <- 100
ss <- 100
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = X, y = Y)$res)
}
mean(rec)
n <- 100
ss <- 100
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = X, y = Y)$res)
}
mean(rec)
n <- 100
ss <- 100
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = X, y = Y)$res)
}
mean(rec)
n <- 100
ss <- 100
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = X, y = Y)$res)
}
mean(rec)
n <- 100
ss <- 100
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = X, y = Y)$res)
}
mean(rec)
n <- 100
ss <- 100
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = X, y = Y)$res)
}
mean(rec)
n <- 100
ss <- 1000
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = X, y = Y)$res)
}
mean(rec)
n <- 100
ss <- 1000
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = X, y = Y)$res)
}
mean(rec)
n <- 100
ss <- 1000
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = X, y = Y)$res)
}
mean(rec)
n <- 100
ss <- 1000
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = X, y = Y)$res)
}
mean(rec)
n <- 100
ss <- 10000
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = X, y = Y)$res)
}
mean(rec)
n <- 1000
ss <- 10000
rec <- rep(0, ss)
for(i in 1:ss){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
X <-scale(X)
Y <- scale(Y)
# rec[i] <- sqrt(n) * mean(Y^2 *lm(X~ Y)$res)
rec[i] <- sqrt(n) * mean(X^2 * RcppArmadillo::fastLm(X = X, y = Y)$res)
}
mean(rec)
setwd("~/Dropbox/confSetGraphs/code/rPkg/cdcs/test/simulations")
n <- 100
p <- 10
distro <- "gamma"
error.sd <- 1
intercept <- T
bs <- 200
if(distro == "gamma"){
## Independent Gamma's
X <- matrix(rgamma(n * p, 1, 1) - 1, nrow = n, ncol = p)
if(intercept){
X <- cbind(rep(1, n), X)
beta <- rnorm(p + 1)
} else {
beta <- rnorm(p)
}
Y <- X %*% beta + (rgamma(n, 1, 1) - 1) * error.sd
} else if(distro == "gammaCor"){
## Correlated Gamma's
M <- toeplitz(corrParam^(0:(p-1)))
X <- lcmix::rmvgamma(n, corr = M) - 1
if(intercept){
X <- cbind(rep(1, n), X)
beta <- rnorm(p + 1)
} else {
beta <- rnorm(p)
}
Y <- X %*% beta + (rgamma(n, 1, 1) - 1) * error.sd
} else if(distro == "unif"){
X <- matrix(runif(n * p, -sqrt(3), sqrt(3)), nrow = n, ncol = p)
if(intercept){
X <- cbind(rep(1, n), X)
beta <- rnorm(p + 1)
} else {
beta <- rnorm(p)
}
Y <- X %*% beta + runif(n, -sqrt(3), sqrt(3)) * error.sd
} else if(distro == "unifCor"){
M <- toeplitz(corrParam^(0:(p-1)))
X <- (MultiRNG::draw.d.variate.uniform(n, p, M) - .5) * 2  * sqrt(3)
if(intercept){
X <- cbind(rep(1, n), X)
beta <- rnorm(p + 1)
} else {
beta <- rnorm(p)
}
Y <- X %*% beta + runif(n, -sqrt(3), sqrt(3)) * error.sd
} else if (distro == "laplace"){
X <- matrix(rmutil::rlaplace(n * p, 0, 1/sqrt(2)), nrow = n, ncol = p)
if(intercept){
X <- cbind(rep(1, n), X)
beta <- rnorm(p + 1)
} else {
beta <- rnorm(p)
}
Y <- X %*% beta + rmutil::rlaplace(n, 0, 1/sqrt(2)) * error.sd
} else if (distro == "laplaceCor"){
M <- toeplitz(corrParam^(0:(p-1)))
X <- LaplacesDemon::rmvl(n, mu = rep(0, p), Sigma = M)
if(intercept){
X <- cbind(rep(1, n), X)
beta <- rnorm(p + 1)
} else {
beta <- rnorm(p)
}
Y <- X %*% beta + rmutil::rlaplace(n, 0, 1/sqrt(2)) * error.sd
} else if (distro == "weibull"){
a <- 3/4
X <- matrix( (rweibull(n * p, shape = a, 1) - gamma(1 + 1/a)) / sqrt(gamma(1 + 2/a) - gamma(1 + 1/a)^2),
nrow = n, ncol = p, byrow = T)
if(intercept){
X <- cbind(rep(1, n), X)
beta <- rnorm(p + 1)
} else {
beta <- rnorm(p)
}
Y <- X %*% beta + (rweibull(n, shape = a, 1) - gamma(1 + 1/a)) / sqrt(gamma(1 + 2/a) - gamma(1 + 1/a)^2) * error.sd
} else if (distro == "weibullCor") {
a <- 3/4
decay <- 1^(-a)
M <- toeplitz(corrParam^(0:(p-1)))
X <- (lcmix::rmvweisd(n, shape=a, decay=decay, corr= M) - gamma(1 + 1/a)) / sqrt(gamma(1 + 2/a) - gamma(1 + 1/a)^2)
if(intercept){
X <- cbind(rep(1, n), X)
beta <- rnorm(p + 1)
} else {
beta <- rnorm(p)
}
Y <- X %*% beta + (rweibull(n, shape = a, 1) - gamma(1 + 1/a)) / sqrt(gamma(1 + 2/a) - gamma(1 + 1/a)^2) * error.sd
} else if (distro == "bimodalGauss"){
X <- matrix(rnorm(n * p) + sample(c(-2, 2), size = n * p, replace = T), nrow = n, ncol = p)
if(intercept){
X <- cbind(rep(1, n), X)
beta <- rnorm(p + 1)
} else {
beta <- rnorm(p)
}
Y <- X %*% beta + (rnorm(n) + sample(c(-2, 2), size = n, replace = T)) * error.sd
}
regOut <- RcppArmadillo::fastLm(X = X, y = Y)
rec <- rep(0, 8)
k <- max(round(sqrt(n))/2,3)
keps <- max(round(sqrt(n)) ,5)
IndepTest::MINTregression(X,Y, k,  keps, w=FALSE, sample(regOut$res, n * bs, replace = T))
IndepTest::MINTregression(X,Y, k,  keps, w=FALSE, sample(regOut$res, n * bs, replace = T))
