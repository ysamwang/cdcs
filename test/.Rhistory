X <- matrix(rnorm(n * p), n, p)
X <- scale(X)
beta <- rnorm(p, sd = .5)
y <- X %*% beta + rnorm(n)
y <- scale(y)
lambda <- .5
out <- glmnet::glmnet(x = X, y = y, family = "gaussian", alpha = 0, lambda = lambda, standardize = F, intercept = F)
beta.hat <- solve(t(X) %*% X /n + diag(rep(lambda, p)), t(X) %*% y /n)
beta.hat
coef(out)
y
n <- 200
p <- 10
X <- matrix(rnorm(n * p), n, p)
X <- scale(X)
beta <- rnorm(p, sd = .5)
y <- X %*% beta + rnorm(n)
y <- scale(y)
lambda <- .5
out <- glmnet::glmnet(x = X, y = y, family = "gaussian", alpha = 0, lambda = lambda, intercept = F)
beta.hat <- solve(t(X) %*% X /n + diag(rep(lambda, p)), t(X) %*% y /n)
beta.hat
coef(out)
n <- 200
p <- 10
X <- matrix(rnorm(n * p), n, p)
X <- scale(X)
beta <- rnorm(p, sd = .5)
y <- X %*% beta + rnorm(n)
y <- scale(y)
lambda <- .5
out <- glmnet::glmnet(x = X, y = y, family = "gaussian", alpha = 0, lambda = lambda, intercept = F)
beta.hat <- solve(t(X) %*% X /n + diag(rep(lambda, p)), t(X) %*% y /n)
beta.hat
coef(out)
n <- 200
p <- 10
X <- matrix(rnorm(n * p), n, p)
X <- scale(X)
beta <- rnorm(p, sd = .5)
y <- X %*% beta + rnorm(n)
y <- scale(y)
lambda <- .5
out <- glmnet::glmnet(x = X, y = y, family = "gaussian", alpha = 0, lambda = lambda, intercept = F)
beta.hat <- solve(t(X) %*% X /n + diag(rep(lambda, p)), t(X) %*% y /n)
beta.hat
coef(out)
y
n <- 200
p <- 10
X <- matrix(rnorm(n * p), n, p)
X <- scale(X)
beta <- rnorm(p, sd = .5)
y <- X %*% beta + rnorm(n)
y <- scale(y)
lambda <- .5
out <- glmnet::glmnet(x = X, y = y, family = "gaussian", alpha = 0, lambda = lambda, intercept = F)
beta.hat <- solve(t(X) %*% X /n + diag(rep(lambda * n, p)), t(X) %*% y /n)
beta.hat
coef(out)
n <- 200
p <- 10
X <- matrix(rnorm(n * p), n, p)
X <- scale(X)
beta <- rnorm(p, sd = .5)
y <- X %*% beta + rnorm(n)
y <- scale(y)
lambda <- .5
out <- glmnet::glmnet(x = X, y = y, family = "gaussian", alpha = 0, lambda = lambda, intercept = F)
beta.hat <- solve(t(X) %*% X /n + diag(rep(lambda * n, p)), t(X) %*% y /n)
beta.hat
coef(out)
n <- 200
p <- 10
X <- matrix(rnorm(n * p), n, p)
X <- scale(X)
beta <- rnorm(p, sd = .5)
y <- X %*% beta + rnorm(n)
y <- scale(y)
lambda <- .5
out <- glmnet::glmnet(x = X, y = y, family = "gaussian", alpha = 0, lambda = lambda, intercept = F)
beta.hat <- solve(t(X) %*% X /n + diag(rep(lambda, p)), t(X) %*% y /n)
beta.hat
coef(out)
n <- 200
p <- 10
X <- matrix(rnorm(n * p), n, p)
X <- scale(X)
beta <- rnorm(p, sd = .5)
y <- X %*% beta + rnorm(n)
y <- scale(y)
lambda <- .5
out <- glmnet::glmnet(x = X, y = y, family = "gaussian", alpha = 0, lambda = lambda, intercept = F)
beta.hat <- solve(t(X) %*% X /n + diag(rep(lambda, p)), t(X) %*% y /n)
beta.hat
coef(out)
1/(1:p)
p <- 5
1/(1:p)
p <- 5
sum(1/(1:p))
p <- 5
sum(1/(1:p)^2)
p <- 5
.5 / sum(1/(1:p)^2)
p <- 5
.5 / sum(1/(1:p))
p <- 5
.5 / sum(1/(1:p))
p <- 5
.5 / sum(1/(1:p))
p <- 5
.5 / sum(1/(1:p))
p <- 5
.5 / sum(1/(1:p))
omega <- matrix(0, 4, 4)
B <- matrix(0, 4, 4)
matrix(c(2, 1,
3, 2,
3, 4), byrow = T, ncol = 2)
B[matrix(c(2, 1,
3, 2,
3, 4), byrow = T, ncol = 2)] <- rnorm(3)
omega <- matrix(0, 4, 4)
Omega[matrix(c(3, 1,
4, 2,
4, 1), byrow = T, ncol = 2)] <- rnorm(3)
omega <- matrix(0, 4, 4)
Omega[matrix(c(3, 1,
4, 2,
4, 1), byrow = T, ncol = 2)] <- rnorm(3)
B <- matrix(0, 4, 4)
B[matrix(c(2, 1,
3, 2,
3, 4), byrow = T, ncol = 2)] <- rnorm(3)
rowSums(abs(Omega))
Omega <- matrix(0, 4, 4)
Omega[matrix(c(3, 1,
4, 2,
4, 1), byrow = T, ncol = 2)] <- rnorm(3)
Omega <- t(Omega) + Omega
rowSums(abs(Omega))
B <- matrix(0, 4, 4)
B[matrix(c(2, 1,
3, 2,
3, 4), byrow = T, ncol = 2)] <- rnorm(3)
Omega <- matrix(0, 4, 4)
Omega[matrix(c(3, 1,
4, 2,
4, 1), byrow = T, ncol = 2)] <- rnorm(3)
Omega <- t(Omega) + Omega
diag(Omega) <- rowSums(abs(Omega)) + 1
B <- matrix(0, 4, 4)
B[matrix(c(2, 1,
3, 2,
3, 4), byrow = T, ncol = 2)] <- rnorm(3)
Omega
eigen(Omega)$va
Solve((diag(4)- B))
solve((diag(4)- B))
Sigma <- solve((diag(4)- B)) %*% Omega %*% t(solve((diag(4)- B)))
Sigma
Omega <- matrix(0, 4, 4)
Omega[matrix(c(3, 1,
4, 2,
4, 1), byrow = T, ncol = 2)] <- rnorm(3)
Omega <- t(Omega) + Omega
diag(Omega) <- rowSums(abs(Omega)) + 1
B <- matrix(0, 4, 4)
B[matrix(c(2, 1,
3, 2,
3, 4), byrow = T, ncol = 2)] <- rnorm(3)
Sigma <- solve((diag(4)- B)) %*% Omega %*% t(solve((diag(4)- B)))
D32 <- Sigma[3,2] / Sigma[2,2]
D32
D42 <- Sigma[4,2] / Sigma[2,2]
D42
D32
D32 * B[3, 4]
B[3, 4]
D32
D32 * B[3, 4] - D42
choose(4,2)
pi <- .05
1 - (1 - pi)^(2:50)
pi <- .05
size <- 2:50
probOfOne <- 1 - (1 - pi)^size
plot(size, probOfOne)
pi <- .05
size <- 2:50
probOfOne <- 1 - (1 - pi)^size
plot(-1, -1, xlim = c(0, 1), ylim = c(0,1))
pi <- .05
size <- 2:100
plot(-1, -1, xlim = c(0, 1), ylim = c(0,1))
pi <- .05
probOfOne <- 1 - (1 - pi)^size
lines(size, probOfOne, col = "red")
size
pi <- .05
size <- 2:100
plot(-1, -1, xlim = c(0, 1), ylim = c(0,size[length(size)]))
pi <- .05
probOfOne <- 1 - (1 - pi)^size
lines(size, probOfOne, col = "red")
pi <- .05
size <- 2:100
plot(-1, -1, ylim = c(0, 1), xim = c(0,size[length(size)]))
pi <- .05
probOfOne <- 1 - (1 - pi)^size
lines(size, probOfOne, col = "red")
pi <- .05
size <- 2:100
plot(-1, -1, ylim = c(0, 1), xlim = c(0,size[length(size)]))
pi <- .05
probOfOne <- 1 - (1 - pi)^size
lines(size, probOfOne, col = "red")
pi <- .05
size <- 2:100
plot(-1, -1, ylim = c(0, 1), xlim = c(0,size[length(size)]))
pi <- .05
probOfOne <- 1 - (1 - pi)^size
lines(size, probOfOne, col = "red")
pi <- .01
probOfOne <- 1 - (1 - pi)^size
lines(size, probOfOne, col = "blue")
(1-pi)^n
pi <- .01
n <- 1:100
(1-pi)^n
pi <- .01
n <- 1:100
1 - (1-pi)^n
pi <- .01
n <- 1:100
prob <- 1 - (1-pi)^n
plot(n, prob)
pi <- .01
n <- 1:100
prob <- 1 - (1-pi)^n
plot(n, prob, ylim = c(0, 1))
pi <- .01
n <- 1:100
prob <- 1 - (1-pi)^n
plot(n, prob, ylim = c(0, 1), ylim = c(0, 1), type = "l")
pi <- .01
n <- 1:100
prob <- 1 - (1-pi)^n
plot(n, prob, ylim = c(0, 1), type = "l")
p.list <- c(.005, .01, .015, .02)
n <- 1:100
plot(-1, 01, ylim = c(0, 1),xlim = c(0, 100),  type = "l")
for(p in 1:length(p.list)){
pi <- p.list[p]
prob <- 1 - (1-pi)^n
lines(n, prob, ylim = c(0, 1), type = "l")
}
p.list <- c(.005, .01, .015, .02)
n <- 1:100
plot(-1, 01, ylim = c(0, 1),xlim = c(0, 100),  type = "l")
for(p in 1:length(p.list)){
pi <- p.list[p]
prob <- 1 - (1-pi)^n
lines(n, prob, ylim = c(0, 1), type = "l", col = "p")
}
p.list <- c(.005, .01, .015, .02)
n <- 1:100
plot(-1, 01, ylim = c(0, 1),xlim = c(0, 100),  type = "l")
for(p in 1:length(p.list)){
pi <- p.list[p]
prob <- 1 - (1-pi)^n
lines(n, prob, ylim = c(0, 1), type = "l", col = p)
}
p.list <- c(.005, .01, .015, .02)
n <- 1:100
plot(-1, 01, ylim = c(0, 1),xlim = c(0, 100),  type = "l", xlab = "Number of People", ylab = "Prob of at least 1 carrier")
for(p in 1:length(p.list)){
pi <- p.list[p]
prob <- 1 - (1-pi)^n
lines(n, prob, ylim = c(0, 1), type = "l", col = p)
}
legend()
?legend
p.list <- c(.005, .01, .015, .02)
n <- 1:100
plot(-1, 01, ylim = c(0, 1),xlim = c(0, 100),  type = "l", xlab = "Number of People", ylab = "Prob of at least 1 carrier")
for(p in 1:length(p.list)){
pi <- p.list[p]
prob <- 1 - (1-pi)^n
lines(n, prob, ylim = c(0, 1), type = "l", col = p)
}
legend(col = c(1:length(p.list)), legend = p.list)
p.list <- c(.005, .01, .015, .02)
n <- 1:100
plot(-1, 01, ylim = c(0, 1),xlim = c(0, 100),  type = "l", xlab = "Number of People", ylab = "Prob of at least 1 carrier")
for(p in 1:length(p.list)){
pi <- p.list[p]
prob <- 1 - (1-pi)^n
lines(n, prob, ylim = c(0, 1), type = "l", col = p)
}
legend("top", col = c(1:length(p.list)), legend = p.list, lty = 1)
p.list <- c(.005, .01, .015, .02)
n <- 1:100
plot(-1, 01, ylim = c(0, 1),xlim = c(0, 100),  type = "l", xlab = "Number of People", ylab = "Prob of at least 1 carrier")
for(p in 1:length(p.list)){
pi <- p.list[p]
prob <- 1 - (1-pi)^n
lines(n, prob, ylim = c(0, 1), type = "l", col = p)
}
legend("top", col = c(1:length(p.list)), legend = p.list, lty = 1, ncol = 4)
p.list <- c(.005, .01, .015, .02)
n <- 1:20
plot(-1, 01, ylim = c(0, 1),xlim = c(0, max(n)),  type = "l", xlab = "Number of People", ylab = "Prob of at least 1 carrier")
for(p in 1:length(p.list)){
pi <- p.list[p]
prob <- 1 - (1-pi)^n
lines(n, prob, ylim = c(0, 1), type = "l", col = p)
}
legend("top", col = c(1:length(p.list)), legend = p.list, lty = 1, ncol = 4)
p.list <- c(.005, .01, .015, .02)
n <- 1:10
plot(-1, 01, ylim = c(0, 1),xlim = c(0, max(n)),  type = "l", xlab = "Number of People", ylab = "Prob of at least 1 carrier")
for(p in 1:length(p.list)){
pi <- p.list[p]
prob <- 1 - (1-pi)^n
lines(n, prob, ylim = c(0, 1), type = "l", col = p)
}
legend("top", col = c(1:length(p.list)), legend = p.list, lty = 1, ncol = 4)
p.list <- c(.005, .01, .015, .02)
n <- 1:10
plot(-1, 01, ylim = c(0, .2),xlim = c(0, max(n)),  type = "l", xlab = "Number of People", ylab = "Prob of at least 1 carrier")
for(p in 1:length(p.list)){
pi <- p.list[p]
prob <- 1 - (1-pi)^n
lines(n, prob, ylim = c(0, 1), type = "l", col = p)
}
legend("top", col = c(1:length(p.list)), legend = p.list, lty = 1, ncol = 4)
citation("mvtnorm")
print(citation("mvtnorm"), "bibtex")
print(citation("lcmix", "MultiRNG", "LaplacesDemon"), "bibtex")
library(lcmix)
print(citation("lcmix"), "bibtex")
print(citation("MultiRNG"), "bibtex")
print(citation("LaplacesDemon"), "bibtex")
1e-2
param.grid <- expand.grid(n = c(5000, 10000, 25000, 50000), dist = c("gauss", "t", "gamma", "unif", "laplace", "lognormal"),
regime = c("sparse", "medium", "dense"), signs = c(T, F))
param.grid
param.grid <- expand.grid(n = c(5000, 10000, 25000, 50000), dist = c("gauss", "t", "gamma", "unif", "laplace", "lognormal"),
regime = c("sparse", "medium", "dense"), signs = c(T, F))
param.grid <- rbind(param.grid, param.grid)
param.grid
param.grid <- expand.grid(n = c(5000, 10000, 25000, 50000), dist = c("gauss", "t", "gamma", "unif", "laplace", "lognormal"),
regime = c("sparse", "medium", "dense"), signs = c(T, F))
param.grid <- rbind(param.grid, param.grid)
param.grid
library(parallel)
sim.size <- 100
clust.size <- 7
p <- 7
### param.grid size: 288 ###
param.grid <- expand.grid(n = c(5000, 10000, 25000, 50000), dist = c("gauss", "t", "gamma", "unif", "laplace", "lognormal"),
regime = c("sparse", "medium", "dense"), signs = c(T, F))
param.grid <- rbind(param.grid, param.grid)
n <- param.grid[runInd, 1]
dist <- as.character(param.grid[runInd, 2])
alpha <- param.grid[runInd, 3]
regime <- as.character(param.grid[runInd, 4])
signs <- param.grid[runInd, 5]
cover <- data.frame(p = rep(p, sim.size), n = rep(n, each = sim.size), dist = rep(dist, each = sim.size),
alpha = rep(alpha, sim.size), regime = rep(regime, sim.size), signs = rep(signs, sim.size))
runInd <- 1
library(parallel)
sim.size <- 100
clust.size <- 7
p <- 7
### param.grid size: 288 ###
param.grid <- expand.grid(n = c(5000, 10000, 25000, 50000), dist = c("gauss", "t", "gamma", "unif", "laplace", "lognormal"),
regime = c("sparse", "medium", "dense"), signs = c(T, F))
param.grid <- rbind(param.grid, param.grid)
n <- param.grid[runInd, 1]
dist <- as.character(param.grid[runInd, 2])
alpha <- param.grid[runInd, 3]
regime <- as.character(param.grid[runInd, 4])
signs <- param.grid[runInd, 5]
cover <- data.frame(p = rep(p, sim.size), n = rep(n, each = sim.size), dist = rep(dist, each = sim.size),
alpha = rep(alpha, sim.size), regime = rep(regime, sim.size), signs = rep(signs, sim.size))
rep(p, sim.size)
rep(alpha, sim.size)
rep(signs, sim.size)
cover <- data.frame(p = rep(p, sim.size), n = rep(n, each = sim.size), dist = rep(dist, each = sim.size), regime = rep(regime, sim.size), signs = rep(signs, sim.size))
p.list <- c(.005, .01, .015, .02)
n <- 1:10
plot(-1, 01, ylim = c(0, .2),xlim = c(0, max(n)),  type = "l", xlab = "Number of People", ylab = "Prob of at least 1 carrier")
for(p in 1:length(p.list)){
pi <- p.list[p]
prob <- 1 - (1-pi)^n
lines(n, prob, ylim = c(0, 1), type = "l", col = p)
}
legend("top", col = c(1:length(p.list)), legend = p.list, lty = 1, ncol = 4)
p.list <- c(.005, .01, .015, .02)
n <- 1:20
plot(-1, 01, ylim = c(0, .2),xlim = c(0, max(n)),  type = "l", xlab = "Number of People", ylab = "Prob of at least 1 carrier")
for(p in 1:length(p.list)){
pi <- p.list[p]
prob <- 1 - (1-pi)^n
lines(n, prob, ylim = c(0, 1), type = "l", col = p)
}
legend("top", col = c(1:length(p.list)), legend = p.list, lty = 1, ncol = 4)
B <- matrix(0, 4, 4)
B[matrix(c(2,1,
3,2,
4,3,
1, 4), byrow = T, 4, 2)] <- .5
B
?combinat::permn
install.packages("randtests")
randtests::permut(1:4, m = 3)
curl <- function(z, B){
i <- z[1]
j <- z[2]
k <- z[3]
return(B[i,j] + B[j,k] + B[k,i])
}
apply(randtests::permut(1:4, m = 3), MAR = 1, curl, B)
randtests::permut(1:4, m = 3)
install.packages("grplasso")
p <- 10
M <- 5
P <- matrix(runif(p^2 * M^2), p*M, p*M)
5 * diag(p*M)
p <- 10
M <- 5
P <- matrix(runif(p^2 * M^2), p*M, p*M)
t(P) %*% P + 5 * diag(p*M)
diag(t(P) %*% P + 5 * diag(p*M))
n <- 100
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
res <- RcppArmadillo::fastLm(X = X, y = Y)$res
dHSIC::dhsic.test(X, res)
TauStar::tauStarTest(X, res)
TauStar::tauStarTest(X, res)$p
?t.test
emplik::el.test(X^2 * Y, 0)
n <- 100
sim.size <- 5000
rec <- matrix(0, sim.size, 5)
for(i in 1:sim.size){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
res <- RcppArmadillo::fastLm(X = X, y = Y)$res
rec[i, ] <- c(dHSIC::dhsic.test(X, res)$p,
TauStar::tauStarTest(X, res)$p,
t.test(X^2 * Y)$p.v,
emplik::el.test(X^2 * Y, 0)$P)
cat(i)
}
n <- 100
sim.size <- 5000
rec <- matrix(0, sim.size, 4)
for(i in 1:sim.size){
X <- rgamma(n, 1, 1) - 1
Y <- .5 * X + rgamma(n, 1, 1) - 1
res <- RcppArmadillo::fastLm(X = X, y = Y)$res
rec[i, ] <- c(dHSIC::dhsic.test(X, res)$p,
TauStar::tauStarTest(X, res)$p,
t.test(X^2 * Y)$p.v,
emplik::el.test(X^2 * Y, 0)$P)
cat(i)
}
colnames(rec) <- c("dhisc", "tau", "t_test", "el")
rec
i
hist(rec[1:i, 1])
hist(rec[1:i, 2])
hist(rec[1:i, 3])
hist(rec[1:i, 4])
c1 <- rgb(100, 216, 255, max = 255, alpha = 60, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 60, names = "lt.pink")
pdf("test/uni_n100.pdf", width = 5.5, height = 4)
dat <- read.csv("test/results/univariateEx_n100.csv")[, -1]
par(mfrow = c(2,3), mar = c(4, 4, 2, 2), oma = c(0, 0, 2, 0))
plotNames <- c("dHSIC", "Tau", "T Test", "Emp. Like.", "Resid. Boot.")
for(i in 1:5){
plot(-1, -1, xlim = c(0, 1), ylim = c(0, dim(dat)[1]), ylab = "frequency", xlab = "p-values")
hist(dat[,i], breaks = seq(0, 1, by = .05), add = T, col = c1)
hist(dat[,i + 5], breaks = seq(0, 1, by = .05), add = T, col = c2)
mtext(plotNames[i])
abline(h = dim(dat)[1] * .05, col = "black", lwd = 1)
}
mtext("n = 100", outer = TRUE, cex = 1.5)
dev.off()
pdf("test/uni_n1000.pdf", width = 5.5, height = 4)
dat1 <- read.csv("test/results/univariateEx_n1000.csv")[, -1]
par(mfrow = c(2,3), mar = c(4, 4, 2, 2), oma = c(0, 0, 2, 0))
plotNames <- c("dHSIC", "Tau", "T Test", "Emp. Like.", "Resid. Boot.")
for(i in 1:5){
plot(-1, -1, xlim = c(0, 1), ylim = c(0, dim(dat)[1]), ylab = "frequency", xlab = "p-values")
hist(dat1[,i], breaks = seq(0, 1, by = .05), add = T, col = c1)
hist(dat1[,i + 5], breaks = seq(0, 1, by = .05), add = T, col = c2)
mtext(plotNames[i])
abline(h = dim(dat)[1] * .05, col = "black", lwd = 1)
}
mtext("n = 1000", outer = TRUE, cex = 1.5)
dev.off()
out <- cbind(t(rbind(colMeans(dat < .05)
,colMeans(dat < .1))),
t(rbind(colMeans(dat1 < .05)
,colMeans(dat1 < .1))))
setwd("~/Dropbox/confSetGraphs/code/rPkg/cdcs/test")
